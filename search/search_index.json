{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Liberty Workshop Workshop content duration Approximately 5 hours if using all of the Liberty content. Approximately 5 hours if using all of the Transformation Advisor and Mono2Micro content. Workshop Introduction This course introduces the attendees to Liberty, Mono2Micro, and Transformation Advisor. The workshop can be used to support two distinct agendas, or you can mix and match, as all of the hands-on labs are supported on a single Lab environment. Liberty (up to 5 hours) Application Modernization Tools (up to 5 hours) Workshop Objectives: Learn basic Liberty concepts, archive installation, and working with Liberty in various development environments and containers Learn how to use Mono2Micro to create partitioned services from WebSphere monolith applications Learn how to use Transformation Advisor to assess WebSphere Applications for moving to container-based clouds At the end of this workshop, the attendee will learn how to install Liberty, understand Liberty concepts, use Liberty in common IDE\u2019s, Dev Mode, in containers, and from the command line. Attendees get hands-on experience using Mono2Micro from end-to-end, including code generation and deployment of the new partitioned services in Liberty running in containers. Attendees also gain experience using Transformation Advisor during the Java application assessment phase of application modernization journey to Liberty and container-based clouds. This course is geared toward developers and architects who are seeking to understand fundamentals of working with Liberty, Mono2Micro, and Transformation Advisor tools for modernizing traditional WebSphere applications. This is a hands-on workshop that contains the following exercises: Liberty archive installation and setup Getting started with Liberty with Liberty Tools in Eclipse IDE, and command line Using Liberty in Dev Mode via command line Using Liberty Tools in VS Code IDE Using Mono2Micro to create partition services from a WebSphere monolith application Using Transformation Advisor to assess WebSphere applications and deployig to Liberty and containers Reserve lab environments Please follow the reserve environment instructions to reserve a lab environment, or schedule a workshop. The lab environment is configured with the tools you need to be able to complete the labs. Note: Workshop environments must be scheduled at least 3 Days prior to the delivery day of the workshop. Proposed Liberty Agenda Proposed Application Modernization Tools Agenda Agenda Deck Workshop Agenda deck Presentations Presentation material Recorded Presentations Recorded Presentations Recorded Demonstrations Recorded Demonstrations Hands-on Labs Hands-on Labs","title":"Home"},{"location":"#liberty-workshop","text":"","title":"Liberty Workshop"},{"location":"#workshop-content-duration","text":"Approximately 5 hours if using all of the Liberty content. Approximately 5 hours if using all of the Transformation Advisor and Mono2Micro content.","title":"Workshop content duration"},{"location":"LibertyLabs/","text":"Liberty Workshop labs For beginners 1154: Liberty setup - Getting started 1155: Discover Liberty Core labs 1156: Liberty - Getting Started With Dev Mode 1157: Liberty developer experience in VSCode 1153: Getting started with IBM Transformation Advisor 1153-B: IBM Transformation Advisor - Common Code Discovery 1152: Mono2Micro-refactor Java Apps To Microservices","title":"Labs"},{"location":"LibertyLabs/#liberty-workshop-labs","text":"","title":"Liberty Workshop labs"},{"location":"LibertyLabs/#for-beginners","text":"1154: Liberty setup - Getting started 1155: Discover Liberty","title":"For beginners"},{"location":"LibertyLabs/#core-labs","text":"1156: Liberty - Getting Started With Dev Mode 1157: Liberty developer experience in VSCode 1153: Getting started with IBM Transformation Advisor 1153-B: IBM Transformation Advisor - Common Code Discovery 1152: Mono2Micro-refactor Java Apps To Microservices","title":"Core labs"},{"location":"environments-setup/","text":"About environment reservations and workshops The Liberty Workshop asset includes customer facing hands on use case driven labs for Liberty, Transformation Advisor, and Mono2Micro. The material can be used in a variety of ways: Demos for Customers Self enablement for IBMers and Business Partners Customer Facing Workshops When using this asset for running demos or self-enablement, use the Reserve environment option to reserve a single environment. When hosting a customer workshop, use the Create Workshop to request multiple environments for a specific date and time. TIPS: Workshops must be requested at least 72 hours prior to the start of a workshop. Single Environment reservations create an environment NOW and are provisioned immediately, if desired, and can be kept for up to two weeks. Reserve environment or workshop Reserve Single Environment Create Workshop","title":"Reserve lab environment or workshop"},{"location":"environments-setup/#about-environment-reservations-and-workshops","text":"The Liberty Workshop asset includes customer facing hands on use case driven labs for Liberty, Transformation Advisor, and Mono2Micro. The material can be used in a variety of ways: Demos for Customers Self enablement for IBMers and Business Partners Customer Facing Workshops When using this asset for running demos or self-enablement, use the Reserve environment option to reserve a single environment. When hosting a customer workshop, use the Create Workshop to request multiple environments for a specific date and time. TIPS: Workshops must be requested at least 72 hours prior to the start of a workshop. Single Environment reservations create an environment NOW and are provisioned immediately, if desired, and can be kept for up to two weeks.","title":"About environment reservations and workshops"},{"location":"environments-setup/#reserve-environment-or-workshop","text":"Reserve Single Environment Create Workshop","title":"Reserve environment or workshop"},{"location":"environments-setup/reserve-environment/reserve_environment/","text":"Reserve a single environment for demos or self-enablement Need support? Contact Kevin Postreich , Yi Tang IMPORTANT: A VMWare on IBM Cloud lab environment is provided for the labs/demos in this asset. Environment reservations are immediate and can be reserved for up to two weeks in duration. Use the instructions below to reserve your demo/lab environment. Use the link below to access the Liberty Workshop environment reservations page. https://techzone.ibm.com/my/reservations/create/63877af037f8a600183c737b a. Use your IBM ID to login to the IBM Technology Zone b. The Create a reservation page is displayed Select \u201c Reserve for Now \u201d Radio button, and then follow the on-screen dialog to reserve an environment in an IBM Cloud data center in the closest Geography (US-Central, EMEA, Asia Pacific) a. The environment name should be pre-filled with \u201c Liberty Workshop environment - VMWare \u201d b. Purpose : Select a purpose from the drop-down menu AVOID TROUBLE: Selecting TEST only reserves an environemt for 4 hours . If you need the evironemnt for up to two weeks, select a purpose other than Test. c. Customer name(s) : If, in the \"Purpose\" field, you selected demo , proof of technology or proof of concept , then customer name(s) is a required field. Enter customer name(s). d. Description : Enter a description. The field is required. e. End date and time : Use the calendar widget and select the maximum date available (2 weeks from date of reservation) f. Select a time : Select a time of day for reservation to expire g. Select a timezone nearest to you Preferred Geography: Choose an IBM CLoud datacenter in the closest geography (US, EMEA, Asia Pacific) One complete, click on the \u201c Submit \u201d Button The reservation takes a moment to be created. When it is created, click on the \u201c My reservations \u201d button to see the detail so of the environment reservation. Note: The details of your environment reservation are displayed. Then click the reservation page to access the reseration details. On the reservation details page, you will find the Published Service that is used to access the lab environment. Now open the specific lab guide you want to use, and follow the instructions for using the Published Service link to acces the lab environment and how to login to the VM. The lab environment One Ubuntu Linux VM has been provided for this lab. The environment should start automatically and will take several minutes to be ready . The login credentials for the workstation VM is: User ID: ibmdemo Password: passw0rd Now you are ready to use the specific lab guides to setup for demos or self-enablement. The labs are available from the Navigation pane on the left side of the page. How do I find my environment in IBM Technology Zone You may have reserved an environment for multiple days, up to two weeks. Let's say you shutdown your laptop for the day and need to access your environment at a later date, within the reservation period. This section describes how to find your environment reservations in the IBM Technology Zone. Go to the IBM technology Zone URL: https://techzone.ibm.com/ Login using your IBM ID, if requested. From the main menu in Tech Zone, navigate to My Library > My Reservations Select the Liberty Workshop environment - VMWare reservation","title":"Reserve a single environment for demos or self-enablement"},{"location":"environments-setup/reserve-environment/reserve_environment/#reserve-a-single-environment-for-demos-or-self-enablement","text":"Need support? Contact Kevin Postreich , Yi Tang IMPORTANT: A VMWare on IBM Cloud lab environment is provided for the labs/demos in this asset. Environment reservations are immediate and can be reserved for up to two weeks in duration. Use the instructions below to reserve your demo/lab environment. Use the link below to access the Liberty Workshop environment reservations page. https://techzone.ibm.com/my/reservations/create/63877af037f8a600183c737b a. Use your IBM ID to login to the IBM Technology Zone b. The Create a reservation page is displayed Select \u201c Reserve for Now \u201d Radio button, and then follow the on-screen dialog to reserve an environment in an IBM Cloud data center in the closest Geography (US-Central, EMEA, Asia Pacific) a. The environment name should be pre-filled with \u201c Liberty Workshop environment - VMWare \u201d b. Purpose : Select a purpose from the drop-down menu AVOID TROUBLE: Selecting TEST only reserves an environemt for 4 hours . If you need the evironemnt for up to two weeks, select a purpose other than Test. c. Customer name(s) : If, in the \"Purpose\" field, you selected demo , proof of technology or proof of concept , then customer name(s) is a required field. Enter customer name(s). d. Description : Enter a description. The field is required. e. End date and time : Use the calendar widget and select the maximum date available (2 weeks from date of reservation) f. Select a time : Select a time of day for reservation to expire g. Select a timezone nearest to you Preferred Geography: Choose an IBM CLoud datacenter in the closest geography (US, EMEA, Asia Pacific) One complete, click on the \u201c Submit \u201d Button The reservation takes a moment to be created. When it is created, click on the \u201c My reservations \u201d button to see the detail so of the environment reservation. Note: The details of your environment reservation are displayed. Then click the reservation page to access the reseration details. On the reservation details page, you will find the Published Service that is used to access the lab environment. Now open the specific lab guide you want to use, and follow the instructions for using the Published Service link to acces the lab environment and how to login to the VM.","title":"Reserve a single environment for demos or self-enablement"},{"location":"environments-setup/reserve-environment/reserve_environment/#the-lab-environment","text":"One Ubuntu Linux VM has been provided for this lab. The environment should start automatically and will take several minutes to be ready . The login credentials for the workstation VM is: User ID: ibmdemo Password: passw0rd Now you are ready to use the specific lab guides to setup for demos or self-enablement. The labs are available from the Navigation pane on the left side of the page.","title":"The lab environment"},{"location":"environments-setup/reserve-environment/reserve_environment/#how-do-i-find-my-environment-in-ibm-technology-zone","text":"You may have reserved an environment for multiple days, up to two weeks. Let's say you shutdown your laptop for the day and need to access your environment at a later date, within the reservation period. This section describes how to find your environment reservations in the IBM Technology Zone. Go to the IBM technology Zone URL: https://techzone.ibm.com/ Login using your IBM ID, if requested. From the main menu in Tech Zone, navigate to My Library > My Reservations Select the Liberty Workshop environment - VMWare reservation","title":"How do I find my environment in IBM Technology Zone"},{"location":"environments-setup/reserve-workshop/reserve_workshop/","text":"Create a Workshop Reserves multiple environments for customer facing workshops Need support? Contact Kevin Postreich IMPORTANT: A Skytap lab environment is provided for this workshop. Workshop reservations must be made at least 72 hours in advance of the scheduled workshop. Once the workshop is requested it is created in a pending state, awaiting approval by the infrastructure team. When the workshop is approved, its state is moved to approved . Use the instructions below to create your workshop request. Tech Zone Workshop infrastructure and environment support can be obtained via slack #itz_workshop_support or email dte@us.ibm.com Use the link below to access the Liberty Workshop environment reservations page. https://techzone.ibm.com/my/reservations/create/6127f5c66c03be001ef63c48 a. Use your IBM ID to login to the IBM Technology Zone b. The Create a reservation page is displayed Select \u201c Schedule a workshop \u201d Radio button, and then follow the on-screen dialog to schedule a workshop in a Skytap data center in the closest Geography (US-Central, EMEA, Asia Pacific) The Workshop Manager request form is displayed. Requesting a workshop is a multi-page request form. The form is divided into sections, which are reflected by the Tabs across the top. You must fill in ALL required fields on each page before you can go to the next page. Complete the Info page of the workshop request form Read the important details of workshop scheduling on the Info page. Click the next button to continue to the next page. Complete the Environment Information page of the workshop request form Complete the Step 1 Environment Information page of the form a. The environment name should be pre-filled with \u201c Liberty Workshop Skytap Environment \u201d b. Environment Template Region Selection : Select the Geography closest to your workshop location c. Click the Next button Complete the Workshop Justification page of the workshop request form Complete the Step 2 Workshop Justification page a. IBM Product : Type liberty in the field. Type SLOWLY. There is a performance BUG related to how the list is automatically displayed based on the content you type. b. Select any product from the list: Example: IBM WebSphere Application Server Liberty Core Note: Unfortunately, the product list is very out dated and WebSphere Hybrid Edition is not in the list. This information is irrelevant to the workshop reservation but is a required field. c. Workshop Phase : Select the Phase of the customer engagement that most closely aligns to your situation. This field is required. d. Sales Opportunity Number: If you have an opportunity number, you may provide that in this field. The field is optional. e. Customer Company Name(s): Yu may enter customer company names to be included in the workshop request. The field is optional. f. Click the Next button Complete the Scheduling Information page of the workshop request form Complete the Step 3 Scheduling Information page This page includes important scheduling details and affects when and how your workshop is scheduled. Please take care to provide accurate details. Note: The workshop request can be updated after submission, up until it is approved. a. Instructors: Provide a comma delimited list of email addresses of all of the workshop instructors. Note: Instructors will be authorized access to the Workshop Instructor Portal where attendee environments can be observed. b. Workshop Delivery Audience: Select Internal or External from the drop-down list. The field is required. c. Number of Environments: Enter the numeric value of the number of environments you want to have provisioned for the workshop. This value can be LESS than the number of actual attendees that join. An Auto-grow feature selection under the advanced settings can be used to automatically add environments as needed for the workshop in case you reach maximum environment limit. d. Number of Attendees: Enter the numeric value of the number of attendees you expect to have at the workshop. Workshops should have some specified limit of attendees, as not to overwhelm the instructors and result in less than favorable delivery and customer satisfaction of the workshop. e. Start Date / Time: Using the date and time widgets, enter the date, time, and Time zone that the workshop should be scheduled to start. This is the date and time that the automated scheduling system should have your environments available and ready. Personally, I specify 30 minutes to 60 minutes earlier than the actual start time of the workshop just in case there are technical difficulties. f. End Date / Time: Using the date and time widgets, enter the date, time, and Time zone that the workshop should be scheduled to end. This is the date and time that the automated scheduling system should shutdown your environments. Personally, I specify 60 minutes to 120 minutes later that the actual workshop end time just in case the workshop runs longer than expected. ADVANCED SETTINGS on the Scheduling information page. Under the Scheduling Information page, there are advanced settings that further shape when the environments should be deployed, removed, and grow. These advanced settings are optional. The workshop scheduler has default values for deploying and removing environments based on the workshop start / end times that you setup. Auto Stop Limit: This field specifies how long an environment must be idle before it either shuts down or suspends the environment. The default time is 180 minutes. Auto Stop Behavior: This field determines the action to take when an environment is idle for the duration specified in the Auto Stop Limit field. TIP: When the environment includes Redhat OpenShift, ALWAYS specify SHUTDOWN. OpenShift cannot routinely be resumed from a suspended state. Deploy On: This field can be used to specify the date and time for the scheduler to start deploying the environments. TIP: Specify approximately 2 hours prior to your workshop to provide sufficient time for the environments to start. Remove On: This field can be used to specify the date and time for the scheduler to remove the environments. TIP: Specify approximately 1 hour after your workshop is scheduled to end. Enable Auto Grow: Use this field to specify that you want the number of environments to increase if you reach the maximum number of environments that were deployed. The default value is NO Auto grow step size: When auto grow is triggered this filed determines how many environment should be added at a time. The default value is 1 . Auto grow max: Specify the maximum number of environments allowed. Example: If you specified 20 environments, and you want to be able to add 5 additional environments, then this value should be set to 25. Click Next when ready to go to the next page of the workshop scheduler form. Complete the Workshop Information page of the workshop request form Complete the Step 4 Workshop Information page a. Workshop Title : Enter a title for your workshop. This title is searchable in your list of scheduled workshops. Attendees will see this this title. b. Workshop Description : Enter a short description of the workshop. Attendees will see this description c. Physical Location - Region: From the drop-down list, select the Region of the workshop. c. Physical Location - Physical Location: For virtual workshops, enter the WEBEX or Meeting URL of the workshop. e. Workshop Password: Enter a password for the workshop. This is a password that all attendees must enter in order to access the Workshop. As the instructor, you will need to share tis password with the workshop attendees. f. Guide URL: If you have a URL to the Workshop or Lab guides, you can enter it here. This URL is displayed on the workshop page for attendees to see. g. Survey URL: If you have a URL to a workshop survey, you can enter it here. This URL is displayed on the workshop page for attendees to see. h. Click the Submit button to reserve the workshop How do I find my workshop and Environment URLs in IBM Technology Zone Access the workshop in IBM Technology Zone After you submit the workshop request, the workshop details are available in the IBM Technology Zone. This section describes how to find your workshops in the IBM Technology Zone. Go to the IBM technology Zone URL: https://techzone.ibm.com/ Login using your IBM ID, if requested. From the main menu in Tech Zone, navigate to My Library > My Workshops You will see your workshops listed. The one you just submitted will be in Pending Approval state. When the workshop is approved, the state changes to Approved , and you have the ability to view the details of the workshop, view the list of environments, and obtain the Instructor URL and Attendee URL for the Workshop. Obtain the Instructor and Attendee environment URLs for the workshop Once the workshop is deployed as scheduled, the Instructor URL and Attendee URL for the workshop can be obtained from the workshop details. When the workshop is approved, the state changes to Approved , and you have the ability to obtain the Instructor URL and Attendee URL for the Workshop. Click the View icon next to your workshop Click the 3 vertical dots next to any of the environments listed. Then Select the URLS item from the action menu. The Instructor URL and Attendee URL are shown. Share the Instructor URL with the additional instructors of the workshop. The instructor page contains information about the workshop summary, environments, and attendee details. Use the instructor page to manage the workshop Share the Attendee URL with the attendees of your workshop so they can claim one of the environments. Once an attendee claims an environment, the instructor page shows the email address of the attendees using the environment. The workshop environment Each workshop attendee has access to their own lab environment. The lab environment contains Six Linux VMs. When the workshop scheduler completes the environment deployments, the environment should start automatically and will take several minutes to be ready . Note: The Liberty vPoT VM is the VM you will login to and use in the lab. The login credentials for the * Liberty vPoT image is: User ID: ibmdemo Password: passw0rd Now you are ready to use the specific lab guides to setup for demos or self-enablement. Now you are ready for the workshop!","title":"Create a Workshop"},{"location":"environments-setup/reserve-workshop/reserve_workshop/#create-a-workshop","text":"Reserves multiple environments for customer facing workshops Need support? Contact Kevin Postreich IMPORTANT: A Skytap lab environment is provided for this workshop. Workshop reservations must be made at least 72 hours in advance of the scheduled workshop. Once the workshop is requested it is created in a pending state, awaiting approval by the infrastructure team. When the workshop is approved, its state is moved to approved . Use the instructions below to create your workshop request. Tech Zone Workshop infrastructure and environment support can be obtained via slack #itz_workshop_support or email dte@us.ibm.com Use the link below to access the Liberty Workshop environment reservations page. https://techzone.ibm.com/my/reservations/create/6127f5c66c03be001ef63c48 a. Use your IBM ID to login to the IBM Technology Zone b. The Create a reservation page is displayed Select \u201c Schedule a workshop \u201d Radio button, and then follow the on-screen dialog to schedule a workshop in a Skytap data center in the closest Geography (US-Central, EMEA, Asia Pacific) The Workshop Manager request form is displayed. Requesting a workshop is a multi-page request form. The form is divided into sections, which are reflected by the Tabs across the top. You must fill in ALL required fields on each page before you can go to the next page.","title":"Create a Workshop"},{"location":"environments-setup/reserve-workshop/reserve_workshop/#complete-the-info-page-of-the-workshop-request-form","text":"Read the important details of workshop scheduling on the Info page. Click the next button to continue to the next page.","title":"Complete the Info page of the workshop request form"},{"location":"environments-setup/reserve-workshop/reserve_workshop/#complete-the-environment-information-page-of-the-workshop-request-form","text":"Complete the Step 1 Environment Information page of the form a. The environment name should be pre-filled with \u201c Liberty Workshop Skytap Environment \u201d b. Environment Template Region Selection : Select the Geography closest to your workshop location c. Click the Next button","title":"Complete the Environment Information page of the workshop request form"},{"location":"environments-setup/reserve-workshop/reserve_workshop/#complete-the-workshop-justification-page-of-the-workshop-request-form","text":"Complete the Step 2 Workshop Justification page a. IBM Product : Type liberty in the field. Type SLOWLY. There is a performance BUG related to how the list is automatically displayed based on the content you type. b. Select any product from the list: Example: IBM WebSphere Application Server Liberty Core Note: Unfortunately, the product list is very out dated and WebSphere Hybrid Edition is not in the list. This information is irrelevant to the workshop reservation but is a required field. c. Workshop Phase : Select the Phase of the customer engagement that most closely aligns to your situation. This field is required. d. Sales Opportunity Number: If you have an opportunity number, you may provide that in this field. The field is optional. e. Customer Company Name(s): Yu may enter customer company names to be included in the workshop request. The field is optional. f. Click the Next button","title":"Complete the Workshop Justification page of the workshop request form"},{"location":"environments-setup/reserve-workshop/reserve_workshop/#complete-the-scheduling-information-page-of-the-workshop-request-form","text":"Complete the Step 3 Scheduling Information page This page includes important scheduling details and affects when and how your workshop is scheduled. Please take care to provide accurate details. Note: The workshop request can be updated after submission, up until it is approved. a. Instructors: Provide a comma delimited list of email addresses of all of the workshop instructors. Note: Instructors will be authorized access to the Workshop Instructor Portal where attendee environments can be observed. b. Workshop Delivery Audience: Select Internal or External from the drop-down list. The field is required. c. Number of Environments: Enter the numeric value of the number of environments you want to have provisioned for the workshop. This value can be LESS than the number of actual attendees that join. An Auto-grow feature selection under the advanced settings can be used to automatically add environments as needed for the workshop in case you reach maximum environment limit. d. Number of Attendees: Enter the numeric value of the number of attendees you expect to have at the workshop. Workshops should have some specified limit of attendees, as not to overwhelm the instructors and result in less than favorable delivery and customer satisfaction of the workshop. e. Start Date / Time: Using the date and time widgets, enter the date, time, and Time zone that the workshop should be scheduled to start. This is the date and time that the automated scheduling system should have your environments available and ready. Personally, I specify 30 minutes to 60 minutes earlier than the actual start time of the workshop just in case there are technical difficulties. f. End Date / Time: Using the date and time widgets, enter the date, time, and Time zone that the workshop should be scheduled to end. This is the date and time that the automated scheduling system should shutdown your environments. Personally, I specify 60 minutes to 120 minutes later that the actual workshop end time just in case the workshop runs longer than expected.","title":"Complete the Scheduling Information page of the workshop request form"},{"location":"environments-setup/reserve-workshop/reserve_workshop/#advanced-settings-on-the-scheduling-information-page","text":"Under the Scheduling Information page, there are advanced settings that further shape when the environments should be deployed, removed, and grow. These advanced settings are optional. The workshop scheduler has default values for deploying and removing environments based on the workshop start / end times that you setup. Auto Stop Limit: This field specifies how long an environment must be idle before it either shuts down or suspends the environment. The default time is 180 minutes. Auto Stop Behavior: This field determines the action to take when an environment is idle for the duration specified in the Auto Stop Limit field. TIP: When the environment includes Redhat OpenShift, ALWAYS specify SHUTDOWN. OpenShift cannot routinely be resumed from a suspended state. Deploy On: This field can be used to specify the date and time for the scheduler to start deploying the environments. TIP: Specify approximately 2 hours prior to your workshop to provide sufficient time for the environments to start. Remove On: This field can be used to specify the date and time for the scheduler to remove the environments. TIP: Specify approximately 1 hour after your workshop is scheduled to end. Enable Auto Grow: Use this field to specify that you want the number of environments to increase if you reach the maximum number of environments that were deployed. The default value is NO Auto grow step size: When auto grow is triggered this filed determines how many environment should be added at a time. The default value is 1 . Auto grow max: Specify the maximum number of environments allowed. Example: If you specified 20 environments, and you want to be able to add 5 additional environments, then this value should be set to 25. Click Next when ready to go to the next page of the workshop scheduler form.","title":"ADVANCED SETTINGS on the Scheduling information page."},{"location":"environments-setup/reserve-workshop/reserve_workshop/#complete-the-workshop-information-page-of-the-workshop-request-form","text":"Complete the Step 4 Workshop Information page a. Workshop Title : Enter a title for your workshop. This title is searchable in your list of scheduled workshops. Attendees will see this this title. b. Workshop Description : Enter a short description of the workshop. Attendees will see this description c. Physical Location - Region: From the drop-down list, select the Region of the workshop. c. Physical Location - Physical Location: For virtual workshops, enter the WEBEX or Meeting URL of the workshop. e. Workshop Password: Enter a password for the workshop. This is a password that all attendees must enter in order to access the Workshop. As the instructor, you will need to share tis password with the workshop attendees. f. Guide URL: If you have a URL to the Workshop or Lab guides, you can enter it here. This URL is displayed on the workshop page for attendees to see. g. Survey URL: If you have a URL to a workshop survey, you can enter it here. This URL is displayed on the workshop page for attendees to see. h. Click the Submit button to reserve the workshop","title":"Complete the Workshop Information page of the workshop request form"},{"location":"environments-setup/reserve-workshop/reserve_workshop/#how-do-i-find-my-workshop-and-environment-urls-in-ibm-technology-zone","text":"","title":"How do I find my workshop and Environment URLs in IBM Technology Zone"},{"location":"environments-setup/reserve-workshop/reserve_workshop/#access-the-workshop-in-ibm-technology-zone","text":"After you submit the workshop request, the workshop details are available in the IBM Technology Zone. This section describes how to find your workshops in the IBM Technology Zone. Go to the IBM technology Zone URL: https://techzone.ibm.com/ Login using your IBM ID, if requested. From the main menu in Tech Zone, navigate to My Library > My Workshops You will see your workshops listed. The one you just submitted will be in Pending Approval state. When the workshop is approved, the state changes to Approved , and you have the ability to view the details of the workshop, view the list of environments, and obtain the Instructor URL and Attendee URL for the Workshop.","title":"Access the workshop in IBM Technology Zone"},{"location":"environments-setup/reserve-workshop/reserve_workshop/#obtain-the-instructor-and-attendee-environment-urls-for-the-workshop","text":"Once the workshop is deployed as scheduled, the Instructor URL and Attendee URL for the workshop can be obtained from the workshop details. When the workshop is approved, the state changes to Approved , and you have the ability to obtain the Instructor URL and Attendee URL for the Workshop. Click the View icon next to your workshop Click the 3 vertical dots next to any of the environments listed. Then Select the URLS item from the action menu. The Instructor URL and Attendee URL are shown. Share the Instructor URL with the additional instructors of the workshop. The instructor page contains information about the workshop summary, environments, and attendee details. Use the instructor page to manage the workshop Share the Attendee URL with the attendees of your workshop so they can claim one of the environments. Once an attendee claims an environment, the instructor page shows the email address of the attendees using the environment.","title":"Obtain the Instructor and Attendee environment URLs for the workshop"},{"location":"environments-setup/reserve-workshop/reserve_workshop/#the-workshop-environment","text":"Each workshop attendee has access to their own lab environment. The lab environment contains Six Linux VMs. When the workshop scheduler completes the environment deployments, the environment should start automatically and will take several minutes to be ready . Note: The Liberty vPoT VM is the VM you will login to and use in the lab. The login credentials for the * Liberty vPoT image is: User ID: ibmdemo Password: passw0rd Now you are ready to use the specific lab guides to setup for demos or self-enablement. Now you are ready for the workshop!","title":"The workshop environment"},{"location":"lab-guides/md/1154/","text":"Liberty: Getting Started Setup the Liberty environment In the initial setup of Liberty, you will install Liberty using the Archive method. Then, you will create your first Liberty server, start it, and deploy a simple Java EE application to the server to test the Liberty server runtime. You will use am Ubuntu Linux VM that has been prepared for the Liberty labs and includes the following: The Liberty package has been downloaded to /home/ibmdemo/Downloads directory The IBM JDK has been downloaded to /home/ibmdemo/Downloads directory The required Operating System libraries have been installed. Information: The Liberty image contains WebSphere Developer Tools for Eclipse. The VMWare image contains the \u201cwdt\u201d folder that contains the WebSphere Developer Tools that is used for the lab. TIP: To reduce typing or copy & past of commands, you can find the related code snippets or commands in the VMWare image in the directory: /home/ibmdemo/Student/lab-files/CodeSnippets/Bootcamp_Lab1_setup_CodeSnippets.txt Accessing the lab environment If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment. Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 The lab environment contains one (1) Linux VM, named Workstation . The Ubuntu Linux Workstation VM has the following software installed for the lab: Application Project with Liberty Maven 3.6.0 Access the lab environment from your web browser. A Published Service is configured to provide access to the Workstation VM through the noVNC interface for the lab environment. a. When the environment is provisioned, right-mouse click on the Published Service link and open the URL in a new private or incognito browser window, as described below: If using Google Chrome browser, select \"Open link in incognito window\" from the context menu. If using Firefox browser, select \"Open link in new private window\" from the context menu. b. Click on the \"vnc.html\" link to open the lab environment through the noVNC interface. c. Click the Connect button d. Enter the password as: passw0rd . Then click the Send Credentials button to access the lab environment. Note: That is a numeric zero in passw0rd Login with ibmdemo ID. a. Click on the \u201c ibmdemo \u201d icon on the Ubuntu screen. b. When prompted for the password for \u201c ibmdemo \u201d user, enter \u201c passw0rd \u201d as the password: Password: passw0rd (lowercase with a zero instead of the o) Once you access the Student VM through the published service, you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) Tips for working the in lab environment You can use your Browsers zoom in and zoom out options to resize the virtual desktop to fit your screen. The examples below are using Firefox and Chrome browsers. Firefox example: Chrome example: You can copy / paste text from the lab guide into the lab environment using the clipboard in the noVNC viewer. a. Copy the text from the lab guide that you want to paste into the lab environment b. Click the Clipboard icon and paste the text into the noVNC clipboard c. Paste the tect into the VM, such as to a terminal window, browser window, etc. d. Click on the clipboard icon agian to close the clipboard NOTE: Sometimes pasting into a Terminal window in the VM does not work consistently. In this case you might try again, or paste the text into a Text Editor in the VM, and then paste it into the Terminal window in the VM. An alternative to using the noVNC Copy / Paste option, you may considr openeing the lab guide in a web browser inside of the VM. Using this method, you can easily copy / paste text from the lab guide wihout having to use the noVNC clipboard. Important: Click CANCEL \u2026. If, at any time during the lab, you get a pop-up asking to install updated software onto the Ubuntu VM. The one we experience is an update available for VS Code. CLICK CANCEL! Extract the extended Liberty vPoT image Locate the script on the desktop and double-click on it to run in terminal Wait until the image has been extracted. Once completed, press Enter to continue: The Liberty vPOT contents are extracted to /home/ibmdemo/Student/WLP_21.0.0.3 , and is referred as { LAB_HOME } throughout the labs. Information: If you need to reset the image at some point of time, make sure that all programs are stopped and run the script again. This will clean-up the directory /home/ibmdemo/Student/WLP_* and extract the image again. Install WebSphere Liberty For your convenience, Liberty has already been installed into the directory /home/ibmdemo/Student/WLP_21.0.0.3/wlp . However, in this section, you will install a new instance of Liberty to learn how easy and fast it is to install Liberty, using the archive installation method. Liberty can be installed via IBM Installation Manager, but the more convenient way is to use an Archive Install. The related packages can be downloaded from Passport Advantage, but the most recent versions are only available on the IBM Support pages. There are separate packages available for the Liberty edition and for the IBM Java SDK. Liberty for Developers downloads and documentation is located here: https://www.ibm.com/support/pages/node/6250961#asset/ In this section we will use these two packages, which are Java JDK v8 and Liberty ND edition. IBM Java SDK for WebSphere: ibm-java-sdk-8.0-6.26-linux-x86_64.tgz IBM WebSphere Liberty ND Archive Install: wlp-nd-all-21.0.0.3.jar To install Liberty using the Archive method, perform the following steps: Open a Terminal window by clicking on the appropriate icon: Navigate to the \u201cStudent\u201d directory: cd /home/ibmdemo/Student Create a temporary directory and navigate to that directory mkdir temp cd temp Extract the IBM Java SDK to the ~/Student/temp/directory. This will extract the JDK to the directory ibm-java-x86_64-80 tar -zxvf '/home/ibmdemo/Downloads/ibm-java-sdk-8.0-6.26-linux-x86_64.tgz' Extract the WebSphere Liberty ND package to the ~/Student/temp directory. The Liberty Archive is a Java \u201cjar\u201d file. To extract the archive, use the java -jar command. ibm-java-x86_64-80/bin/java -jar '/home/ibmdemo/Downloads/wlp-nd-all-21.0.0.3.jar' --acceptLicense . The --acceptLicense option is included to automatically accept the license, without having additional prompts. The dot at the end of the command means to extract the archive to the current directory. The Liberty archive is extracted, and Liberty is now installed in the wlp subdirectory. List the two directories that were created via the extraction of the Java JDK and Liberty ND ls Liberty is now installed the wlp directory. IBK JDK is now installed in the ibm-java-x86_64-80 directory Set the JAVA_HOME path to tell Liberty to use the Java SDK that you just extracted export JAVA_HOME=~/Student/temp/ibm-java-x86_64-80/jre/ Display the product information for Liberty a. Display the Liberty product edition and version wlp/bin/productInfo version The output should indicate the Liberty Edition is ND , and the product version should match the Liberty Archive that is used in the lab. Liberty fixpacks are delivered on a four-week continues delivery interval. The Version indicates the YEAR and MONTH of the Liberty fixpack installed. 21.0.0.3 is the 3 rd fixpack in 2021 b. Display the list of installed features wlp/bin/productInfo featureInfo The output should look similar to the illustration below, which includes all of the Liberty ND features. The screen shot is only a partial list of installed features of Liberty ND. c. You have just installed Liberty in the temp directory using the archive install method . It\u2019s that simple to install Liberty. Creating and working with a new Liberty server is equally simple. You will do that in the next sections of the lab. There are more than 200 features installed via the Liberty ND package. By default, you would start with a much more light-weight package. If you are interested to see which features belong to which Liberty Edition, please look here: https://www.ibm.com/docs/en/was-liberty/nd?topic=management-liberty-features Information: As mentioned before, Liberty has already been installed into the directory /home/ibmdemo/Student/WLP_21.0.0.3*/wlp. We will NOT use the Liberty installed in the temp directory in the next sections of the lab. You can ignore the temp directory. Close the Terminal window. INFORMATION ONLY \u2013 Open Liberty How does Open Liberty fit into the Liberty family of editions? Open Liberty is the lightweight open source server runtime that can be ideal for building Java microservices and cloud-native apps. Open Liberty provides a proven open source foundation for the WebSphere Liberty portfolio. All of the editions of Liberty are built on top of the same code base from Open Liberty. Liberty Core offers supported Web Profile Liberty Base offers supported Full Profile Liberty ND offers supported Full Profile and clustering / workload management capabilities All 3 commercial editions provide additional capabilities: Programming model extensions Production quality of service extensions Security extensions And IBM\u2019s full support INFORMATION ONLY \u2013 Open Liberty Downloads, Docker, and Devops How do you get Open Liberty? Open Liberty can be obtained via zip file downloads, or through Maven, Gradle, and Docker. Visit https://openliberty.io/downloads/ to find the latest Open Liberty releases and builds. Open Liberty Zip File Download packages are available here: https://openliberty.io/downloads/#runtime_releases Below are examples of getting Open Liberty using Maven, Gradle, and Docker. Create test server Open a Terminal window by clicking on the appropriate icon: Navigate to the Liberty runtime installation directory {LAB_HOME}/wlp/bin cd /home/ibmdemo/Student/WLP_21.0.0.3/wlp Run the following command to create a new server named \u201c myServer \u201d bin/server create myServer The server command supports actions for starting, stopping, creating, packaging, and dumping a Liberty server. The server create command creates a new Liberty server with the name specified. Additional detail on the server command can be found here: https://www.ibm.com/docs/en/was-liberty/base?topic=line-server-command-options The new server is created in the following directory: /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer The server.xml file is the complete default server configuration. Open an editor to view the server configuration file. Ensure you are in the correct directory before opening the server.xml file. cd /home/ibmdemo/Student/WLP_21.0.0.3/wlp gedit usr/servers/myServer/server.xml The server.xml defines a minimal configuration needed to start a Liberty server. In this example, it includes only the JSP feature, and defines the HTTP and HTTPS endpoints that the server is listening for incoming HTTP(S) requests. Close the gedit editor. Start the server instance using the server start command: bin/server start myServer This runs the server in the background and the output is written to files in the {LAB_HOME}/wlp/usr/servers/myServer/logs directory. Alternatively, to start the server in the foreground (so the console messages are seen in the command window) you can use the command \u201c bin/server run myServer \u201d View the Liberty server\u2019s messages.log file to see the server startup messages cat usr/servers/myServer/logs/messages.log The server is started when the message \u201cT he myServer server is ready to run a smarter planet\u201d is displayed in the messages.log file. Stop the server with the server stop command: bin/server stop myServer Having verified the Liberty installation, you can delete the test server \u201c myServer \u201d simply be removing its directory. Delete the server by deleting the {LAB_HOME}/wlp/usr/servers/myServer directory. rm -rf usr/servers/myServer You now have a Liberty runtime environment that is ready to create servers to run applications. Short recap of what you just did In the previous step, you deleted a Liberty server configuration. You did NOT delete the Liberty installation and its binaries. This is an important concept of Liberty. The Liberty Runtime binaries are separate from the Liberty Server configurations. Liberty was installed in \\~/Student/WLP_21.0.0.3 /wlp By default, the Liberty Server configurations are in ~/Student/WLP_21.0.0.3 /wlp/usr/ The Server configuration directory can be located anywhere, including outside of the default location of /wlp/usr. The Server configuration location can be over-ridden using the Liberty bult-in variable \u201c${wlp.user.dir}\u201d. In fact, this concept is instrumental in Liberty providing zero migration for unchanged apps while keeping current with Liberty Fixpacks, as illustrated below. Just install a new Liberty Fixpack (Archive install) Update the WLP_USER_DIR variable to point to your existing server configurations location. Test the WebSphere Developer Tools (WDT) You can manage Liberty from the command line and edit the server configuration files using your favorite editor. However, the WebSphere Developer Tools (WDT) provide a great configuration editor, server controls and application publishing, as well as many other time-saving utilities. In this section, you will explore using WDT with Liberty. Normally, you would first download and install Eclipse, followed by the installation of WDT Eclipse plugin. For this lab, we have bundled everything into a single zip file. The directory {LAB_HOME}/wdt contains a prebuilt and expanded WDT. Information: Upon first startup, it may take Eclipse up to a minute to start as it initializes. Launch Eclipse a. Use the File Explorer to navigate to the directory: Home > Student > WLP_21.0.0.3 > wdt > eclipse b. Double-click on the eclipse executable to start Eclipse. c. When the Eclipse launcher prompts you to select a workspace, enter the following directory. Then click the Launch button. /home/ibmdemo/Student/WLP_21.0.0.3/workspace d. Close the welcome page by clicking on the \u2018X \u2019 icon. Create Liberty Server in WDT Previously in the lab, you used the command line to create and start a Liberty server. Developers often work in an integrated development environments such as Eclipse, VS Code, or Intelij, to name a few, to enhance their productivity. IBM WebSphere Developer Tools for Eclipse enhances developer productivity by providing a lightweight set of tools that you can use to develop, assemble, and deploy Java EE, OSGi and mobile applications to WebSphere Application Server traditional and Liberty. In this section, you will use the WebSphere Developer Tools with the Eclipse IDE to work with Liberty. First, create a Liberty server using the integrated tools. At the bottom of the Eclipse workbench, open the Servers view by clicking the Servers tab. Right-click within the windows of the Servers view and select New > Server Under the server type list, expand IBM and select the Liberty Server type. Use the default eclipse server name as supplied ( localhost ). a. Click Next . This creates the liberty server object in eclipse, and the Liberty Runtime Environment page is displayed. Now eclipse needs to associate the \u2018 localhost\u2019 server with a server configuration in a Liberty runtime (the runtime that you installed previously in the lab). a. In the Path field under the \u201c Choose an existing installation \u201d section, type or browse for the directory where you installed the Liberty runtime environment shown below: /home/ibmdemo/Student/WLP_21.0.0.3/wlp b. Click Next . to continue To create the server configuration in the runtime, replace in the Server name field with labServer . Then click Finish . The new server will appear in the Servers view. You can expand the server to show a quick view of the configuration. Open the server configuration editor by double-clicking on Server Configuration (server.xml): The Server configuration view is displayed. The default view is \u201c Design \u201d mode, which provides an intuitive server configuration editor UI. a. Click on the \u201c Design \u201d view tab if it is not already selected. b. You can click on the Source\u201d view tab to edit the server.xml source directly. Cleanup Close the server.xml editor Exi t Eclipse by selecting using the File > Exit from the Eclipse main menu. Close any open Terminal windows === END OF LAB ===","title":"Liberty: Getting Started"},{"location":"lab-guides/md/1154/#liberty-getting-started","text":"","title":"Liberty: Getting Started"},{"location":"lab-guides/md/1154/#setup-the-liberty-environment","text":"In the initial setup of Liberty, you will install Liberty using the Archive method. Then, you will create your first Liberty server, start it, and deploy a simple Java EE application to the server to test the Liberty server runtime. You will use am Ubuntu Linux VM that has been prepared for the Liberty labs and includes the following: The Liberty package has been downloaded to /home/ibmdemo/Downloads directory The IBM JDK has been downloaded to /home/ibmdemo/Downloads directory The required Operating System libraries have been installed. Information: The Liberty image contains WebSphere Developer Tools for Eclipse. The VMWare image contains the \u201cwdt\u201d folder that contains the WebSphere Developer Tools that is used for the lab. TIP: To reduce typing or copy & past of commands, you can find the related code snippets or commands in the VMWare image in the directory: /home/ibmdemo/Student/lab-files/CodeSnippets/Bootcamp_Lab1_setup_CodeSnippets.txt","title":"Setup the Liberty environment"},{"location":"lab-guides/md/1154/#accessing-the-lab-environment","text":"If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment. Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 The lab environment contains one (1) Linux VM, named Workstation . The Ubuntu Linux Workstation VM has the following software installed for the lab: Application Project with Liberty Maven 3.6.0 Access the lab environment from your web browser. A Published Service is configured to provide access to the Workstation VM through the noVNC interface for the lab environment. a. When the environment is provisioned, right-mouse click on the Published Service link and open the URL in a new private or incognito browser window, as described below: If using Google Chrome browser, select \"Open link in incognito window\" from the context menu. If using Firefox browser, select \"Open link in new private window\" from the context menu. b. Click on the \"vnc.html\" link to open the lab environment through the noVNC interface. c. Click the Connect button d. Enter the password as: passw0rd . Then click the Send Credentials button to access the lab environment. Note: That is a numeric zero in passw0rd Login with ibmdemo ID. a. Click on the \u201c ibmdemo \u201d icon on the Ubuntu screen. b. When prompted for the password for \u201c ibmdemo \u201d user, enter \u201c passw0rd \u201d as the password: Password: passw0rd (lowercase with a zero instead of the o) Once you access the Student VM through the published service, you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.)","title":"Accessing the lab environment"},{"location":"lab-guides/md/1154/#tips-for-working-the-in-lab-environment","text":"You can use your Browsers zoom in and zoom out options to resize the virtual desktop to fit your screen. The examples below are using Firefox and Chrome browsers. Firefox example: Chrome example: You can copy / paste text from the lab guide into the lab environment using the clipboard in the noVNC viewer. a. Copy the text from the lab guide that you want to paste into the lab environment b. Click the Clipboard icon and paste the text into the noVNC clipboard c. Paste the tect into the VM, such as to a terminal window, browser window, etc. d. Click on the clipboard icon agian to close the clipboard NOTE: Sometimes pasting into a Terminal window in the VM does not work consistently. In this case you might try again, or paste the text into a Text Editor in the VM, and then paste it into the Terminal window in the VM. An alternative to using the noVNC Copy / Paste option, you may considr openeing the lab guide in a web browser inside of the VM. Using this method, you can easily copy / paste text from the lab guide wihout having to use the noVNC clipboard. Important: Click CANCEL \u2026. If, at any time during the lab, you get a pop-up asking to install updated software onto the Ubuntu VM. The one we experience is an update available for VS Code. CLICK CANCEL!","title":"Tips for working the in lab environment"},{"location":"lab-guides/md/1154/#extract-the-extended-liberty-vpot-image","text":"Locate the script on the desktop and double-click on it to run in terminal Wait until the image has been extracted. Once completed, press Enter to continue: The Liberty vPOT contents are extracted to /home/ibmdemo/Student/WLP_21.0.0.3 , and is referred as { LAB_HOME } throughout the labs. Information: If you need to reset the image at some point of time, make sure that all programs are stopped and run the script again. This will clean-up the directory /home/ibmdemo/Student/WLP_* and extract the image again.","title":"Extract the extended Liberty vPoT image"},{"location":"lab-guides/md/1154/#install-websphere-liberty","text":"For your convenience, Liberty has already been installed into the directory /home/ibmdemo/Student/WLP_21.0.0.3/wlp . However, in this section, you will install a new instance of Liberty to learn how easy and fast it is to install Liberty, using the archive installation method. Liberty can be installed via IBM Installation Manager, but the more convenient way is to use an Archive Install. The related packages can be downloaded from Passport Advantage, but the most recent versions are only available on the IBM Support pages. There are separate packages available for the Liberty edition and for the IBM Java SDK. Liberty for Developers downloads and documentation is located here: https://www.ibm.com/support/pages/node/6250961#asset/ In this section we will use these two packages, which are Java JDK v8 and Liberty ND edition. IBM Java SDK for WebSphere: ibm-java-sdk-8.0-6.26-linux-x86_64.tgz IBM WebSphere Liberty ND Archive Install: wlp-nd-all-21.0.0.3.jar To install Liberty using the Archive method, perform the following steps: Open a Terminal window by clicking on the appropriate icon: Navigate to the \u201cStudent\u201d directory: cd /home/ibmdemo/Student Create a temporary directory and navigate to that directory mkdir temp cd temp Extract the IBM Java SDK to the ~/Student/temp/directory. This will extract the JDK to the directory ibm-java-x86_64-80 tar -zxvf '/home/ibmdemo/Downloads/ibm-java-sdk-8.0-6.26-linux-x86_64.tgz' Extract the WebSphere Liberty ND package to the ~/Student/temp directory. The Liberty Archive is a Java \u201cjar\u201d file. To extract the archive, use the java -jar command. ibm-java-x86_64-80/bin/java -jar '/home/ibmdemo/Downloads/wlp-nd-all-21.0.0.3.jar' --acceptLicense . The --acceptLicense option is included to automatically accept the license, without having additional prompts. The dot at the end of the command means to extract the archive to the current directory. The Liberty archive is extracted, and Liberty is now installed in the wlp subdirectory. List the two directories that were created via the extraction of the Java JDK and Liberty ND ls Liberty is now installed the wlp directory. IBK JDK is now installed in the ibm-java-x86_64-80 directory Set the JAVA_HOME path to tell Liberty to use the Java SDK that you just extracted export JAVA_HOME=~/Student/temp/ibm-java-x86_64-80/jre/ Display the product information for Liberty a. Display the Liberty product edition and version wlp/bin/productInfo version The output should indicate the Liberty Edition is ND , and the product version should match the Liberty Archive that is used in the lab. Liberty fixpacks are delivered on a four-week continues delivery interval. The Version indicates the YEAR and MONTH of the Liberty fixpack installed. 21.0.0.3 is the 3 rd fixpack in 2021 b. Display the list of installed features wlp/bin/productInfo featureInfo The output should look similar to the illustration below, which includes all of the Liberty ND features. The screen shot is only a partial list of installed features of Liberty ND. c. You have just installed Liberty in the temp directory using the archive install method . It\u2019s that simple to install Liberty. Creating and working with a new Liberty server is equally simple. You will do that in the next sections of the lab. There are more than 200 features installed via the Liberty ND package. By default, you would start with a much more light-weight package. If you are interested to see which features belong to which Liberty Edition, please look here: https://www.ibm.com/docs/en/was-liberty/nd?topic=management-liberty-features Information: As mentioned before, Liberty has already been installed into the directory /home/ibmdemo/Student/WLP_21.0.0.3*/wlp. We will NOT use the Liberty installed in the temp directory in the next sections of the lab. You can ignore the temp directory. Close the Terminal window.","title":"Install WebSphere Liberty"},{"location":"lab-guides/md/1154/#information-only-open-liberty","text":"How does Open Liberty fit into the Liberty family of editions? Open Liberty is the lightweight open source server runtime that can be ideal for building Java microservices and cloud-native apps. Open Liberty provides a proven open source foundation for the WebSphere Liberty portfolio. All of the editions of Liberty are built on top of the same code base from Open Liberty. Liberty Core offers supported Web Profile Liberty Base offers supported Full Profile Liberty ND offers supported Full Profile and clustering / workload management capabilities All 3 commercial editions provide additional capabilities: Programming model extensions Production quality of service extensions Security extensions And IBM\u2019s full support","title":"INFORMATION ONLY \u2013 Open Liberty"},{"location":"lab-guides/md/1154/#information-only-open-liberty-downloads-docker-and-devops","text":"How do you get Open Liberty? Open Liberty can be obtained via zip file downloads, or through Maven, Gradle, and Docker. Visit https://openliberty.io/downloads/ to find the latest Open Liberty releases and builds. Open Liberty Zip File Download packages are available here: https://openliberty.io/downloads/#runtime_releases Below are examples of getting Open Liberty using Maven, Gradle, and Docker.","title":"INFORMATION ONLY \u2013 Open Liberty Downloads, Docker, and Devops"},{"location":"lab-guides/md/1154/#create-test-server","text":"Open a Terminal window by clicking on the appropriate icon: Navigate to the Liberty runtime installation directory {LAB_HOME}/wlp/bin cd /home/ibmdemo/Student/WLP_21.0.0.3/wlp Run the following command to create a new server named \u201c myServer \u201d bin/server create myServer The server command supports actions for starting, stopping, creating, packaging, and dumping a Liberty server. The server create command creates a new Liberty server with the name specified. Additional detail on the server command can be found here: https://www.ibm.com/docs/en/was-liberty/base?topic=line-server-command-options The new server is created in the following directory: /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer The server.xml file is the complete default server configuration. Open an editor to view the server configuration file. Ensure you are in the correct directory before opening the server.xml file. cd /home/ibmdemo/Student/WLP_21.0.0.3/wlp gedit usr/servers/myServer/server.xml The server.xml defines a minimal configuration needed to start a Liberty server. In this example, it includes only the JSP feature, and defines the HTTP and HTTPS endpoints that the server is listening for incoming HTTP(S) requests. Close the gedit editor. Start the server instance using the server start command: bin/server start myServer This runs the server in the background and the output is written to files in the {LAB_HOME}/wlp/usr/servers/myServer/logs directory. Alternatively, to start the server in the foreground (so the console messages are seen in the command window) you can use the command \u201c bin/server run myServer \u201d View the Liberty server\u2019s messages.log file to see the server startup messages cat usr/servers/myServer/logs/messages.log The server is started when the message \u201cT he myServer server is ready to run a smarter planet\u201d is displayed in the messages.log file. Stop the server with the server stop command: bin/server stop myServer Having verified the Liberty installation, you can delete the test server \u201c myServer \u201d simply be removing its directory. Delete the server by deleting the {LAB_HOME}/wlp/usr/servers/myServer directory. rm -rf usr/servers/myServer You now have a Liberty runtime environment that is ready to create servers to run applications.","title":"Create test server"},{"location":"lab-guides/md/1154/#short-recap-of-what-you-just-did","text":"In the previous step, you deleted a Liberty server configuration. You did NOT delete the Liberty installation and its binaries. This is an important concept of Liberty. The Liberty Runtime binaries are separate from the Liberty Server configurations. Liberty was installed in \\~/Student/WLP_21.0.0.3 /wlp By default, the Liberty Server configurations are in ~/Student/WLP_21.0.0.3 /wlp/usr/ The Server configuration directory can be located anywhere, including outside of the default location of /wlp/usr. The Server configuration location can be over-ridden using the Liberty bult-in variable \u201c${wlp.user.dir}\u201d. In fact, this concept is instrumental in Liberty providing zero migration for unchanged apps while keeping current with Liberty Fixpacks, as illustrated below. Just install a new Liberty Fixpack (Archive install) Update the WLP_USER_DIR variable to point to your existing server configurations location.","title":"Short recap of what you just did"},{"location":"lab-guides/md/1154/#test-the-websphere-developer-tools-wdt","text":"You can manage Liberty from the command line and edit the server configuration files using your favorite editor. However, the WebSphere Developer Tools (WDT) provide a great configuration editor, server controls and application publishing, as well as many other time-saving utilities. In this section, you will explore using WDT with Liberty. Normally, you would first download and install Eclipse, followed by the installation of WDT Eclipse plugin. For this lab, we have bundled everything into a single zip file. The directory {LAB_HOME}/wdt contains a prebuilt and expanded WDT. Information: Upon first startup, it may take Eclipse up to a minute to start as it initializes. Launch Eclipse a. Use the File Explorer to navigate to the directory: Home > Student > WLP_21.0.0.3 > wdt > eclipse b. Double-click on the eclipse executable to start Eclipse. c. When the Eclipse launcher prompts you to select a workspace, enter the following directory. Then click the Launch button. /home/ibmdemo/Student/WLP_21.0.0.3/workspace d. Close the welcome page by clicking on the \u2018X \u2019 icon.","title":"Test the WebSphere Developer Tools (WDT)"},{"location":"lab-guides/md/1154/#create-liberty-server-in-wdt","text":"Previously in the lab, you used the command line to create and start a Liberty server. Developers often work in an integrated development environments such as Eclipse, VS Code, or Intelij, to name a few, to enhance their productivity. IBM WebSphere Developer Tools for Eclipse enhances developer productivity by providing a lightweight set of tools that you can use to develop, assemble, and deploy Java EE, OSGi and mobile applications to WebSphere Application Server traditional and Liberty. In this section, you will use the WebSphere Developer Tools with the Eclipse IDE to work with Liberty. First, create a Liberty server using the integrated tools. At the bottom of the Eclipse workbench, open the Servers view by clicking the Servers tab. Right-click within the windows of the Servers view and select New > Server Under the server type list, expand IBM and select the Liberty Server type. Use the default eclipse server name as supplied ( localhost ). a. Click Next . This creates the liberty server object in eclipse, and the Liberty Runtime Environment page is displayed. Now eclipse needs to associate the \u2018 localhost\u2019 server with a server configuration in a Liberty runtime (the runtime that you installed previously in the lab). a. In the Path field under the \u201c Choose an existing installation \u201d section, type or browse for the directory where you installed the Liberty runtime environment shown below: /home/ibmdemo/Student/WLP_21.0.0.3/wlp b. Click Next . to continue To create the server configuration in the runtime, replace in the Server name field with labServer . Then click Finish . The new server will appear in the Servers view. You can expand the server to show a quick view of the configuration. Open the server configuration editor by double-clicking on Server Configuration (server.xml): The Server configuration view is displayed. The default view is \u201c Design \u201d mode, which provides an intuitive server configuration editor UI. a. Click on the \u201c Design \u201d view tab if it is not already selected. b. You can click on the Source\u201d view tab to edit the server.xml source directly.","title":"Create Liberty Server in WDT"},{"location":"lab-guides/md/1154/#cleanup","text":"Close the server.xml editor Exi t Eclipse by selecting using the File > Exit from the Eclipse main menu. Close any open Terminal windows === END OF LAB ===","title":"Cleanup"},{"location":"lab-guides/md/1154/Liberty_getting_started_v1.6/","text":"Liberty: Getting Started Setup the Liberty environment In the initial setup of Liberty, you will install Liberty using the Archive method. Then, you will create your first Liberty server, start it, and deploy a simple Java EE application to the server to test the Liberty server runtime. You will use am Ubuntu Linux VM that has been prepared for the Liberty labs and includes the following: The Liberty package has been downloaded to /home/ibmdemo/Downloads directory The IBM JDK has been downloaded to /home/ibmdemo/Downloads directory The required Operating System libraries have been installed. Information: The Liberty image contains WebSphere Developer Tools for Eclipse. The VMWare image contains the \u201cwdt\u201d folder that contains the WebSphere Developer Tools that is used for the lab. TIP: To reduce typing or copy & past of commands, you can find the related code snippets or commands in the VMWare image in the directory: /home/ibmdemo/Student/lab-files/CodeSnippets/Bootcamp_Lab1_setup_CodeSnippets.txt Accessing the lab environment If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment. Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 The lab environment contains one (1) Linux VM, named Workstation . The Ubuntu Linux Workstation VM has the following software installed for the lab: Application Project with Liberty Maven 3.6.0 Access the lab environment from your web browser. A Published Service is configured to provide access to the Workstation VM through the noVNC interface for the lab environment. a. When the environment is provisioned, right-mouse click on the Published Service link and open the URL in a new private or incognito browser window, as described below: If using Google Chrome browser, select \"Open link in incognito window\" from the context menu. If using Firefox browser, select \"Open link in new private window\" from the context menu. b. Click on the \"vnc.html\" link to open the lab environment through the noVNC interface. c. Click the Connect button d. Enter the password as: passw0rd . Then click the Send Credentials button to access the lab environment. Note: That is a numeric zero in passw0rd Login with ibmdemo ID. a. Click on the \u201c ibmdemo \u201d icon on the Ubuntu screen. b. When prompted for the password for \u201c ibmdemo \u201d user, enter \u201c passw0rd \u201d as the password: Password: passw0rd (lowercase with a zero instead of the o) Once you access the Student VM through the published service, you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) Tips for working the in lab environment You can use your Browsers zoom in and zoom out options to resize the virtual desktop to fit your screen. The examples below are using Firefox and Chrome browsers. Firefox example: Chrome example: You can copy / paste text from the lab guide into the lab environment using the clipboard in the noVNC viewer. a. Copy the text from the lab guide that you want to paste into the lab environment b. Click the Clipboard icon and paste the text into the noVNC clipboard c. Paste the tect into the VM, such as to a terminal window, browser window, etc. d. Click on the clipboard icon agian to close the clipboard NOTE: Sometimes pasting into a Terminal window in the VM does not work consistently. In this case you might try again, or paste the text into a Text Editor in the VM, and then paste it into the Terminal window in the VM. An alternative to using the noVNC Copy / Paste option, you may considr openeing the lab guide in a web browser inside of the VM. Using this method, you can easily copy / paste text from the lab guide wihout having to use the noVNC clipboard. Important: Click CANCEL \u2026. If, at any time during the lab, you get a pop-up asking to install updated software onto the Ubuntu VM. The one we experience is an update available for VS Code. CLICK CANCEL! Extract the extended Liberty vPoT image Locate the script on the desktop and double-click on it to run in terminal Wait until the image has been extracted. Once completed, press Enter to continue: The Liberty vPOT contents are extracted to /home/ibmdemo/Student/WLP_21.0.0.3 , and is referred as { LAB_HOME } throughout the labs. Information: If you need to reset the image at some point of time, make sure that all programs are stopped and run the script again. This will clean-up the directory /home/ibmdemo/Student/WLP_* and extract the image again. Install WebSphere Liberty For your convenience, Liberty has already been installed into the directory /home/ibmdemo/Student/WLP_21.0.0.3/wlp . However, in this section, you will install a new instance of Liberty to learn how easy and fast it is to install Liberty, using the archive installation method. Liberty can be installed via IBM Installation Manager, but the more convenient way is to use an Archive Install. The related packages can be downloaded from Passport Advantage, but the most recent versions are only available on the IBM Support pages. There are separate packages available for the Liberty edition and for the IBM Java SDK. Liberty for Developers downloads and documentation is located here: https://www.ibm.com/support/pages/node/6250961#asset/ In this section we will use these two packages, which are Java JDK v8 and Liberty ND edition. IBM Java SDK for WebSphere: ibm-java-sdk-8.0-6.26-linux-x86_64.tgz IBM WebSphere Liberty ND Archive Install: wlp-nd-all-21.0.0.3.jar To install Liberty using the Archive method, perform the following steps: Open a Terminal window by clicking on the appropriate icon: Navigate to the \u201cStudent\u201d directory: cd /home/ibmdemo/Student Create a temporary directory and navigate to that directory mkdir temp cd temp Extract the IBM Java SDK to the ~/Student/temp/directory. This will extract the JDK to the directory ibm-java-x86_64-80 tar -zxvf '/home/ibmdemo/Downloads/ibm-java-sdk-8.0-6.26-linux-x86_64.tgz' Extract the WebSphere Liberty ND package to the ~/Student/temp directory. The Liberty Archive is a Java \u201cjar\u201d file. To extract the archive, use the java -jar command. ibm-java-x86_64-80/bin/java -jar '/home/ibmdemo/Downloads/wlp-nd-all-21.0.0.3.jar' --acceptLicense . The --acceptLicense option is included to automatically accept the license, without having additional prompts. The dot at the end of the command means to extract the archive to the current directory. The Liberty archive is extracted, and Liberty is now installed in the wlp subdirectory. List the two directories that were created via the extraction of the Java JDK and Liberty ND ls Liberty is now installed the wlp directory. IBK JDK is now installed in the ibm-java-x86_64-80 directory Set the JAVA_HOME path to tell Liberty to use the Java SDK that you just extracted export JAVA_HOME=~/Student/temp/ibm-java-x86_64-80/jre/ Display the product information for Liberty a. Display the Liberty product edition and version wlp/bin/productInfo version The output should indicate the Liberty Edition is ND , and the product version should match the Liberty Archive that is used in the lab. Liberty fixpacks are delivered on a four-week continues delivery interval. The Version indicates the YEAR and MONTH of the Liberty fixpack installed. 21.0.0.3 is the 3 rd fixpack in 2021 b. Display the list of installed features wlp/bin/productInfo featureInfo The output should look similar to the illustration below, which includes all of the Liberty ND features. The screen shot is only a partial list of installed features of Liberty ND. c. You have just installed Liberty in the temp directory using the archive install method . It\u2019s that simple to install Liberty. Creating and working with a new Liberty server is equally simple. You will do that in the next sections of the lab. There are more than 200 features installed via the Liberty ND package. By default, you would start with a much more light-weight package. If you are interested to see which features belong to which Liberty Edition, please look here: https://www.ibm.com/docs/en/was-liberty/nd?topic=management-liberty-features Information: As mentioned before, Liberty has already been installed into the directory /home/ibmdemo/Student/WLP_21.0.0.3*/wlp. We will NOT use the Liberty installed in the temp directory in the next sections of the lab. You can ignore the temp directory. Close the Terminal window. INFORMATION ONLY \u2013 Open Liberty How does Open Liberty fit into the Liberty family of editions? Open Liberty is the lightweight open source server runtime that can be ideal for building Java microservices and cloud-native apps. Open Liberty provides a proven open source foundation for the WebSphere Liberty portfolio. All of the editions of Liberty are built on top of the same code base from Open Liberty. Liberty Core offers supported Web Profile Liberty Base offers supported Full Profile Liberty ND offers supported Full Profile and clustering / workload management capabilities All 3 commercial editions provide additional capabilities: Programming model extensions Production quality of service extensions Security extensions And IBM\u2019s full support INFORMATION ONLY \u2013 Open Liberty Downloads, Docker, and Devops How do you get Open Liberty? Open Liberty can be obtained via zip file downloads, or through Maven, Gradle, and Docker. Visit https://openliberty.io/downloads/ to find the latest Open Liberty releases and builds. Open Liberty Zip File Download packages are available here: https://openliberty.io/downloads/#runtime_releases Below are examples of getting Open Liberty using Maven, Gradle, and Docker. Create test server Open a Terminal window by clicking on the appropriate icon: Navigate to the Liberty runtime installation directory {LAB_HOME}/wlp/bin cd /home/ibmdemo/Student/WLP_21.0.0.3/wlp Run the following command to create a new server named \u201c myServer \u201d bin/server create myServer The server command supports actions for starting, stopping, creating, packaging, and dumping a Liberty server. The server create command creates a new Liberty server with the name specified. Additional detail on the server command can be found here: https://www.ibm.com/docs/en/was-liberty/base?topic=line-server-command-options The new server is created in the following directory: /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer The server.xml file is the complete default server configuration. Open an editor to view the server configuration file. Ensure you are in the correct directory before opening the server.xml file. cd /home/ibmdemo/Student/WLP_21.0.0.3/wlp gedit usr/servers/myServer/server.xml The server.xml defines a minimal configuration needed to start a Liberty server. In this example, it includes only the JSP feature, and defines the HTTP and HTTPS endpoints that the server is listening for incoming HTTP(S) requests. Close the gedit editor. Start the server instance using the server start command: bin/server start myServer This runs the server in the background and the output is written to files in the {LAB_HOME}/wlp/usr/servers/myServer/logs directory. Alternatively, to start the server in the foreground (so the console messages are seen in the command window) you can use the command \u201c bin/server run myServer \u201d View the Liberty server\u2019s messages.log file to see the server startup messages cat usr/servers/myServer/logs/messages.log The server is started when the message \u201cT he myServer server is ready to run a smarter planet\u201d is displayed in the messages.log file. Stop the server with the server stop command: bin/server stop myServer Having verified the Liberty installation, you can delete the test server \u201c myServer \u201d simply be removing its directory. Delete the server by deleting the {LAB_HOME}/wlp/usr/servers/myServer directory. rm -rf usr/servers/myServer You now have a Liberty runtime environment that is ready to create servers to run applications. Short recap of what you just did In the previous step, you deleted a Liberty server configuration. You did NOT delete the Liberty installation and its binaries. This is an important concept of Liberty. The Liberty Runtime binaries are separate from the Liberty Server configurations. Liberty was installed in \\~/Student/WLP_21.0.0.3 /wlp By default, the Liberty Server configurations are in ~/Student/WLP_21.0.0.3 /wlp/usr/ The Server configuration directory can be located anywhere, including outside of the default location of /wlp/usr. The Server configuration location can be over-ridden using the Liberty bult-in variable \u201c${wlp.user.dir}\u201d. In fact, this concept is instrumental in Liberty providing zero migration for unchanged apps while keeping current with Liberty Fixpacks, as illustrated below. Just install a new Liberty Fixpack (Archive install) Update the WLP_USER_DIR variable to point to your existing server configurations location. Test the WebSphere Developer Tools (WDT) You can manage Liberty from the command line and edit the server configuration files using your favorite editor. However, the WebSphere Developer Tools (WDT) provide a great configuration editor, server controls and application publishing, as well as many other time-saving utilities. In this section, you will explore using WDT with Liberty. Normally, you would first download and install Eclipse, followed by the installation of WDT Eclipse plugin. For this lab, we have bundled everything into a single zip file. The directory {LAB_HOME}/wdt contains a prebuilt and expanded WDT. Information: Upon first startup, it may take Eclipse up to a minute to start as it initializes. Launch Eclipse a. Use the File Explorer to navigate to the directory: Home > Student > WLP_21.0.0.3 > wdt > eclipse b. Double-click on the eclipse executable to start Eclipse. c. When the Eclipse launcher prompts you to select a workspace, enter the following directory. Then click the Launch button. /home/ibmdemo/Student/WLP_21.0.0.3/workspace d. Close the welcome page by clicking on the \u2018X \u2019 icon. Create Liberty Server in WDT Previously in the lab, you used the command line to create and start a Liberty server. Developers often work in an integrated development environments such as Eclipse, VS Code, or Intelij, to name a few, to enhance their productivity. IBM WebSphere Developer Tools for Eclipse enhances developer productivity by providing a lightweight set of tools that you can use to develop, assemble, and deploy Java EE, OSGi and mobile applications to WebSphere Application Server traditional and Liberty. In this section, you will use the WebSphere Developer Tools with the Eclipse IDE to work with Liberty. First, create a Liberty server using the integrated tools. At the bottom of the Eclipse workbench, open the Servers view by clicking the Servers tab. Right-click within the windows of the Servers view and select New > Server Under the server type list, expand IBM and select the Liberty Server type. Use the default eclipse server name as supplied ( localhost ). a. Click Next . This creates the liberty server object in eclipse, and the Liberty Runtime Environment page is displayed. Now eclipse needs to associate the \u2018 localhost\u2019 server with a server configuration in a Liberty runtime (the runtime that you installed previously in the lab). a. In the Path field under the \u201c Choose an existing installation \u201d section, type or browse for the directory where you installed the Liberty runtime environment shown below: /home/ibmdemo/Student/WLP_21.0.0.3/wlp b. Click Next . to continue To create the server configuration in the runtime, replace in the Server name field with labServer . Then click Finish . The new server will appear in the Servers view. You can expand the server to show a quick view of the configuration. Open the server configuration editor by double-clicking on Server Configuration (server.xml): The Server configuration view is displayed. The default view is \u201c Design \u201d mode, which provides an intuitive server configuration editor UI. a. Click on the \u201c Design \u201d view tab if it is not already selected. b. You can click on the Source\u201d view tab to edit the server.xml source directly. Cleanup Close the server.xml editor Exi t Eclipse by selecting using the File > Exit from the Eclipse main menu. Close any open Terminal windows === END OF LAB ===","title":"Liberty: Getting Started"},{"location":"lab-guides/md/1154/Liberty_getting_started_v1.6/#liberty-getting-started","text":"","title":"Liberty: Getting Started"},{"location":"lab-guides/md/1154/Liberty_getting_started_v1.6/#setup-the-liberty-environment","text":"In the initial setup of Liberty, you will install Liberty using the Archive method. Then, you will create your first Liberty server, start it, and deploy a simple Java EE application to the server to test the Liberty server runtime. You will use am Ubuntu Linux VM that has been prepared for the Liberty labs and includes the following: The Liberty package has been downloaded to /home/ibmdemo/Downloads directory The IBM JDK has been downloaded to /home/ibmdemo/Downloads directory The required Operating System libraries have been installed. Information: The Liberty image contains WebSphere Developer Tools for Eclipse. The VMWare image contains the \u201cwdt\u201d folder that contains the WebSphere Developer Tools that is used for the lab. TIP: To reduce typing or copy & past of commands, you can find the related code snippets or commands in the VMWare image in the directory: /home/ibmdemo/Student/lab-files/CodeSnippets/Bootcamp_Lab1_setup_CodeSnippets.txt","title":"Setup the Liberty environment"},{"location":"lab-guides/md/1154/Liberty_getting_started_v1.6/#accessing-the-lab-environment","text":"If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment. Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 The lab environment contains one (1) Linux VM, named Workstation . The Ubuntu Linux Workstation VM has the following software installed for the lab: Application Project with Liberty Maven 3.6.0 Access the lab environment from your web browser. A Published Service is configured to provide access to the Workstation VM through the noVNC interface for the lab environment. a. When the environment is provisioned, right-mouse click on the Published Service link and open the URL in a new private or incognito browser window, as described below: If using Google Chrome browser, select \"Open link in incognito window\" from the context menu. If using Firefox browser, select \"Open link in new private window\" from the context menu. b. Click on the \"vnc.html\" link to open the lab environment through the noVNC interface. c. Click the Connect button d. Enter the password as: passw0rd . Then click the Send Credentials button to access the lab environment. Note: That is a numeric zero in passw0rd Login with ibmdemo ID. a. Click on the \u201c ibmdemo \u201d icon on the Ubuntu screen. b. When prompted for the password for \u201c ibmdemo \u201d user, enter \u201c passw0rd \u201d as the password: Password: passw0rd (lowercase with a zero instead of the o) Once you access the Student VM through the published service, you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.)","title":"Accessing the lab environment"},{"location":"lab-guides/md/1154/Liberty_getting_started_v1.6/#tips-for-working-the-in-lab-environment","text":"You can use your Browsers zoom in and zoom out options to resize the virtual desktop to fit your screen. The examples below are using Firefox and Chrome browsers. Firefox example: Chrome example: You can copy / paste text from the lab guide into the lab environment using the clipboard in the noVNC viewer. a. Copy the text from the lab guide that you want to paste into the lab environment b. Click the Clipboard icon and paste the text into the noVNC clipboard c. Paste the tect into the VM, such as to a terminal window, browser window, etc. d. Click on the clipboard icon agian to close the clipboard NOTE: Sometimes pasting into a Terminal window in the VM does not work consistently. In this case you might try again, or paste the text into a Text Editor in the VM, and then paste it into the Terminal window in the VM. An alternative to using the noVNC Copy / Paste option, you may considr openeing the lab guide in a web browser inside of the VM. Using this method, you can easily copy / paste text from the lab guide wihout having to use the noVNC clipboard. Important: Click CANCEL \u2026. If, at any time during the lab, you get a pop-up asking to install updated software onto the Ubuntu VM. The one we experience is an update available for VS Code. CLICK CANCEL!","title":"Tips for working the in lab environment"},{"location":"lab-guides/md/1154/Liberty_getting_started_v1.6/#extract-the-extended-liberty-vpot-image","text":"Locate the script on the desktop and double-click on it to run in terminal Wait until the image has been extracted. Once completed, press Enter to continue: The Liberty vPOT contents are extracted to /home/ibmdemo/Student/WLP_21.0.0.3 , and is referred as { LAB_HOME } throughout the labs. Information: If you need to reset the image at some point of time, make sure that all programs are stopped and run the script again. This will clean-up the directory /home/ibmdemo/Student/WLP_* and extract the image again.","title":"Extract the extended Liberty vPoT image"},{"location":"lab-guides/md/1154/Liberty_getting_started_v1.6/#install-websphere-liberty","text":"For your convenience, Liberty has already been installed into the directory /home/ibmdemo/Student/WLP_21.0.0.3/wlp . However, in this section, you will install a new instance of Liberty to learn how easy and fast it is to install Liberty, using the archive installation method. Liberty can be installed via IBM Installation Manager, but the more convenient way is to use an Archive Install. The related packages can be downloaded from Passport Advantage, but the most recent versions are only available on the IBM Support pages. There are separate packages available for the Liberty edition and for the IBM Java SDK. Liberty for Developers downloads and documentation is located here: https://www.ibm.com/support/pages/node/6250961#asset/ In this section we will use these two packages, which are Java JDK v8 and Liberty ND edition. IBM Java SDK for WebSphere: ibm-java-sdk-8.0-6.26-linux-x86_64.tgz IBM WebSphere Liberty ND Archive Install: wlp-nd-all-21.0.0.3.jar To install Liberty using the Archive method, perform the following steps: Open a Terminal window by clicking on the appropriate icon: Navigate to the \u201cStudent\u201d directory: cd /home/ibmdemo/Student Create a temporary directory and navigate to that directory mkdir temp cd temp Extract the IBM Java SDK to the ~/Student/temp/directory. This will extract the JDK to the directory ibm-java-x86_64-80 tar -zxvf '/home/ibmdemo/Downloads/ibm-java-sdk-8.0-6.26-linux-x86_64.tgz' Extract the WebSphere Liberty ND package to the ~/Student/temp directory. The Liberty Archive is a Java \u201cjar\u201d file. To extract the archive, use the java -jar command. ibm-java-x86_64-80/bin/java -jar '/home/ibmdemo/Downloads/wlp-nd-all-21.0.0.3.jar' --acceptLicense . The --acceptLicense option is included to automatically accept the license, without having additional prompts. The dot at the end of the command means to extract the archive to the current directory. The Liberty archive is extracted, and Liberty is now installed in the wlp subdirectory. List the two directories that were created via the extraction of the Java JDK and Liberty ND ls Liberty is now installed the wlp directory. IBK JDK is now installed in the ibm-java-x86_64-80 directory Set the JAVA_HOME path to tell Liberty to use the Java SDK that you just extracted export JAVA_HOME=~/Student/temp/ibm-java-x86_64-80/jre/ Display the product information for Liberty a. Display the Liberty product edition and version wlp/bin/productInfo version The output should indicate the Liberty Edition is ND , and the product version should match the Liberty Archive that is used in the lab. Liberty fixpacks are delivered on a four-week continues delivery interval. The Version indicates the YEAR and MONTH of the Liberty fixpack installed. 21.0.0.3 is the 3 rd fixpack in 2021 b. Display the list of installed features wlp/bin/productInfo featureInfo The output should look similar to the illustration below, which includes all of the Liberty ND features. The screen shot is only a partial list of installed features of Liberty ND. c. You have just installed Liberty in the temp directory using the archive install method . It\u2019s that simple to install Liberty. Creating and working with a new Liberty server is equally simple. You will do that in the next sections of the lab. There are more than 200 features installed via the Liberty ND package. By default, you would start with a much more light-weight package. If you are interested to see which features belong to which Liberty Edition, please look here: https://www.ibm.com/docs/en/was-liberty/nd?topic=management-liberty-features Information: As mentioned before, Liberty has already been installed into the directory /home/ibmdemo/Student/WLP_21.0.0.3*/wlp. We will NOT use the Liberty installed in the temp directory in the next sections of the lab. You can ignore the temp directory. Close the Terminal window.","title":"Install WebSphere Liberty"},{"location":"lab-guides/md/1154/Liberty_getting_started_v1.6/#information-only-open-liberty","text":"How does Open Liberty fit into the Liberty family of editions? Open Liberty is the lightweight open source server runtime that can be ideal for building Java microservices and cloud-native apps. Open Liberty provides a proven open source foundation for the WebSphere Liberty portfolio. All of the editions of Liberty are built on top of the same code base from Open Liberty. Liberty Core offers supported Web Profile Liberty Base offers supported Full Profile Liberty ND offers supported Full Profile and clustering / workload management capabilities All 3 commercial editions provide additional capabilities: Programming model extensions Production quality of service extensions Security extensions And IBM\u2019s full support","title":"INFORMATION ONLY \u2013 Open Liberty"},{"location":"lab-guides/md/1154/Liberty_getting_started_v1.6/#information-only-open-liberty-downloads-docker-and-devops","text":"How do you get Open Liberty? Open Liberty can be obtained via zip file downloads, or through Maven, Gradle, and Docker. Visit https://openliberty.io/downloads/ to find the latest Open Liberty releases and builds. Open Liberty Zip File Download packages are available here: https://openliberty.io/downloads/#runtime_releases Below are examples of getting Open Liberty using Maven, Gradle, and Docker.","title":"INFORMATION ONLY \u2013 Open Liberty Downloads, Docker, and Devops"},{"location":"lab-guides/md/1154/Liberty_getting_started_v1.6/#create-test-server","text":"Open a Terminal window by clicking on the appropriate icon: Navigate to the Liberty runtime installation directory {LAB_HOME}/wlp/bin cd /home/ibmdemo/Student/WLP_21.0.0.3/wlp Run the following command to create a new server named \u201c myServer \u201d bin/server create myServer The server command supports actions for starting, stopping, creating, packaging, and dumping a Liberty server. The server create command creates a new Liberty server with the name specified. Additional detail on the server command can be found here: https://www.ibm.com/docs/en/was-liberty/base?topic=line-server-command-options The new server is created in the following directory: /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer The server.xml file is the complete default server configuration. Open an editor to view the server configuration file. Ensure you are in the correct directory before opening the server.xml file. cd /home/ibmdemo/Student/WLP_21.0.0.3/wlp gedit usr/servers/myServer/server.xml The server.xml defines a minimal configuration needed to start a Liberty server. In this example, it includes only the JSP feature, and defines the HTTP and HTTPS endpoints that the server is listening for incoming HTTP(S) requests. Close the gedit editor. Start the server instance using the server start command: bin/server start myServer This runs the server in the background and the output is written to files in the {LAB_HOME}/wlp/usr/servers/myServer/logs directory. Alternatively, to start the server in the foreground (so the console messages are seen in the command window) you can use the command \u201c bin/server run myServer \u201d View the Liberty server\u2019s messages.log file to see the server startup messages cat usr/servers/myServer/logs/messages.log The server is started when the message \u201cT he myServer server is ready to run a smarter planet\u201d is displayed in the messages.log file. Stop the server with the server stop command: bin/server stop myServer Having verified the Liberty installation, you can delete the test server \u201c myServer \u201d simply be removing its directory. Delete the server by deleting the {LAB_HOME}/wlp/usr/servers/myServer directory. rm -rf usr/servers/myServer You now have a Liberty runtime environment that is ready to create servers to run applications.","title":"Create test server"},{"location":"lab-guides/md/1154/Liberty_getting_started_v1.6/#short-recap-of-what-you-just-did","text":"In the previous step, you deleted a Liberty server configuration. You did NOT delete the Liberty installation and its binaries. This is an important concept of Liberty. The Liberty Runtime binaries are separate from the Liberty Server configurations. Liberty was installed in \\~/Student/WLP_21.0.0.3 /wlp By default, the Liberty Server configurations are in ~/Student/WLP_21.0.0.3 /wlp/usr/ The Server configuration directory can be located anywhere, including outside of the default location of /wlp/usr. The Server configuration location can be over-ridden using the Liberty bult-in variable \u201c${wlp.user.dir}\u201d. In fact, this concept is instrumental in Liberty providing zero migration for unchanged apps while keeping current with Liberty Fixpacks, as illustrated below. Just install a new Liberty Fixpack (Archive install) Update the WLP_USER_DIR variable to point to your existing server configurations location.","title":"Short recap of what you just did"},{"location":"lab-guides/md/1154/Liberty_getting_started_v1.6/#test-the-websphere-developer-tools-wdt","text":"You can manage Liberty from the command line and edit the server configuration files using your favorite editor. However, the WebSphere Developer Tools (WDT) provide a great configuration editor, server controls and application publishing, as well as many other time-saving utilities. In this section, you will explore using WDT with Liberty. Normally, you would first download and install Eclipse, followed by the installation of WDT Eclipse plugin. For this lab, we have bundled everything into a single zip file. The directory {LAB_HOME}/wdt contains a prebuilt and expanded WDT. Information: Upon first startup, it may take Eclipse up to a minute to start as it initializes. Launch Eclipse a. Use the File Explorer to navigate to the directory: Home > Student > WLP_21.0.0.3 > wdt > eclipse b. Double-click on the eclipse executable to start Eclipse. c. When the Eclipse launcher prompts you to select a workspace, enter the following directory. Then click the Launch button. /home/ibmdemo/Student/WLP_21.0.0.3/workspace d. Close the welcome page by clicking on the \u2018X \u2019 icon.","title":"Test the WebSphere Developer Tools (WDT)"},{"location":"lab-guides/md/1154/Liberty_getting_started_v1.6/#create-liberty-server-in-wdt","text":"Previously in the lab, you used the command line to create and start a Liberty server. Developers often work in an integrated development environments such as Eclipse, VS Code, or Intelij, to name a few, to enhance their productivity. IBM WebSphere Developer Tools for Eclipse enhances developer productivity by providing a lightweight set of tools that you can use to develop, assemble, and deploy Java EE, OSGi and mobile applications to WebSphere Application Server traditional and Liberty. In this section, you will use the WebSphere Developer Tools with the Eclipse IDE to work with Liberty. First, create a Liberty server using the integrated tools. At the bottom of the Eclipse workbench, open the Servers view by clicking the Servers tab. Right-click within the windows of the Servers view and select New > Server Under the server type list, expand IBM and select the Liberty Server type. Use the default eclipse server name as supplied ( localhost ). a. Click Next . This creates the liberty server object in eclipse, and the Liberty Runtime Environment page is displayed. Now eclipse needs to associate the \u2018 localhost\u2019 server with a server configuration in a Liberty runtime (the runtime that you installed previously in the lab). a. In the Path field under the \u201c Choose an existing installation \u201d section, type or browse for the directory where you installed the Liberty runtime environment shown below: /home/ibmdemo/Student/WLP_21.0.0.3/wlp b. Click Next . to continue To create the server configuration in the runtime, replace in the Server name field with labServer . Then click Finish . The new server will appear in the Servers view. You can expand the server to show a quick view of the configuration. Open the server configuration editor by double-clicking on Server Configuration (server.xml): The Server configuration view is displayed. The default view is \u201c Design \u201d mode, which provides an intuitive server configuration editor UI. a. Click on the \u201c Design \u201d view tab if it is not already selected. b. You can click on the Source\u201d view tab to edit the server.xml source directly.","title":"Create Liberty Server in WDT"},{"location":"lab-guides/md/1154/Liberty_getting_started_v1.6/#cleanup","text":"Close the server.xml editor Exi t Eclipse by selecting using the File > Exit from the Eclipse main menu. Close any open Terminal windows === END OF LAB ===","title":"Cleanup"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/","text":"Discover Liberty In this lab, you will explore the Liberty server configuration, installing applications onto Liberty, updating the server configurations, and updating an application. As you explore Liberty, you will first use the WebSphere Developer Tools for Eclipse. Then, you will explore Liberty using the command line. Finally, you will be introduced to mode advanced configurations using jvm.options, bootstrap.properties, Liberty built-in variables, and logging and tracing. TIP: Liberty is pre-installed on the VM environment provided. {LAB_HOME} refers to: /home/ibmdemo/Student/WLP_21.0.0.3 TIP: To reduce typing or copy & past of commands, you can find the related code snippets or commands in the VMWare image in the directory: /home/ibmdemo/Student/lab-files/CodeSnippets/Bootcamp_Lab2_discover_CodeSnippets.txt Accessing the lab environment If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment. Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 The lab environment contains one (1) Linux VM, named Workstation . The Ubuntu Linux Workstation VM has the following software installed for the lab: Application Project with Liberty Maven 3.6.0 Access the lab environment from your web browser. A Published Service is configured to provide access to the Workstation VM through the noVNC interface for the lab environment. a. When the environment is provisioned, right-mouse click on the Published Service link and open the URL in a new private or incognito browser window, as described below: If using Google Chrome browser, select \"Open link in incognito window\" from the context menu. If using Firefox browser, select \"Open link in new private window\" from the context menu. b. Click on the \"vnc.html\" link to open the lab environment through the noVNC interface. c. Click the Connect button d. Enter the password as: passw0rd . Then click the Send Credentials button to access the lab environment. Note: That is a numeric zero in passw0rd Login with ibmdemo ID. a. Click on the \u201c ibmdemo \u201d icon on the Ubuntu screen. b. When prompted for the password for \u201c ibmdemo \u201d user, enter \u201c passw0rd \u201d as the password: Password: passw0rd (lowercase with a zero instead of the o) Once you access the Student VM through the published service, you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.) Tips for working the in lab environment You can use your Browsers zoom in and zoom out options to resize the virtual desktop to fit your screen. The examples below are using Firefox and Chrome browsers. Firefox example: Chrome example: You can copy / paste text from the lab guide into the lab environment using the clipboard in the noVNC viewer. a. Copy the text from the lab guide that you want to paste into the lab environment b. Click the Clipboard icon and paste the text into the noVNC clipboard c. Paste the tect into the VM, such as to a terminal window, browser window, etc. d. Click on the clipboard icon agian to close the clipboard NOTE: Sometimes pasting into a Terminal window in the VM does not work consistently. In this case you might try again, or paste the text into a Text Editor in the VM, and then paste it into the Terminal window in the VM. An alternative to using the noVNC Copy / Paste option, you may considr openeing the lab guide in a web browser inside of the VM. Using this method, you can easily copy / paste text from the lab guide wihout having to use the noVNC clipboard. Important: Click CANCEL \u2026. If, at any time during the lab, you get a pop-up asking to install updated software onto the Ubuntu VM. The one we experience is an update available for VS Code. CLICK CANCEL! Explore Liberty via WDT Note : proceed directly to section 3 if you only want to use the command line. Setup Liberty for the lab Copy the Liberty server configuration, used in this lab, to the Liberty usr/servers directory. a. Open a new Terminal window b. Run the script to setup the Liberty server configuration used in this lab. /home/ibmdemo/Student/labs/lab2/lab2-setup.sh Ensure eclipse is started and you are in the correct workspace If Eclipse is not already started, start it now a. Use the File Explorer to navigate to the directory Home > Student > WLP_21.0.0.3 > wdt > eclipse b. Double-click on the eclipse executable to start Eclipse. c. When the Eclipse launcher prompts you to select a workspace, enter the following directory. Then click the Launch button. /home/ibmdemo/Student/labs/lab2/workspace Exploring the Liberty Server Start the server in eclipse. a. From the Servers view, select your labServer instance and click the Start the server button ( ). Alternatively, you can also right-click the server name and choose the Start option from the context menu. b. Switch to the Console view if necessary. Look at the messages to see how fast your server starts! Explore using the WDT to make changes to the lab server configuration Open the Lab Server configuration using the WDT server configuration editor a. In the Servers view, double-click on your labServer server to open the server Overview . b. Expand the Publishing section and notice that the server is set to automatically detect and publish changes. Keep this default setting. In this exercise, you will be deploying a simple servlet application, so try enabling the servlet feature on this server. a. On the Overview page, locate the Liberty Server Settings section b. Click the Open server configuration link to open the server.xml editor. Note: To better see the content in Eclipse, you may need to resize the Eclipse views, or increase the size of the Eclipse desktop app c. If the Source view of the server.xml file is displayed, switch to the Design view in the server configuration editor, by clicking on the \"Design\u201d tab in the editor pane d. Start by providing a meaningful description for your server, such as \u201cLiberty server for labs\u201d. e. To add a feature, such as servlet-4.0, go back in the Configuration Structure area, and exand it, if necessary, and note the Feature Manager configuration entry. In this lab, the Feature Manager has already been added to the configuration f. Review the Feature Manager settings by clicking on the \u201c Feature Manager \u201d to view the list of features already configured. Notice that the jsp-2.3 and the loalConnector-1.0 features have already been added to the server configuration. g. Click the Add button to add a new feature \u201cservlet-4.0\u201d h. In the pop-up, type servlet to filter to servlet related features. Then select servlet-4.0. Click OK i. In the server.xml editor, switch to the Source tab at the bottom to see the XML source for this configuration file. You will see that a new featureManager element has been updated to contain the servlet-4.0 feature. j. Now you have a server that is configured to use the servlet-4.0 feature. k. Click the Save button ( ) to save your changes (or use CTRL+S) TIP: The Sample1 application is a Java Enterprise application that includes a simple Java Servlet class . For the Liberty Server to run the Sample1 application, the servlet feature must be configured in the server.xml file. Switch to the Console view, located at the bottom of the workbench and review the latest messages. These messages are showing that your Liberty server automatically detected the configuration update, processed the feature that you enabled, and is now listening for incoming requests. You will notice that the server configuration was automatically updated, and the feature update was completed very quickly. In this example, it was less than one second. Close the server.xml in the editor pane. Close the Liberty Server Overview page in Eclipse Now you are ready to start working with a sample application that uses the Servlet feature. Deploying a sample application to Liberty Import a sample application into Eclipse A simple servlet WAR file has been provided for this exercise; import it into your workbench. a. In Eclipse, go to File > Import . b. Expand the Web section, then select WAR file . Click Next . c. In the WAR file field, select Browse . Navigate to: /home/ibmdemo/Student/WLP_21.0.0.3/labs/gettingStarted/1_discover_20190416/Sample1.war d. Click Open . e. Ensure the Target runtime is set to Liberty Runtime f. Unselect \u201cAdd project to an EAR\u201d g. Click Finish h. If prompted to open the web perspective, click Open Perspective . Now you have a Sample1 web project in your workspace. Expand it in the Enterprise Explorer view to see the different components of the project. Start the sample application. a. In the Enterprise Explorer pane, navigate to the SimpleServlet.java as shown below. Sample1 > src/main/java > wasdev.sample > SimpleServlet.java b. Right-click on SimpleServlet.java . c. From the context menu, select Run As > Run on Server . d. In the Run On Server dialog: Verify that Choose an existing server is chosen. Under localhost , select the Liberty Server that you defined earlier. The server should be listed in Started state. Click Finish . e. After a moment, your application will be installed and started. See the Console pane for the corresponding messages. In the main panel of the workbench, a browser opened, pointing to http://localhost:9080/Sample1/SimpleServlet . a. If you receive a 404 the first time, try to refresh the browser once the application is completely deployed and started. b. At this point, you should see the rendered HTML content generated by the simple servlet. In this section of the lab, you explored how to use the WebSphere Developer Tools (WDT) to start a Liberty Server, modify the server configuration, import a simple Java EE WAR module, and deploy the application to the server from with the development environment. In the next section, you will explore using WDT to make changes to the application code, and have it hot deployed to the Liberty server, in your development environment, to illustrate a simple, yet robust development experience for Java developers using WDT and Liberty. Modify the application to see how changes are automatically picked up in the running server. Open the servlet java source code. a. In the Enterprise Explorer panel, expand the Sample1 project, then go to: Sample1 > src/main/java > wasdev.sample b. Double-click the SimpleServlet .java source file to open the Java editor for the servlet. c. This is the SimpleServlet.java source code Examine the doGet() method in the SimpleServlet.java code a. This is a very simple servlet with a doGet() method that sends out an HTML snippet string as a response. Your doGet() method will look similar to this (some of the HTML tags might be a little different \u2013 that is ok). Modify the application and publish the change. a. In the doGet() method, Locate the \\<h1> heading element of the HTML string, and notice that it contains a font tag to set the color to \u201c green \u201d. b. Modify this string by changing the text green to purple , so your font tag will look read \\<font color=purple> . html response.getWriter().print( \"<html><h1><font color=purple>Simple Servlet ran successfully</font></html>\" + \"<html>Powered by WebSphere Application Server Liberty</html>\"); c. Save your changes to the Java source file by either clicking the Save button ( ) or using CTRL+S . Recall that your server configuration is setup to automatically detect and publish application changes immediately. By saving the changes to your Java source file, you automatically triggered an application update on the server. a. To see this, go to the Console view at the bottom of the workbench. The application update started almost immediately after you saved the change to the application, and the update completed in seconds. Access the updated application. a. Refresh the browser in your workbench to see the application change. The title should now be rendered in purple text. Optionally continue to play around with application modifications and see how quickly those changes are available in the deployed application. Maybe put in some additional text to display on the page, or add extra HTML tags to see formatting changes (you could add a title tag to set the text displayed in the browser title bar, for example, \\<head>\\<title>Liberty Server\\</title>\\</head> ). The key is that this edit / publish / debug cycle is very simple and fast! Modify the server HTTP(s) ports to see that Liberty Serer configuration changes are also automatially picked up in the running server With Liberty, server configuration changes are monitored, and dynamically updated in the running instance of the server. In this section, you will make some updates to the Liberty server.xml file and observe the dynamic server updates capability in Liberty. Open the server configuration editor. a. In the Servers view, double-click on the labServer Server Configuration server to open the configuration server.xml editor. b. Ensure you are in the Design mode by selecting the Design tab on the Server Configuration editor. Select the Web Application: Sample1 item in the Server Configuration and look at its configuration details. From here, you can set basic application parameters, including the context root for the application, and to automatically start the application. Select the Application Monitoring item in the Server Configuration and look at its configuration details. You can see that the monitor polls for changes every 500ms using an mbean trigger. Select the Feature Manager item to see the features that are configured on your server. You added the servlet-4.0 feature because you knew that you were going to be running a servlet application. But the development tools automatically added the localConnector-1.0. feature to your server to support notifications and application updates. In fact, you would not have needed to add the servlet feature to your server at the beginning at all. The tools would have automatically enabled that feature, based on the content of the application. Change the HTTP port. Using the default HTTP port (9080) is an easy way to quickly bring up an application, but it is common to want to use a different port. This is an easy thing to change. a. In the Configuration Structure area, select Server Configuration , then select HTTP Endpoint b. In the HTTP Endpoint Details area, Change the HTTP Port to 9085 . c. Save your changes to the server configuration (CTRL+S). You can review your full server configuration in the server.xml source file. Back in the server configuration editor, switch to the Source tab at the bottom to view the full XML source for your server configuration. After you saved your configuration changes, the configuration of > your running server was automatically updated. The Console > pane will show that the Sample1 servlet is now available on port > 9085. Now, you can access your sample application using the new port. In the browser in your workbench, change the port from 9080 to 9085 and refresh the application. Add INFO logging output to console WebSphere Traditional and Liberty provide the ability to set the logging level to any of the supported log levels defined in the documentation: https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-logging-trace AUDIT logging enables logging of \u201cSignificant event affecting server state or resources\u201d INFO logging enables of \u201cGeneral information outlining overall task progress\u201d By default, the Liberty Server has the console log level set to AUDIT. In this section, you will change the level of log messages written to the console from AUDIT to INFO, which will result in additional logging messages. You will perform this activity in the server.xml file using the UI. It is also possible to set default logging options in the bootstrap.properties file. If the logging options are set in the bootstrap.properties file, the logging options will take effect very early in server startup, so it may be useful for debugging server initialization problems. Open the server configuration editor. a. In the Servers view, double-click on the labServer Server Configuration server to open the configuration server.xml editor. b. Ensure you are in the Design mode by selecting the Design tab on the Server Configuration editor. Add the Logging configuration option to the server a. Under the Configuration Structure section, Click on Server Configuration. And, then click the Add button. b. Type logging in the \u201cContext: Server Configuration\u201d field to narrow the list of configuration options displayed c. On the Add Element dialog, select Logging , And, then click the OK button d. The logging page displays the properties for the logging configuration, such as the name of the log files, the maximum size of log files, and the maximum number of log files to retain. Additional configuration information is displayed regarding tracing. Notice that the Console Log Level is set to AUDIT by default. Change the Console log level to INFO using the pull-down menu. a. Switch to the Source view for the server.xml file to see the configuration changes added to server.xml. html <logging consoleLogLevel=\"INFO\"></logging> b. Save the configuration file. The changes you made are dynamic and take effect immediately. Update trace specification By default, the Liberty Server trace specification is set to *=info=enabled . This is the same for Traditional WebSphere Application Server (WAS). Updating the trace specification for debugging is easily performed using the server configuration editor. You can specify the trace specification in the UI, or copy / paste the trace specification directly into the server.xml file. In this section, you will specify a trace specification using the configuration editor. And, then, you will look at the result in the server.xml source file Open the server configuration editor, if it is not already opened. a. In the Servers view, double-click on the labServer Server Configuration server to open the configuration server.xml editor. b. Ensure you are in the Design mode by selecting the Design tab on the Server Configuration editor. Update the Trace Specification under the logging configuration. a. Click on Logging under the Server Configuration section. This displays the logging and trace details. b. Update the Trace Specification field with the following trace string: webcontainer=all=enabled:*=info=enabled c. Switch to the Source tab on the configuration editor and view the logging configuration. : <logging consoleLogLevel=\"INFO\" traceSpecification=\"webcontainer=all=enabled:*=info=enabled\"></logging> d. Save the configuration changes. e. Check the console view to veriify the trace specification was updated Verify that the trace.log file contains trace data. a. Navigate to the server logs directory. Home > Student > WLP_21.0.0.3 > wlp > usr > servers > labServer > logs The trace.log file has been created and contains content. b. Double click on the trace.log file to view it in the text editor. You can also view the trace file in Eclipse. In the Enterprise Explorer view, expand the Liberty Runtime project, and its subdirectories, and you will find the trace.log file on the logs directory. a. Refresh the Liberty Runtime project so that the trace.log file will be visible in the view since it was created outside of the eclipse IDE. Right mouse click on the Liberty Runtime project, and select Refresh from the context menu b. Navigate to Liberty Runtime > servers > labServer > logs c. The trace.log file is viewable from inside of the IDE Very importantly, reset the trace specification back to the default value. a. Switch to the Source tab on the configuration editor and update the logging configuration to: <logging consoleLogLevel=\"AUDIT\" traceSpecification=\"*=info=enabled \"></logging> b. Save the configuration. Customizing Liberty JVM Options The generic JVM arguments are used to configure and adjust how the JVM executes. In this section of the lab, you will explore the JVM Options file. A common JVM option configuration is to set the minimum and maximum size of the JVM heap, based on the application runtime requirements. The WebSphere Application Server Liberty is pre-configured with minimal settings defined. The following steps will direct you how to define custom generic JVM arguments such as heap settings for a Liberty server. First, create the jvm.options file, using the WebSPhere Developer tools a. In the Eclipse Servers view, right-click on the Liberty Server. b. Select from the context menu New > Server Environment File > jvm.options > in ${server.config.dir} This will create a jvm.options file in the server\u2019s configuration directory with the most commonly-used options available in comments: If necessary, double click to open the file in the eclipse text editor Enter the following two lines in the jvm.options file to set the minimum and maximum heap size for the labServer server. The following options will set the min / max JVM heap size to 25 MB and 500 MB respectively. -Xms25m -Xmx500m Save the file. Ctrl + S Restart the server to enable changes STOP the server Exit Eclipse This concludes the customization portion of the lab. In the next sections, you will be introduced to the Liberty configuration using the command line. Explore Liberty via command line In the previous section of the lab, you used the WebSphere Developer Tools in the Eclipse IDE to deploy an application and work with the Liberty configuration. Creating servers, starting, and stopping servers, deploying applications, and overriding the server configuration can also be accomplished from the command line. In this section of the lab, you will experience how to work with Liberty from command line. Create, start, and configure a new Liberty server Navigate to the Liberty directory a. Open a Terminal window and change to the Liberty installation directory cd /home/ibmdemo/Student/WLP\\_21.0.0.3/wlp Create a new Liberty server named \u201cmyServer\u201d. The \u201cbin\u201d directory contains the Liberty commands. a. Use the server command with the \u201ccreate\u201d option to create a new server named \u201cmyServer\u201d. The server is created in a matter of seconds. bin/server create myServer Start the Liberty server, using the \u201cstart\u201d option on the server command. The server is started in a matter of seconds. bin/server start myServer Modify the server configuration to add the servlet-3.1 feature that will be by the sample application you will deploy in a subsequent step. a. Open an editor to edit the server.xml file for the server named \u201cmyServer\u201d. gedit /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer/server.xml b Under the feature manager, replace existing featured with servlet-3.1 feature: xml <featureManager> <feature>servlet-3.1</feature> </featureManager> c. Save the changes d. Close the editor Look at the tail of {LAB_HOME}/wlp/usr/servers/myServer/logs/messages.log You should see messages about feature updates. The messages.log file is the main log file for Liberty, and by default, is located in the logs directory under the server configuration tail /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer/logs/messages.log For example: ``` [4/16/19 14:29:29:276 CDT] 00000037 com.ibm.ws.kernel.feature.internal.FeatureManager CWWKF0007I: Feature update started. [4/16/19 14:29:29:400 CDT] 00000035 com.ibm.ws.config.xml.internal.ConfigRefresher CWWKG0017I: The server configuration was successfully updated in 0.240 seconds. ``` Now you are ready to start working with a sample application that uses the Servlet feature. Deploying a sample application to Liberty In the first part of this lab, you used the WebSphere Developer Tools in the Eclipse IDE to deploy an application and work with the Liberty configuration. In this section of the lab, you will deploy an application to Liberty using two different techniques. First, you will simply copy the application WAR module into the Liberty \u201c dropins \u201d directory. The dropins directory is monitored by Liberty. As deployable units (WAR, EAR, JAR) are added to the directory, Liberty automatically deploys and starts the application on the Liberty server. As the deployable units are removed from the dropins folder, the applications are stopped and removed from the running Liberty server. Now, give it a try. Deploy an application to dropins directory Information: The dropins directory can be used for applications that do not require extra configuration, such as security role mapping First, use the \u201c tail -f\u201d \u201ccommand to view the Liberty server\u2019s messages.log file to see the messages that are generated once the application war file is copied to the \u201cdropins\u201d folder for your server. a. Open a new Terminal window b. Use the tail -f command to view the messages.log file. tail -f /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer/logs/messages.log The easiest way to deploy an application to Liberty is to copy it to the server\u2019s dropins directory. The Sample1.war is provided for you in the lab. It is the same application that was deployed using the Eclipse IDE in the first part of the lab. a. Return to the Terminal Window that is at the directory: ~/Student/WLP_21.0.0.3/wlp b. Copy the provided Sample1.war application to the dropins folder of your \u201cmyServer\u201d server. cp /home/ibmdemo/Student/WLP_21.0.0.3/labs/gettingStarted/1_discover_*/Sample1.war /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer/dropins Check the server\u2019s messages.log to ensure that application deployment has taken place. You will see messages showing the Sample1 application being started. Check the application is running by opening a browser at: http://localhost:9080/Sample1/SimpleServlet Delete the Sample1.war file from the dropins directory, then check that it\u2019s no longer accessible from the browser. rm /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer/dropins/Sample1.war http://localhost:9080/Sample1/SimpleServlet Deploy the application by adding it to the server.xml file While the dropins directory can be used for applications that do not require extra configuration, deploying the application by adding it to the server.xml file provides the freedom to configure the Liberty server based on the application configuration requirements. In this section, you will deploy the Sample1 application by adding it to the server.xml fie. In this case, you must put the application in one of the following locations: ${server.config.dir}/apps (that is, server_directory /user/servers/ server_name /apps) ${shared.app.dir} (that is, liberty_install_location /usr/shared/apps) Copy the Sample1.war file to the ${server.config.dir}/apps directory. cp /home/ibmdemo/Student/WLP_21.0.0.3/labs/gettingStarted/1_discover_*/Sample1.war /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer/apps Add the Sample1.war application configuration to the server.xml file. a. Use gedit to edit the server.xml and add the Sample1.war to the configuration, which points to the \u201capps\u201d directory, by default. gedit /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer/server.xml b. Add the following line to the server,xml file, as illustrated below: html <webApplication id=\"Sample1\" location=\"Sample1.war\" name=\"Sample1\" /> c. Save and CLOSE the server.xml file Check the server\u2019s messages.log that the application is started. Check the application is running by opening a browser at: http://localhost:9080/Sample1/SimpleServlet Add INFO logging output to console By default, the Liberty Server has the console log level set to AUDIT. In this section, you will change the level of log messages written to the console from AUDIT to INFO. You will perform this activity by modifying server.xml file using an editor. It is also possible to set default logging options in the bootstrap.properties file. If the logging options are set in the bootstrap.properties file, the logging options will take effect very early in server startup, so it may be useful for debugging server initialization problems. Edit server.xml and add the logging configuration: a. Open the server.xml with the editor gedit /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer/server.xml b Add the following line to the server.xml file to update the logging level from AUDIT to INFO. html <logging consoleLogLevel=\"INFO\"/> c. Save the changes, and check messages.log that the configuration change was updated. d. From the terminal window where \u201c tail -f \u201d command is running, verify the server configuration was updated. Update trace specification By default, the Liberty Server trace specification is set to *=info=enabled. This is the same for Traditional WebSphere Application Server. Updating the trace specification for debugging is easily performed by updating server.xml. Update the logging stanza to include a trace specification for tracing the webcontainer. a. Use gedit to edit server.xml and update the logging stanza to: html <logging consoleLogLevel=\"INFO\" traceSpecification=\"webcontainer=all=enabled:*=info=enabled\" /> b. Save the server.xml file: c. Verify the messages.lof file logged the updtaed trace specfication Use CTRL-C to Stop the \u201c tail -f \u201d command that is running in the terminal window. Verify that the trace file contains trace data. The trace file is located at: cat /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer/logs/trace.log Very important: avoid excessive tracing by reverting the trace specification back to : html <logging consoleLogLevel=\"INFO\"/> Save the changes to the server.xml file. Close the editor Customizing Liberty JVM Options The generic JVM arguments are used to configure and adjust how the JVM executes. The WebSphere Application Server Liberty is pre-configured with minimal settings defined. The following steps will direct you how to define custom generic JVM arguments such as heap settings for a Liberty server. Create a jvm.options file that affects all servers a. Change directory to {LAB_HOME}/wlp/usr/servers/myServer cd /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer b. Create a new file named jvm.options in the \u201cmyServer\u201d directory gedit jvm.options c. Add the following lines to set the minimum and maximum heap size. The following options will set the min / max JVM heap size to 25 MB and 500 MB respectively. -Xms25m -Xmx500m Save and close the jvm.options file Restart the server for the changes to take affect cd /home/ibmdemo/Student/WLP_21.0.0.3/wlp bin/server stop myServer bin/server start myServer Stop the server cd /home/ibmdemo/Student/WLP_21.0.0.3/wlp bin/server stop myServer This concludes the customization portion of the lab using command line. In the next sections, you will be introduced to the Liberty configuration files for customizing the server initialization and environment settings. Introducing Liberty Environment Variable Configuration You can customize the Liberty environment using certain specific variables to support the placement of product binaries and shared resources. The Liberty environment variables are specified using server.env file. You can use server.env file at the installation and server levels to specify environment variables such as JAVA_HOME, WLP_USER_DIR and WLP_OUTPUT_DIR. Important: NOTE: You will NOT modify the default environment configuration in this lab. Review the information in this section to become familiar with the environment variables that are available for customizing the Liberty environment. The following Liberty specific variables can be used to customize the Liberty environment: ${wlp.install.dir} This configuration variable has an inferred location. The installation directory is always set to the parent of the directory containing the launch script or the parent of the /lib directory containing the target jar files. TIP: For this lab, the ${wlp.install.dir} is \u201c\u201c {LAB_HOME}/wlp \u201d WLP_USER_DIR This environment variable can be used to specify an alternate location for the ${wlp.install.dir}/usr. This variable can only be an absolute path. If this is specified, the runtime environment looks for shared resources and server definition in the specified directory. The ${server.config.dir} is equivalent to ${wlp.user.dir}/servers/serverName and can be set to a different location when running a server (to use configuration files from a> location outside wlp.user.dir). TIP: For this lab, the ${server.config.dir} is depending on the used server either \u201c {LAB_HOME}/wlp /usr/servers/labServer \u201d or \u201c {LAB_HOME}/wlp /usr/servers/myServer \u201d. WLP_OUTPUT_DIR This environment variable can be used to specify an alternate location for server generated output such as logs, the workarea directory and generated files. This variable can only be an absolute path. If this environment variable is specified, ${server.output.dir} is set to the equivalent of WLP_OUTPUT_DIR/serverName. If not specified, the ${server.output.dir} is the same as ${server.config.dir} . TIP: For this lab, the ${server.output.dir} is {LAB_HOME}/wlp /usr/servers/labServer \u201d or \u201c {LAB_HOME}/wlp /usr/servers/myServer \u201d, which is the same as ${server.config.dir}. Introducing Liberty bootstrap.properties In this section of the lab, you will gain an understanding of how and when bootstrap properties are required during environment initialization. Important: NOTE: You will NOT modify the default environment configuration in this lab. This information is provided in the lab for your reference. . Bootstrap properties are used to initialize the runtime environment for a particular server. Generally, they are attributes that affect the configuration and initialization of the runtime. Bootstrap properties are set in a text file named bootstrap.properties . This file should be located in the server directory alongside the configuration root file server.xml. By default, the server directory is usr/servers/*server_name *. The bootstrap.properties file contains two types of properties: A small, predefined set of initialization properties. Any custom properties you choose to define which you can then use as variables in other configuration files (that is, server.xml and included files). You can create the bootstrap.properties through any file creation mechanism, or by using the same method shown above for creation of the jvm.options file in eclipse. You can edit the bootstrap.properties file using a text editor, or using the editor that is part of the Liberty developer tools. Changes to the bootstrap.properties file are applied when the server is restarted. TIP: As an example, the logging service can be controlled through the server configuration (server.xml) file. Occasionally you need to set logging properties so they can take effect before the server configuration files are processed. In this case you set them in the bootstrap.properties file instead of the server configuration. You do not usually need to do this to get logging from your own code, which is loaded after server configuration processing, but you might need to do this to analyze problems in early server start or configuration processing. === END OF LAB ===","title":"Discover Liberty"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#discover-liberty","text":"In this lab, you will explore the Liberty server configuration, installing applications onto Liberty, updating the server configurations, and updating an application. As you explore Liberty, you will first use the WebSphere Developer Tools for Eclipse. Then, you will explore Liberty using the command line. Finally, you will be introduced to mode advanced configurations using jvm.options, bootstrap.properties, Liberty built-in variables, and logging and tracing. TIP: Liberty is pre-installed on the VM environment provided. {LAB_HOME} refers to: /home/ibmdemo/Student/WLP_21.0.0.3 TIP: To reduce typing or copy & past of commands, you can find the related code snippets or commands in the VMWare image in the directory: /home/ibmdemo/Student/lab-files/CodeSnippets/Bootcamp_Lab2_discover_CodeSnippets.txt","title":"Discover Liberty"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#accessing-the-lab-environment","text":"If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment. Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201c Reserve now \u201d option. https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575 The lab environment contains one (1) Linux VM, named Workstation . The Ubuntu Linux Workstation VM has the following software installed for the lab: Application Project with Liberty Maven 3.6.0 Access the lab environment from your web browser. A Published Service is configured to provide access to the Workstation VM through the noVNC interface for the lab environment. a. When the environment is provisioned, right-mouse click on the Published Service link and open the URL in a new private or incognito browser window, as described below: If using Google Chrome browser, select \"Open link in incognito window\" from the context menu. If using Firefox browser, select \"Open link in new private window\" from the context menu. b. Click on the \"vnc.html\" link to open the lab environment through the noVNC interface. c. Click the Connect button d. Enter the password as: passw0rd . Then click the Send Credentials button to access the lab environment. Note: That is a numeric zero in passw0rd Login with ibmdemo ID. a. Click on the \u201c ibmdemo \u201d icon on the Ubuntu screen. b. When prompted for the password for \u201c ibmdemo \u201d user, enter \u201c passw0rd \u201d as the password: Password: passw0rd (lowercase with a zero instead of the o) Once you access the Student VM through the published service, you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.)","title":"Accessing the lab environment"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#tips-for-working-the-in-lab-environment","text":"You can use your Browsers zoom in and zoom out options to resize the virtual desktop to fit your screen. The examples below are using Firefox and Chrome browsers. Firefox example: Chrome example: You can copy / paste text from the lab guide into the lab environment using the clipboard in the noVNC viewer. a. Copy the text from the lab guide that you want to paste into the lab environment b. Click the Clipboard icon and paste the text into the noVNC clipboard c. Paste the tect into the VM, such as to a terminal window, browser window, etc. d. Click on the clipboard icon agian to close the clipboard NOTE: Sometimes pasting into a Terminal window in the VM does not work consistently. In this case you might try again, or paste the text into a Text Editor in the VM, and then paste it into the Terminal window in the VM. An alternative to using the noVNC Copy / Paste option, you may considr openeing the lab guide in a web browser inside of the VM. Using this method, you can easily copy / paste text from the lab guide wihout having to use the noVNC clipboard. Important: Click CANCEL \u2026. If, at any time during the lab, you get a pop-up asking to install updated software onto the Ubuntu VM. The one we experience is an update available for VS Code. CLICK CANCEL!","title":"Tips for working the in lab environment"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#explore-liberty-via-wdt","text":"Note : proceed directly to section 3 if you only want to use the command line.","title":"Explore Liberty via WDT"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#setup-liberty-for-the-lab","text":"Copy the Liberty server configuration, used in this lab, to the Liberty usr/servers directory. a. Open a new Terminal window b. Run the script to setup the Liberty server configuration used in this lab. /home/ibmdemo/Student/labs/lab2/lab2-setup.sh","title":"Setup Liberty for the lab"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#ensure-eclipse-is-started-and-you-are-in-the-correct-workspace","text":"If Eclipse is not already started, start it now a. Use the File Explorer to navigate to the directory Home > Student > WLP_21.0.0.3 > wdt > eclipse b. Double-click on the eclipse executable to start Eclipse. c. When the Eclipse launcher prompts you to select a workspace, enter the following directory. Then click the Launch button. /home/ibmdemo/Student/labs/lab2/workspace","title":"Ensure eclipse is started and you are in the correct workspace"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#exploring-the-liberty-server","text":"Start the server in eclipse. a. From the Servers view, select your labServer instance and click the Start the server button ( ). Alternatively, you can also right-click the server name and choose the Start option from the context menu. b. Switch to the Console view if necessary. Look at the messages to see how fast your server starts!","title":"Exploring the Liberty Server"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#explore-using-the-wdt-to-make-changes-to-the-lab-server-configuration","text":"Open the Lab Server configuration using the WDT server configuration editor a. In the Servers view, double-click on your labServer server to open the server Overview . b. Expand the Publishing section and notice that the server is set to automatically detect and publish changes. Keep this default setting. In this exercise, you will be deploying a simple servlet application, so try enabling the servlet feature on this server. a. On the Overview page, locate the Liberty Server Settings section b. Click the Open server configuration link to open the server.xml editor. Note: To better see the content in Eclipse, you may need to resize the Eclipse views, or increase the size of the Eclipse desktop app c. If the Source view of the server.xml file is displayed, switch to the Design view in the server configuration editor, by clicking on the \"Design\u201d tab in the editor pane d. Start by providing a meaningful description for your server, such as \u201cLiberty server for labs\u201d. e. To add a feature, such as servlet-4.0, go back in the Configuration Structure area, and exand it, if necessary, and note the Feature Manager configuration entry. In this lab, the Feature Manager has already been added to the configuration f. Review the Feature Manager settings by clicking on the \u201c Feature Manager \u201d to view the list of features already configured. Notice that the jsp-2.3 and the loalConnector-1.0 features have already been added to the server configuration. g. Click the Add button to add a new feature \u201cservlet-4.0\u201d h. In the pop-up, type servlet to filter to servlet related features. Then select servlet-4.0. Click OK i. In the server.xml editor, switch to the Source tab at the bottom to see the XML source for this configuration file. You will see that a new featureManager element has been updated to contain the servlet-4.0 feature. j. Now you have a server that is configured to use the servlet-4.0 feature. k. Click the Save button ( ) to save your changes (or use CTRL+S) TIP: The Sample1 application is a Java Enterprise application that includes a simple Java Servlet class . For the Liberty Server to run the Sample1 application, the servlet feature must be configured in the server.xml file. Switch to the Console view, located at the bottom of the workbench and review the latest messages. These messages are showing that your Liberty server automatically detected the configuration update, processed the feature that you enabled, and is now listening for incoming requests. You will notice that the server configuration was automatically updated, and the feature update was completed very quickly. In this example, it was less than one second. Close the server.xml in the editor pane. Close the Liberty Server Overview page in Eclipse Now you are ready to start working with a sample application that uses the Servlet feature.","title":"Explore using the WDT to make changes to the lab server configuration"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#deploying-a-sample-application-to-liberty","text":"","title":"Deploying a sample application to Liberty"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#import-a-sample-application-into-eclipse","text":"A simple servlet WAR file has been provided for this exercise; import it into your workbench. a. In Eclipse, go to File > Import . b. Expand the Web section, then select WAR file . Click Next . c. In the WAR file field, select Browse . Navigate to: /home/ibmdemo/Student/WLP_21.0.0.3/labs/gettingStarted/1_discover_20190416/Sample1.war d. Click Open . e. Ensure the Target runtime is set to Liberty Runtime f. Unselect \u201cAdd project to an EAR\u201d g. Click Finish h. If prompted to open the web perspective, click Open Perspective . Now you have a Sample1 web project in your workspace. Expand it in the Enterprise Explorer view to see the different components of the project. Start the sample application. a. In the Enterprise Explorer pane, navigate to the SimpleServlet.java as shown below. Sample1 > src/main/java > wasdev.sample > SimpleServlet.java b. Right-click on SimpleServlet.java . c. From the context menu, select Run As > Run on Server . d. In the Run On Server dialog: Verify that Choose an existing server is chosen. Under localhost , select the Liberty Server that you defined earlier. The server should be listed in Started state. Click Finish . e. After a moment, your application will be installed and started. See the Console pane for the corresponding messages. In the main panel of the workbench, a browser opened, pointing to http://localhost:9080/Sample1/SimpleServlet . a. If you receive a 404 the first time, try to refresh the browser once the application is completely deployed and started. b. At this point, you should see the rendered HTML content generated by the simple servlet. In this section of the lab, you explored how to use the WebSphere Developer Tools (WDT) to start a Liberty Server, modify the server configuration, import a simple Java EE WAR module, and deploy the application to the server from with the development environment. In the next section, you will explore using WDT to make changes to the application code, and have it hot deployed to the Liberty server, in your development environment, to illustrate a simple, yet robust development experience for Java developers using WDT and Liberty.","title":"Import a sample application into Eclipse"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#modify-the-application-to-see-how-changes-are-automatically-picked-up-in-the-running-server","text":"Open the servlet java source code. a. In the Enterprise Explorer panel, expand the Sample1 project, then go to: Sample1 > src/main/java > wasdev.sample b. Double-click the SimpleServlet .java source file to open the Java editor for the servlet. c. This is the SimpleServlet.java source code Examine the doGet() method in the SimpleServlet.java code a. This is a very simple servlet with a doGet() method that sends out an HTML snippet string as a response. Your doGet() method will look similar to this (some of the HTML tags might be a little different \u2013 that is ok). Modify the application and publish the change. a. In the doGet() method, Locate the \\<h1> heading element of the HTML string, and notice that it contains a font tag to set the color to \u201c green \u201d. b. Modify this string by changing the text green to purple , so your font tag will look read \\<font color=purple> . html response.getWriter().print( \"<html><h1><font color=purple>Simple Servlet ran successfully</font></html>\" + \"<html>Powered by WebSphere Application Server Liberty</html>\"); c. Save your changes to the Java source file by either clicking the Save button ( ) or using CTRL+S . Recall that your server configuration is setup to automatically detect and publish application changes immediately. By saving the changes to your Java source file, you automatically triggered an application update on the server. a. To see this, go to the Console view at the bottom of the workbench. The application update started almost immediately after you saved the change to the application, and the update completed in seconds. Access the updated application. a. Refresh the browser in your workbench to see the application change. The title should now be rendered in purple text. Optionally continue to play around with application modifications and see how quickly those changes are available in the deployed application. Maybe put in some additional text to display on the page, or add extra HTML tags to see formatting changes (you could add a title tag to set the text displayed in the browser title bar, for example, \\<head>\\<title>Liberty Server\\</title>\\</head> ). The key is that this edit / publish / debug cycle is very simple and fast!","title":"Modify the application to see how changes are automatically picked up in the running server."},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#modify-the-server-https-ports-to-see-that-liberty-serer-configuration-changes-are-also-automatially-picked-up-in-the-running-server","text":"With Liberty, server configuration changes are monitored, and dynamically updated in the running instance of the server. In this section, you will make some updates to the Liberty server.xml file and observe the dynamic server updates capability in Liberty. Open the server configuration editor. a. In the Servers view, double-click on the labServer Server Configuration server to open the configuration server.xml editor. b. Ensure you are in the Design mode by selecting the Design tab on the Server Configuration editor. Select the Web Application: Sample1 item in the Server Configuration and look at its configuration details. From here, you can set basic application parameters, including the context root for the application, and to automatically start the application. Select the Application Monitoring item in the Server Configuration and look at its configuration details. You can see that the monitor polls for changes every 500ms using an mbean trigger. Select the Feature Manager item to see the features that are configured on your server. You added the servlet-4.0 feature because you knew that you were going to be running a servlet application. But the development tools automatically added the localConnector-1.0. feature to your server to support notifications and application updates. In fact, you would not have needed to add the servlet feature to your server at the beginning at all. The tools would have automatically enabled that feature, based on the content of the application. Change the HTTP port. Using the default HTTP port (9080) is an easy way to quickly bring up an application, but it is common to want to use a different port. This is an easy thing to change. a. In the Configuration Structure area, select Server Configuration , then select HTTP Endpoint b. In the HTTP Endpoint Details area, Change the HTTP Port to 9085 . c. Save your changes to the server configuration (CTRL+S). You can review your full server configuration in the server.xml source file. Back in the server configuration editor, switch to the Source tab at the bottom to view the full XML source for your server configuration. After you saved your configuration changes, the configuration of > your running server was automatically updated. The Console > pane will show that the Sample1 servlet is now available on port > 9085. Now, you can access your sample application using the new port. In the browser in your workbench, change the port from 9080 to 9085 and refresh the application.","title":"Modify the server HTTP(s) ports to see that Liberty Serer configuration changes are also automatially picked up in the running server"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#add-info-logging-output-to-console","text":"WebSphere Traditional and Liberty provide the ability to set the logging level to any of the supported log levels defined in the documentation: https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-logging-trace AUDIT logging enables logging of \u201cSignificant event affecting server state or resources\u201d INFO logging enables of \u201cGeneral information outlining overall task progress\u201d By default, the Liberty Server has the console log level set to AUDIT. In this section, you will change the level of log messages written to the console from AUDIT to INFO, which will result in additional logging messages. You will perform this activity in the server.xml file using the UI. It is also possible to set default logging options in the bootstrap.properties file. If the logging options are set in the bootstrap.properties file, the logging options will take effect very early in server startup, so it may be useful for debugging server initialization problems. Open the server configuration editor. a. In the Servers view, double-click on the labServer Server Configuration server to open the configuration server.xml editor. b. Ensure you are in the Design mode by selecting the Design tab on the Server Configuration editor. Add the Logging configuration option to the server a. Under the Configuration Structure section, Click on Server Configuration. And, then click the Add button. b. Type logging in the \u201cContext: Server Configuration\u201d field to narrow the list of configuration options displayed c. On the Add Element dialog, select Logging , And, then click the OK button d. The logging page displays the properties for the logging configuration, such as the name of the log files, the maximum size of log files, and the maximum number of log files to retain. Additional configuration information is displayed regarding tracing. Notice that the Console Log Level is set to AUDIT by default. Change the Console log level to INFO using the pull-down menu. a. Switch to the Source view for the server.xml file to see the configuration changes added to server.xml. html <logging consoleLogLevel=\"INFO\"></logging> b. Save the configuration file. The changes you made are dynamic and take effect immediately.","title":"Add INFO logging output to console"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#update-trace-specification","text":"By default, the Liberty Server trace specification is set to *=info=enabled . This is the same for Traditional WebSphere Application Server (WAS). Updating the trace specification for debugging is easily performed using the server configuration editor. You can specify the trace specification in the UI, or copy / paste the trace specification directly into the server.xml file. In this section, you will specify a trace specification using the configuration editor. And, then, you will look at the result in the server.xml source file Open the server configuration editor, if it is not already opened. a. In the Servers view, double-click on the labServer Server Configuration server to open the configuration server.xml editor. b. Ensure you are in the Design mode by selecting the Design tab on the Server Configuration editor. Update the Trace Specification under the logging configuration. a. Click on Logging under the Server Configuration section. This displays the logging and trace details. b. Update the Trace Specification field with the following trace string: webcontainer=all=enabled:*=info=enabled c. Switch to the Source tab on the configuration editor and view the logging configuration. : <logging consoleLogLevel=\"INFO\" traceSpecification=\"webcontainer=all=enabled:*=info=enabled\"></logging> d. Save the configuration changes. e. Check the console view to veriify the trace specification was updated Verify that the trace.log file contains trace data. a. Navigate to the server logs directory. Home > Student > WLP_21.0.0.3 > wlp > usr > servers > labServer > logs The trace.log file has been created and contains content. b. Double click on the trace.log file to view it in the text editor. You can also view the trace file in Eclipse. In the Enterprise Explorer view, expand the Liberty Runtime project, and its subdirectories, and you will find the trace.log file on the logs directory. a. Refresh the Liberty Runtime project so that the trace.log file will be visible in the view since it was created outside of the eclipse IDE. Right mouse click on the Liberty Runtime project, and select Refresh from the context menu b. Navigate to Liberty Runtime > servers > labServer > logs c. The trace.log file is viewable from inside of the IDE Very importantly, reset the trace specification back to the default value. a. Switch to the Source tab on the configuration editor and update the logging configuration to: <logging consoleLogLevel=\"AUDIT\" traceSpecification=\"*=info=enabled \"></logging> b. Save the configuration.","title":"Update trace specification"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#customizing-liberty-jvm-options","text":"The generic JVM arguments are used to configure and adjust how the JVM executes. In this section of the lab, you will explore the JVM Options file. A common JVM option configuration is to set the minimum and maximum size of the JVM heap, based on the application runtime requirements. The WebSphere Application Server Liberty is pre-configured with minimal settings defined. The following steps will direct you how to define custom generic JVM arguments such as heap settings for a Liberty server. First, create the jvm.options file, using the WebSPhere Developer tools a. In the Eclipse Servers view, right-click on the Liberty Server. b. Select from the context menu New > Server Environment File > jvm.options > in ${server.config.dir} This will create a jvm.options file in the server\u2019s configuration directory with the most commonly-used options available in comments: If necessary, double click to open the file in the eclipse text editor Enter the following two lines in the jvm.options file to set the minimum and maximum heap size for the labServer server. The following options will set the min / max JVM heap size to 25 MB and 500 MB respectively. -Xms25m -Xmx500m Save the file. Ctrl + S Restart the server to enable changes STOP the server Exit Eclipse This concludes the customization portion of the lab. In the next sections, you will be introduced to the Liberty configuration using the command line.","title":"Customizing Liberty JVM Options"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#explore-liberty-via-command-line","text":"In the previous section of the lab, you used the WebSphere Developer Tools in the Eclipse IDE to deploy an application and work with the Liberty configuration. Creating servers, starting, and stopping servers, deploying applications, and overriding the server configuration can also be accomplished from the command line. In this section of the lab, you will experience how to work with Liberty from command line.","title":"Explore Liberty via command line"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#create-start-and-configure-a-new-liberty-server","text":"Navigate to the Liberty directory a. Open a Terminal window and change to the Liberty installation directory cd /home/ibmdemo/Student/WLP\\_21.0.0.3/wlp Create a new Liberty server named \u201cmyServer\u201d. The \u201cbin\u201d directory contains the Liberty commands. a. Use the server command with the \u201ccreate\u201d option to create a new server named \u201cmyServer\u201d. The server is created in a matter of seconds. bin/server create myServer Start the Liberty server, using the \u201cstart\u201d option on the server command. The server is started in a matter of seconds. bin/server start myServer Modify the server configuration to add the servlet-3.1 feature that will be by the sample application you will deploy in a subsequent step. a. Open an editor to edit the server.xml file for the server named \u201cmyServer\u201d. gedit /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer/server.xml b Under the feature manager, replace existing featured with servlet-3.1 feature: xml <featureManager> <feature>servlet-3.1</feature> </featureManager> c. Save the changes d. Close the editor Look at the tail of {LAB_HOME}/wlp/usr/servers/myServer/logs/messages.log You should see messages about feature updates. The messages.log file is the main log file for Liberty, and by default, is located in the logs directory under the server configuration tail /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer/logs/messages.log For example: ``` [4/16/19 14:29:29:276 CDT] 00000037 com.ibm.ws.kernel.feature.internal.FeatureManager CWWKF0007I: Feature update started. [4/16/19 14:29:29:400 CDT] 00000035 com.ibm.ws.config.xml.internal.ConfigRefresher CWWKG0017I: The server configuration was successfully updated in 0.240 seconds. ``` Now you are ready to start working with a sample application that uses the Servlet feature.","title":"Create, start, and configure a new Liberty server"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#deploying-a-sample-application-to-liberty_1","text":"In the first part of this lab, you used the WebSphere Developer Tools in the Eclipse IDE to deploy an application and work with the Liberty configuration. In this section of the lab, you will deploy an application to Liberty using two different techniques. First, you will simply copy the application WAR module into the Liberty \u201c dropins \u201d directory. The dropins directory is monitored by Liberty. As deployable units (WAR, EAR, JAR) are added to the directory, Liberty automatically deploys and starts the application on the Liberty server. As the deployable units are removed from the dropins folder, the applications are stopped and removed from the running Liberty server. Now, give it a try.","title":"Deploying a sample application to Liberty"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#deploy-an-application-to-dropins-directory","text":"","title":"Deploy an application to dropins directory"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#deploy-the-application-by-adding-it-to-the-serverxml-file","text":"While the dropins directory can be used for applications that do not require extra configuration, deploying the application by adding it to the server.xml file provides the freedom to configure the Liberty server based on the application configuration requirements. In this section, you will deploy the Sample1 application by adding it to the server.xml fie. In this case, you must put the application in one of the following locations: ${server.config.dir}/apps (that is, server_directory /user/servers/ server_name /apps) ${shared.app.dir} (that is, liberty_install_location /usr/shared/apps) Copy the Sample1.war file to the ${server.config.dir}/apps directory. cp /home/ibmdemo/Student/WLP_21.0.0.3/labs/gettingStarted/1_discover_*/Sample1.war /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer/apps Add the Sample1.war application configuration to the server.xml file. a. Use gedit to edit the server.xml and add the Sample1.war to the configuration, which points to the \u201capps\u201d directory, by default. gedit /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer/server.xml b. Add the following line to the server,xml file, as illustrated below: html <webApplication id=\"Sample1\" location=\"Sample1.war\" name=\"Sample1\" /> c. Save and CLOSE the server.xml file Check the server\u2019s messages.log that the application is started. Check the application is running by opening a browser at: http://localhost:9080/Sample1/SimpleServlet","title":"Deploy the application by adding it to the server.xml file"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#add-info-logging-output-to-console_1","text":"By default, the Liberty Server has the console log level set to AUDIT. In this section, you will change the level of log messages written to the console from AUDIT to INFO. You will perform this activity by modifying server.xml file using an editor. It is also possible to set default logging options in the bootstrap.properties file. If the logging options are set in the bootstrap.properties file, the logging options will take effect very early in server startup, so it may be useful for debugging server initialization problems. Edit server.xml and add the logging configuration: a. Open the server.xml with the editor gedit /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer/server.xml b Add the following line to the server.xml file to update the logging level from AUDIT to INFO. html <logging consoleLogLevel=\"INFO\"/> c. Save the changes, and check messages.log that the configuration change was updated. d. From the terminal window where \u201c tail -f \u201d command is running, verify the server configuration was updated.","title":"Add INFO logging output to console"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#update-trace-specification_1","text":"By default, the Liberty Server trace specification is set to *=info=enabled. This is the same for Traditional WebSphere Application Server. Updating the trace specification for debugging is easily performed by updating server.xml. Update the logging stanza to include a trace specification for tracing the webcontainer. a. Use gedit to edit server.xml and update the logging stanza to: html <logging consoleLogLevel=\"INFO\" traceSpecification=\"webcontainer=all=enabled:*=info=enabled\" /> b. Save the server.xml file: c. Verify the messages.lof file logged the updtaed trace specfication Use CTRL-C to Stop the \u201c tail -f \u201d command that is running in the terminal window. Verify that the trace file contains trace data. The trace file is located at: cat /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer/logs/trace.log Very important: avoid excessive tracing by reverting the trace specification back to : html <logging consoleLogLevel=\"INFO\"/> Save the changes to the server.xml file. Close the editor","title":"Update trace specification"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#customizing-liberty-jvm-options_1","text":"The generic JVM arguments are used to configure and adjust how the JVM executes. The WebSphere Application Server Liberty is pre-configured with minimal settings defined. The following steps will direct you how to define custom generic JVM arguments such as heap settings for a Liberty server. Create a jvm.options file that affects all servers a. Change directory to {LAB_HOME}/wlp/usr/servers/myServer cd /home/ibmdemo/Student/WLP_21.0.0.3/wlp/usr/servers/myServer b. Create a new file named jvm.options in the \u201cmyServer\u201d directory gedit jvm.options c. Add the following lines to set the minimum and maximum heap size. The following options will set the min / max JVM heap size to 25 MB and 500 MB respectively. -Xms25m -Xmx500m Save and close the jvm.options file Restart the server for the changes to take affect cd /home/ibmdemo/Student/WLP_21.0.0.3/wlp bin/server stop myServer bin/server start myServer Stop the server cd /home/ibmdemo/Student/WLP_21.0.0.3/wlp bin/server stop myServer This concludes the customization portion of the lab using command line. In the next sections, you will be introduced to the Liberty configuration files for customizing the server initialization and environment settings.","title":"Customizing Liberty JVM Options"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#introducing-liberty-environment-variable-configuration","text":"You can customize the Liberty environment using certain specific variables to support the placement of product binaries and shared resources. The Liberty environment variables are specified using server.env file. You can use server.env file at the installation and server levels to specify environment variables such as JAVA_HOME, WLP_USER_DIR and WLP_OUTPUT_DIR. Important: NOTE: You will NOT modify the default environment configuration in this lab. Review the information in this section to become familiar with the environment variables that are available for customizing the Liberty environment. The following Liberty specific variables can be used to customize the Liberty environment: ${wlp.install.dir} This configuration variable has an inferred location. The installation directory is always set to the parent of the directory containing the launch script or the parent of the /lib directory containing the target jar files. TIP: For this lab, the ${wlp.install.dir} is \u201c\u201c {LAB_HOME}/wlp \u201d WLP_USER_DIR This environment variable can be used to specify an alternate location for the ${wlp.install.dir}/usr. This variable can only be an absolute path. If this is specified, the runtime environment looks for shared resources and server definition in the specified directory. The ${server.config.dir} is equivalent to ${wlp.user.dir}/servers/serverName and can be set to a different location when running a server (to use configuration files from a> location outside wlp.user.dir). TIP: For this lab, the ${server.config.dir} is depending on the used server either \u201c {LAB_HOME}/wlp /usr/servers/labServer \u201d or \u201c {LAB_HOME}/wlp /usr/servers/myServer \u201d. WLP_OUTPUT_DIR This environment variable can be used to specify an alternate location for server generated output such as logs, the workarea directory and generated files. This variable can only be an absolute path. If this environment variable is specified, ${server.output.dir} is set to the equivalent of WLP_OUTPUT_DIR/serverName. If not specified, the ${server.output.dir} is the same as ${server.config.dir} . TIP: For this lab, the ${server.output.dir} is {LAB_HOME}/wlp /usr/servers/labServer \u201d or \u201c {LAB_HOME}/wlp /usr/servers/myServer \u201d, which is the same as ${server.config.dir}.","title":"Introducing Liberty Environment Variable Configuration"},{"location":"lab-guides/md/1155/Discover-Liberty_v1.6/#introducing-liberty-bootstrapproperties","text":"In this section of the lab, you will gain an understanding of how and when bootstrap properties are required during environment initialization. Important: NOTE: You will NOT modify the default environment configuration in this lab. This information is provided in the lab for your reference. . Bootstrap properties are used to initialize the runtime environment for a particular server. Generally, they are attributes that affect the configuration and initialization of the runtime. Bootstrap properties are set in a text file named bootstrap.properties . This file should be located in the server directory alongside the configuration root file server.xml. By default, the server directory is usr/servers/*server_name *. The bootstrap.properties file contains two types of properties: A small, predefined set of initialization properties. Any custom properties you choose to define which you can then use as variables in other configuration files (that is, server.xml and included files). You can create the bootstrap.properties through any file creation mechanism, or by using the same method shown above for creation of the jvm.options file in eclipse. You can edit the bootstrap.properties file using a text editor, or using the editor that is part of the Liberty developer tools. Changes to the bootstrap.properties file are applied when the server is restarted. TIP: As an example, the logging service can be controlled through the server configuration (server.xml) file. Occasionally you need to set logging properties so they can take effect before the server configuration files are processed. In this case you set them in the bootstrap.properties file instead of the server configuration. You do not usually need to do this to get logging from your own code, which is loaded after server configuration processing, but you might need to do this to analyze problems in early server start or configuration processing. === END OF LAB ===","title":"Introducing Liberty bootstrap.properties"},{"location":"lab-guides/md/lab3/Lab03-Liberty_devmode_v1.4/","text":"Modern Development experience with Liberty and Java applications Lab: Getting Started with Liberty and Dev Mode Objectives In this exercise, you will learn how developers can use Liberty in \u201cdev\u201d mode for achieving efficient iterative develop, test, debug cycle when developing Java based applications / microservices. At the end of this lab you should be able to: Use Liberty dev mode (stand-alone) without an IDE Experience hot reloading of application code and configuration changes using dev mode Work with Liberty dev mode in containers Run integrated unit/integration tests from Liberty dev mode You will need an estimated 45 to 60 minutes to complete this lab. Lab requirements Use the lab environment that we prepared for this lab. It already has the prerequisite software installed and configured. Introduction - Liberty and \"dev\" Mode Open Liberty is an application server designed for the cloud. It\u2019s small, lightweight, and designed with modern cloud-native application development in mind. Open Liberty supports the full MicroProfile and Jakarta EE APIs and is composable, meaning that you can use only the features that you need, keeping the server lightweight, which is great for microservices. It also deploys to every major cloud platform, including Docker, Kubernetes, and Cloud Foundry. Maven is an automation build tool that provides an efficient way to develop Java applications. Using Maven, you will build a simple microservice, called system , that collects basic system properties from your laptop and displays them on an endpoint that you can access in your web browser. Open Liberty development mode , or dev mode, allows you to develop applications with any text editor or IDE by providing hot reload and deployment, on demand testing, and debugger support. Open Liberty Dev Mode is enabled through Maven and Gradle projects. Your code is automatically compiled and deployed to your running server, making it easy to iterate on your changes. You can run tests on demand or even automatically so that you can get immediate feedback on your changes. You can also attach a debugger at any time to debug your running application. The lab environment One (1) Linux VM has been provided for this lab. The \u201cLiberty vPOT \u2026 Desktop\u201d VM has the following software available: Application Project with Liberty Maven 3.6.0 The login credentials for the Liberty vPOT \u2026 Desktop\u201d VM are: User ID: ibmdemo Password: passw0rd (That is a numeric zero in passw0rd) Login to the \"Liberty vPOT \u2026 Desktop\" VM and Get Started If the VM is not already started, start it by clicking the Play button. After the VM is started, click the \u201cLiberty vPOT \u2026 Desktop\u201d VM icon to access it. Login with ibmdemo ID. a. Click on the \u201c ibmdemo \u201d icon on the Ubuntu screen. b. When prompted for the password for \u201cibmdemo\u201d user, enter \u201c passw0rd \u201d as the password: Password: passw0rd (lowercase with a zero instead of the o) Resize the Skytap environment window for a larger viewing area while doing the lab. From the Skytap menu bar, click on the \u201c Fit to Size \u201d icon. This will enlarge the viewing area to fit the size of your browser window. If, at aytime during the lab, you ar asked to install updates, click CANCEL! Important: Click CANCEL \u2026. If, at any time during the lab, you get a pop-up asking to install updated software onto the Ubuntu VM. The one we experience is an update available for VS Code. CLICK CANCEL! Getting Started with Liberty and Dev Mode In this lab, you will learn how to run and update a simple REST microservice on an Open Liberty server using the developer mode (dev mode). You will use Maven throughout the guide to build and run the microservice as well as to interact with the running server instance. Building and running the application using Maven and the liberty-maven-plugin The sample application used in this lab is configured to be built with Maven. Every Maven-configured project contains a pom.xml file, which defines the project configuration, dependencies, plug-ins, and so on. Your pom.xml file is located in the root directory of the project and is configured to include the liberty-maven-plugin, which allows you to install applications into Open Liberty and manage the server instances. To begin, navigate to the project directory. Build the \u201c system\u201d microservice that is provided and deploy it to Open Liberty by running the Maven liberty:run goal: Navigate to the project directory. Build the \u201c system\u201d microservice that is provided and deploy it to Open Liberty by running the Maven liberty:run goal: a. Open a terminal window and change to the directory /home/ibmdemo/Student/labs/devmode/demo-project cd /home/ibmdemo/Student/labs/devmode/demo-project b. Run the mvn libert:run command to start the Liberty server mvn liberty:run The mvn command initiates a Maven build , during which the target directory is created to store all build-related files. The liberty:run argument specifies the Open Liberty run goal,which starts an Open Liberty server instance in the foreground. As part of this phase, an Open Liberty server runtime is downloaded and installed into the target/liberty/wlp directory, a server instance is created and configured in the target/liberty/wlp/usr/servers/defaultServer directory, and the application is installed into that server. When the server begins starting up, various messages display in your command-line session. Wait for the following message, which indicates that the server startup is complete: The server defaultServer is ready to run a smarter planet. Access the \u201csystem\u201d microservice that was deployed to the Liberty server. a. Open the Firefox Web Browser from inside of the VM and go to the URL below. The microservice lists various system properties of your JVM. http://localhost:9080/system/properties Stop the Liberty Server by pressing the CTRL+C in the command-line session where you ran the server. Start and Stop the Liberty server in the background Although you can start and stop the server in the foreground by using the Maven liberty:run goal, you can also start and stop the server in the background with the Maven liberty:start and liberty:stop goals: mvn liberty:start mvn liberty:stop View the pom.xml file to see the liberty-maven-plugin that was > used by the previous steps. a. From a Terminal window, navigate to the following directory cd /home/ibmdemo/Student/labs/devmode/demo-project b. View the relevant plugin in the pom.xml file. The -A and -B options on the grep command display the specified number of lines before and after the location of the search text string. cat pom.xml | grep -B 4 -A 2 liberty-maven-plugin Information: Tip: Additional information on the liberty-maven-plugin can be found here: https://github.com/OpenLiberty/ci.maven Updating the application without restarting the server The Open Liberty Maven plug-in includes a dev goal that listens for any changes in the project, including application source code or configuration changes. The Open Liberty server automatically reloads the application and configuration without restarting. This goal allows for quicker turnarounds and an improved developer experience. Start the Liberty server in \u201cdev\u201d mode a. From a Terminal window, navigate to the following directory cd /home/ibmdemo/Student/labs/devmode/demo-project b. Ensure the Liberty server is STOPPED! mvn liberty:stop c. Start Liberty in dev mode mvn liberty:dev Note: The Liberty is now started in dev mode. Dev mode automatically picks up changes that you make to your application and allows you to run tests by pressing the enter/return key in the active command-line session. When you\u2019re working on your application, rather than rerunning Maven commands, press the enter/return key to verify your change, which executes your tests. Access the \u201csystem\u201d microservice that was deployed to the Liberty server. a. Open the Firefox Web Browser from inside of the VM and go to the URL below to display the main application web page http://localhost:9080/ Make a minor change to the \u201csystem Properties Sample\u201d source code while running in dev mode, to see the changes dynamically picked up and applied to the running server. a. Open a new terminal window and navigate to src/main/webapp folder of the application as illustrated below. cd /home/ibmdemo/Student/labs/devmode/demo-project/src/main/webapp b. Use the gedit editor to open the index.html file in edit mode gedit index.html c. Make the following minor change to the index.html page Change the highlighted line: Updated to read: System Properties Demo d. Save the file and close the gedit editor. Access the System Properties Sample microservice that was deployed to the Liberty server. a. From the Firefox Web Browser inside of the VM and go to the URL below to display the main application web page http://localhost:9080/ b. IMPORTANT : Click the RELOAD icon in the Firefox browser to reload the page. Browsers cache content, so you need to reload the page. c. The updated index.html page is displayed with your changes dynamically picked up The application code changes were detected and dynamically applied to the running instance of the Liberty server. Updating the Server configuration without restarting the server The Open Liberty Maven plug-in\u2019s dev goal not only listens for application code changes, but also configuration changes in the project. The Open Liberty server automatically reloads the configuration without restarting. This goal allows for quicker turnarounds and an improved developer experience. In this section, you make a simple configuration change in the Liberty Server configuration file (server.xml) of the project (src), to include a /health endpoint for the service. You will notice that the changes are detected by maven and dynamically updated on the target server.xml. The running Liberty instance automatically picks up the changed target configuration If you try to access this /health endpoint now, you see a 404 error because the /health endpoint does not yet exist: From the Firefox browser in the VM, try to access the applications /health endpoint at: <http://localhost:9080/health/> Make a simple change to the Liberty Server configuration file to add the mpHealth-2.2 feature to the server.xml file, which enables the health check endpoint. a From a terminal window, navigate to liberty/config folder of the application cd /home/ibmdemo/Student/labs/devmode/demo-project/src/main/liberty/config b. Use the gedit editor to open the server.xml file in edit mode gedit server.xml c. Add the Make the following minor change to the server.xml file Change the highlighted line: Updated to include: \\<feature>mpHealth-2.2\\</feature> d. Save the file and close the gedit editor. Access the new Health Endpoint for the application. a. Open the Firefox Web Browser from inside of the VM and go to the URL below to display the health endpoint. http://localhost:9080/health View the Liberty server console log to see the mpHealth-2.2 feature was installed, and the health endpoint enabled. a. Return to the Terminal window where the mvn liberty:dev is running. b. Review the messages that indicate the mpHealth-22 feature was dynamically installed and the /health endpoint enabled. The Liberty server configuration changes were detected and dynamically applied to the running instance of the Liberty server. The /health endpoint reports whether the server is running, but the endpoint doesn\u2019t provide any details on the microservices that are running inside of the server. MicroProfile Health offers health checks for both readiness and liveness. A readiness check allows third-party services, such as Kubernetes, to know if the microservice is ready to process requests. A liveness check allows third-party services to determine if the microservice is running. Note: Working with MicroProfile Health is beyond the scope of this lab and is introduced in a subsequent lab. Developing and Running the application in a Docker Container and in Liberty Dev Mode When developing an application that will eventually be deployed to production in containers , you can avoid potential issues by ensuring that your development and production environments are as similar as possible. This aligns with Twelve Factor App methodology, particularly factor 10, which calls for dev/prod parity. For cloud-native applications, part of this issue is addressed by using containers where your environment can be codified to provide consistency between development and production. In this section of the lab, you will use Liberty dev mode with containers . With container support, you can develop applications on your local environment while your Open Liberty server runs in a container. The development container image is kept as similar as possible to the production container image, while still allowing for iterative development. Your code changes are automatically hot deployed to the container and picked up by the running server. Additionally, dev mode allows you run tests either automatically or on demand, and you can attach a debugger at any time to debug your application. With container support for Open Liberty dev mode, you can use the same Dockerfile for both development and production. You use the same base image and customizations, and you specify the exact configuration files that you need for your application in your Dockerfile. This prevents you from running into any surprises when you deploy your application to production. Dev mode changes how the image is built and run to enable iterative development, so the images are identical except for how application and configuration files are mounted into the containers. With dev mode, simply save a source file in any text editor or IDE, and it is recompiled and picked up without any need to rebuild the image or restart the server. Investigate Docker Commands and Dockerfile for building images This section is a primer on how to use, build, deploy and run Liberty in a Docker container. You will pull Liberty from Docker hub, install it, review information about the container, access resources inside the container, add an application then test it. To run the application in a container, Docker needs to be installed and the Docker daemon running. In this lab environment, these prerequisites have been configured. Open a Terminal window and verify that Docker is running docker --version Run the hello-world docker sample. The docker image will be pulled from Dockerhub if it is not already on the local machine. If Docker is functioning properly, you will see the highlighted message illustrated below, stating that Docker is working properly. docker run --name hello-world hello-world | Use the docker images command to find out which Docker images are in the local docker repository docker images Use the docker history command to view the layers that make up the Docker image docker history hello-world Let\u2019s run a Liberty image Docker container. Docker will check if there is an image in the repository. If not, it will download the latest image, then run it docker run -d -p 9086:9080 --name wlp websphere-liberty Review the containers information. a. The docker ps command lists only running containers. The docker ps -a command shows all containers, running or stopped. docker ps b. The docker stats command shows resource usage of the running containers. Use the Ctrl + C keys to stop stats docker stats Open the Firefox browser on the VM and access Liberty running in the container: http://localhost:9086 Look at the Liberty logs in the running container docker logs -f wlp Stop and remove the docker containers used in this section of the lab. Then use the docker ps -a command to verify the containers are removed. docker stop wlp docker rm wlp</p> docker rm hello-world</p> docker ps -a</p></td> Running the application in a container To run the application in a container, Docker needs to be installed and the Docker daemon running. In this lab environment, these prerequisites have been configured. First, to containerize the application, you need a Dockerfile . This file contains a collection of instructions that define how a Docker image is built, what files are packaged into it, what commands run when the image runs as a container, and other information. For this lab, a Dockerfile has been provided to build the docker image for the System Properties Sample. This Dockerfile copies the .war file into a Docker image that contains the Java runtime and a preconfigured Open Liberty server. From a Terminal window, STOP the running Liberty Server from the previous section of the lab, using the commands below: cd /home/ibmdemo/Student/labs/devmode/demo-project mvn liberty:stop View the Dockerfile that is used to build the docker image. a. Open a terminal window and change to the directory: /home/ibmdemo/Student/labs/devmode/demo-project cd /home/ibmdemo/Student/labs/devmode/demo-project b. Investigate the Dockerfile cat Dockerfile | The Dockerfile performs the following tasks: Read below for a short description and details of the commands in the Dockerfile: FROM openliberty/open-liberty:kernel-java8-openj9-ubi FROM specifies the Docker image that is to be used. If this is not in the local repository, this will be pulled from Docker Hub. In this example, we pull the liberty kernel image that contains Java 8, and uses the RedHat Universal base Images for deployments to OpenShift. The kernel image contains just the Liberty kernel and no additional runtime features. This image is the recommended basis for custom built images, so that they can contain only the features required for a specific application ARG VERSION=1.0 and ARG REVISION=SNAPSHOT The ARG instruction defines variables that can be passe at build time. Once it is defined in the Dockerfile, you can pass it with the flag --build-arg . LABEL Labels are used in Dockerfile to help organize your Docker Images. Labels are key-value pairs and simply adds custom metadata to your Docker Images. COPY --chown=1001:0 src/main/liberty/config/ /config/ The COPY command copies the liberty configuration file (server.xml) to the /config folder in the Liberty container. The RedHat Universal Base Images (UBI) are built such that Liberty does not run as root. To ensure that Liberty can access the files that are copied to the image, they must be owned by a non-root user. All Liberty images from IBM contain a non- root user defined as 1001:0 . So the copy command copies the files as the non-root user that is known to exist on the LIBERTY image. COPY --chown=1001:0 target/*.war /config/apps/ The COPY command copies the application WAR file to the /config/apps directory on the image. RUN configure.sh The configure.sh script installs the required Liberty features based on the features defined in the server configuration file (server.xml). This script is baked into ALL Liberty and tWAS Docker images provided by IBM. Run the mvn package command from the demo-project directory. The command will produce a war file named \" guide-getting-started.war \u201d and copied to the \u201c target \u201d directory. mvn package The Maven package command builds the application and produces an application deployable binary \u201c.war\u201d file that is copied into the Docker image via the Dockerfile. Run the following command to download or update to the latest Open iberty Docker image used in our Dockerfile: docker pull openliberty/open-liberty:kernel-java8-openj9-ubi Note: The image has already been pulled onto this VM. So, you may only see a message indicating the image is already up to date, rather than pulling the image again. OR, you might see this message if the latest image is already pulled. To build and containerize the application, run the following Docker build command. Be sure you are in the directory that contains the Docker file. Note: The dot at the end of the docker build command is part of the command, indicating to use the current directory path. cd /home/ibmdemo/Student/labs/devmode/demo-project docker build -t openliberty-getting-started:1.0-SNAPSHOT . The Docker openliberty-getting-started:1.0-SNAPSHOT image is built from the Dockerfile . To verify that the image is built, run the docker images command to list all local Docker images docker images Your image should be listed as \u201c openliberty-getting-started \u201d with the TAG of \u201c 1.0-SNAPSHOT \u201d Next, run the container from the image. docker run -d --name gettingstarted-app -p 9080:9080 openliberty-getting-started:1.0-SNAPSHOT There is a bit going on in that command; so, here is a short description of the parameters on the command. And the final argument on the command is the Docker image name. Run the docker ps command to verify your docker container is running docker ps From a Web Browser, access the application using: http://localhost:9080/system/properties Stop and Remove the Docker container docker stop gettingstarted-app docker rm gettingstarted-app Remove the Docker image docker rmi openliberty-getting-started:1.0-SNAPSHOT Using Dev mode to develop an application in a Docker container The Open Liberty Maven plug-in includes a devc goal that simplifies developing your application in a Docker container by starting dev mode with container support. This devc goal builds a Docker image, mounts the required directories, binds the required ports, and then runs the application inside of a container. Dev mode also listens for any changes in the application source code or configuration and rebuilds the image and restarts the container as necessary. Build and run the container by running the devc goal from the start directory: mvn liberty:devc a. When you see the massage: \u201c liberty is running in dev mode \u201d, Open Liberty is ready to run in dev mode: Open another Terminal window and run the docker ps command to verify that the container is started. docker ps From a Web Browser, access the application using: http://localhost:9080/system/properties Dev mode automatically picks up changes that you make to your application and allows you to run tests by pressing the enter/return key in the active command-line session. Run the integration test that is included in the application project. Note: The test case simply creates a client and invokes the http://localhost:9080/sste/properties endpoint. The expected HTTP response code is 200, which indicates a successful http response from the system/properties service. The test case will fail if the response code is anything other than 200. a. From the Terminal window that the mvn liberty:devc is running, press the ENTER key to run the tests. You will see that the test runs with no failures, as illustrated below. IMPORTANT: Next, you will introduce a change to the system/properties endpoint, which will break the test. In this lab, you will not go into detail on the test cases themselves because you will explore testing in greater detail in a subsequent lab when working with Liberty dev mode in the VS Code IDE. Update the server.xml file to change the context root from / to /dev a. From a terminal window, navigate to the liberty config folder of the application cd /home/ibmdemo/Student/labs/devmode/demo-project/src/main/liberty/config b. Use the gedit editor to open the index.html file in edit mode gedit server.xml c. Make the following minor change to the index.html page Change the highlighted line: Updated to read: contextRoot=\u201d/ dev \u201d /> d. Save the file and close the gedit editor. After you SAVE the file changes, Open Liberty automatically reloads its configuration. You can access the application at: http://localhost:9080/dev/system/properties Notice that context root is now /dev IMPORTANT: We encountered situations where the container got mapped to Docker host port 9081 instead of 9080. This happens when the new container comes up before the old container ports have been freed. To get the container back to port 9080, devc or do a minor change to the server.xml.. Rerun the integration test that is included in the application roject. a. From the Terminal window that the mvn liberty:devc is running, press the ENTER key to run the tests. You will see that the test runs, but now FAILS because a 404 HTTP response code was returned, using the original context root. Note: For the test case to PASS , the test case itself would need to be updated to reflect invoking the system/properties service using the new /dev context root. This activity is beyond the scope of this lab. However, you will explore the tests in greater detail in a subsequent lab. Lab cleanup and completion Exit Liberty devc mode a. When you are finished, exit dev mode by pressing CTRL+C in the command-line session that the container was started from, or by typing q and then pressing the enter/return key. Note: Either of these options stops and removes the container. b. To check that the container was stopped, run the docker ps command. docker ps Congratulations ! You have successfully completed the lab \u201cGetting Started with Liberty and Dev Mode. In this exercise, you learned how developers can use Liberty in \u201cdev\u201d mode for achieving efficient iterative develop, test, debug cycle when developing Java based applications / microservices. You explored: Using Liberty dev mode (stand-alone) without an IDE Hot reloading of application code and configuration changes using dev mode Working with Liberty dev mode in containers Running integrated unit/integration tests from Liberty dev mode ===== END OF LAB =====","title":"Modern Development experience with Liberty and Java applications"},{"location":"lab-guides/md/lab3/Lab03-Liberty_devmode_v1.4/#modern-development-experience-with-liberty-and-java-applications","text":"","title":"Modern Development experience with Liberty and Java applications"},{"location":"lab-guides/md/lab3/Lab03-Liberty_devmode_v1.4/#lab-getting-started-with-liberty-and-dev-mode","text":"","title":"Lab: Getting Started with Liberty and Dev Mode"},{"location":"lab-guides/md/lab3/Lab03-Liberty_devmode_v1.4/#objectives","text":"In this exercise, you will learn how developers can use Liberty in \u201cdev\u201d mode for achieving efficient iterative develop, test, debug cycle when developing Java based applications / microservices. At the end of this lab you should be able to: Use Liberty dev mode (stand-alone) without an IDE Experience hot reloading of application code and configuration changes using dev mode Work with Liberty dev mode in containers Run integrated unit/integration tests from Liberty dev mode You will need an estimated 45 to 60 minutes to complete this lab.","title":"Objectives"},{"location":"lab-guides/md/lab3/Lab03-Liberty_devmode_v1.4/#lab-requirements","text":"Use the lab environment that we prepared for this lab. It already has the prerequisite software installed and configured.","title":"Lab requirements"},{"location":"lab-guides/md/lab3/Lab03-Liberty_devmode_v1.4/#introduction-liberty-and-dev-mode","text":"Open Liberty is an application server designed for the cloud. It\u2019s small, lightweight, and designed with modern cloud-native application development in mind. Open Liberty supports the full MicroProfile and Jakarta EE APIs and is composable, meaning that you can use only the features that you need, keeping the server lightweight, which is great for microservices. It also deploys to every major cloud platform, including Docker, Kubernetes, and Cloud Foundry. Maven is an automation build tool that provides an efficient way to develop Java applications. Using Maven, you will build a simple microservice, called system , that collects basic system properties from your laptop and displays them on an endpoint that you can access in your web browser. Open Liberty development mode , or dev mode, allows you to develop applications with any text editor or IDE by providing hot reload and deployment, on demand testing, and debugger support. Open Liberty Dev Mode is enabled through Maven and Gradle projects. Your code is automatically compiled and deployed to your running server, making it easy to iterate on your changes. You can run tests on demand or even automatically so that you can get immediate feedback on your changes. You can also attach a debugger at any time to debug your running application.","title":"Introduction - Liberty and \"dev\" Mode"},{"location":"lab-guides/md/lab3/Lab03-Liberty_devmode_v1.4/#the-lab-environment","text":"One (1) Linux VM has been provided for this lab. The \u201cLiberty vPOT \u2026 Desktop\u201d VM has the following software available: Application Project with Liberty Maven 3.6.0 The login credentials for the Liberty vPOT \u2026 Desktop\u201d VM are: User ID: ibmdemo Password: passw0rd (That is a numeric zero in passw0rd)","title":"The lab environment"},{"location":"lab-guides/md/lab3/Lab03-Liberty_devmode_v1.4/#login-to-the-liberty-vpot-desktop-vm-and-get-started","text":"If the VM is not already started, start it by clicking the Play button. After the VM is started, click the \u201cLiberty vPOT \u2026 Desktop\u201d VM icon to access it. Login with ibmdemo ID. a. Click on the \u201c ibmdemo \u201d icon on the Ubuntu screen. b. When prompted for the password for \u201cibmdemo\u201d user, enter \u201c passw0rd \u201d as the password: Password: passw0rd (lowercase with a zero instead of the o) Resize the Skytap environment window for a larger viewing area while doing the lab. From the Skytap menu bar, click on the \u201c Fit to Size \u201d icon. This will enlarge the viewing area to fit the size of your browser window.","title":"Login to the \"Liberty vPOT \u2026 Desktop\" VM and Get Started"},{"location":"lab-guides/md/lab3/Lab03-Liberty_devmode_v1.4/#if-at-aytime-during-the-lab-you-ar-asked-to-install-updates-click-cancel","text":"Important: Click CANCEL \u2026. If, at any time during the lab, you get a pop-up asking to install updated software onto the Ubuntu VM. The one we experience is an update available for VS Code. CLICK CANCEL!","title":"If, at aytime during the lab, you ar asked to install updates, click CANCEL!"},{"location":"lab-guides/md/lab3/Lab03-Liberty_devmode_v1.4/#getting-started-with-liberty-and-dev-mode","text":"In this lab, you will learn how to run and update a simple REST microservice on an Open Liberty server using the developer mode (dev mode). You will use Maven throughout the guide to build and run the microservice as well as to interact with the running server instance.","title":"Getting Started with Liberty and Dev Mode"},{"location":"lab-guides/md/lab3/Lab03-Liberty_devmode_v1.4/#building-and-running-the-application-using-maven-and-the-liberty-maven-plugin","text":"The sample application used in this lab is configured to be built with Maven. Every Maven-configured project contains a pom.xml file, which defines the project configuration, dependencies, plug-ins, and so on. Your pom.xml file is located in the root directory of the project and is configured to include the liberty-maven-plugin, which allows you to install applications into Open Liberty and manage the server instances. To begin, navigate to the project directory. Build the \u201c system\u201d microservice that is provided and deploy it to Open Liberty by running the Maven liberty:run goal: Navigate to the project directory. Build the \u201c system\u201d microservice that is provided and deploy it to Open Liberty by running the Maven liberty:run goal: a. Open a terminal window and change to the directory /home/ibmdemo/Student/labs/devmode/demo-project cd /home/ibmdemo/Student/labs/devmode/demo-project b. Run the mvn libert:run command to start the Liberty server mvn liberty:run The mvn command initiates a Maven build , during which the target directory is created to store all build-related files. The liberty:run argument specifies the Open Liberty run goal,which starts an Open Liberty server instance in the foreground. As part of this phase, an Open Liberty server runtime is downloaded and installed into the target/liberty/wlp directory, a server instance is created and configured in the target/liberty/wlp/usr/servers/defaultServer directory, and the application is installed into that server. When the server begins starting up, various messages display in your command-line session. Wait for the following message, which indicates that the server startup is complete: The server defaultServer is ready to run a smarter planet. Access the \u201csystem\u201d microservice that was deployed to the Liberty server. a. Open the Firefox Web Browser from inside of the VM and go to the URL below. The microservice lists various system properties of your JVM. http://localhost:9080/system/properties Stop the Liberty Server by pressing the CTRL+C in the command-line session where you ran the server. Start and Stop the Liberty server in the background Although you can start and stop the server in the foreground by using the Maven liberty:run goal, you can also start and stop the server in the background with the Maven liberty:start and liberty:stop goals: mvn liberty:start mvn liberty:stop View the pom.xml file to see the liberty-maven-plugin that was > used by the previous steps. a. From a Terminal window, navigate to the following directory cd /home/ibmdemo/Student/labs/devmode/demo-project b. View the relevant plugin in the pom.xml file. The -A and -B options on the grep command display the specified number of lines before and after the location of the search text string. cat pom.xml | grep -B 4 -A 2 liberty-maven-plugin Information: Tip: Additional information on the liberty-maven-plugin can be found here: https://github.com/OpenLiberty/ci.maven","title":"Building and running the application using Maven and the liberty-maven-plugin"},{"location":"lab-guides/md/lab3/Lab03-Liberty_devmode_v1.4/#updating-the-application-without-restarting-the-server","text":"The Open Liberty Maven plug-in includes a dev goal that listens for any changes in the project, including application source code or configuration changes. The Open Liberty server automatically reloads the application and configuration without restarting. This goal allows for quicker turnarounds and an improved developer experience. Start the Liberty server in \u201cdev\u201d mode a. From a Terminal window, navigate to the following directory cd /home/ibmdemo/Student/labs/devmode/demo-project b. Ensure the Liberty server is STOPPED! mvn liberty:stop c. Start Liberty in dev mode mvn liberty:dev Note: The Liberty is now started in dev mode. Dev mode automatically picks up changes that you make to your application and allows you to run tests by pressing the enter/return key in the active command-line session. When you\u2019re working on your application, rather than rerunning Maven commands, press the enter/return key to verify your change, which executes your tests. Access the \u201csystem\u201d microservice that was deployed to the Liberty server. a. Open the Firefox Web Browser from inside of the VM and go to the URL below to display the main application web page http://localhost:9080/ Make a minor change to the \u201csystem Properties Sample\u201d source code while running in dev mode, to see the changes dynamically picked up and applied to the running server. a. Open a new terminal window and navigate to src/main/webapp folder of the application as illustrated below. cd /home/ibmdemo/Student/labs/devmode/demo-project/src/main/webapp b. Use the gedit editor to open the index.html file in edit mode gedit index.html c. Make the following minor change to the index.html page Change the highlighted line: Updated to read: System Properties Demo d. Save the file and close the gedit editor. Access the System Properties Sample microservice that was deployed to the Liberty server. a. From the Firefox Web Browser inside of the VM and go to the URL below to display the main application web page http://localhost:9080/ b. IMPORTANT : Click the RELOAD icon in the Firefox browser to reload the page. Browsers cache content, so you need to reload the page. c. The updated index.html page is displayed with your changes dynamically picked up The application code changes were detected and dynamically applied to the running instance of the Liberty server.","title":"Updating the application without restarting the server"},{"location":"lab-guides/md/lab3/Lab03-Liberty_devmode_v1.4/#updating-the-server-configuration-without-restarting-the-server","text":"The Open Liberty Maven plug-in\u2019s dev goal not only listens for application code changes, but also configuration changes in the project. The Open Liberty server automatically reloads the configuration without restarting. This goal allows for quicker turnarounds and an improved developer experience. In this section, you make a simple configuration change in the Liberty Server configuration file (server.xml) of the project (src), to include a /health endpoint for the service. You will notice that the changes are detected by maven and dynamically updated on the target server.xml. The running Liberty instance automatically picks up the changed target configuration If you try to access this /health endpoint now, you see a 404 error because the /health endpoint does not yet exist: From the Firefox browser in the VM, try to access the applications /health endpoint at: <http://localhost:9080/health/> Make a simple change to the Liberty Server configuration file to add the mpHealth-2.2 feature to the server.xml file, which enables the health check endpoint. a From a terminal window, navigate to liberty/config folder of the application cd /home/ibmdemo/Student/labs/devmode/demo-project/src/main/liberty/config b. Use the gedit editor to open the server.xml file in edit mode gedit server.xml c. Add the Make the following minor change to the server.xml file Change the highlighted line: Updated to include: \\<feature>mpHealth-2.2\\</feature> d. Save the file and close the gedit editor. Access the new Health Endpoint for the application. a. Open the Firefox Web Browser from inside of the VM and go to the URL below to display the health endpoint. http://localhost:9080/health View the Liberty server console log to see the mpHealth-2.2 feature was installed, and the health endpoint enabled. a. Return to the Terminal window where the mvn liberty:dev is running. b. Review the messages that indicate the mpHealth-22 feature was dynamically installed and the /health endpoint enabled. The Liberty server configuration changes were detected and dynamically applied to the running instance of the Liberty server. The /health endpoint reports whether the server is running, but the endpoint doesn\u2019t provide any details on the microservices that are running inside of the server. MicroProfile Health offers health checks for both readiness and liveness. A readiness check allows third-party services, such as Kubernetes, to know if the microservice is ready to process requests. A liveness check allows third-party services to determine if the microservice is running. Note: Working with MicroProfile Health is beyond the scope of this lab and is introduced in a subsequent lab.","title":"Updating the Server configuration without restarting the server"},{"location":"lab-guides/md/lab3/Lab03-Liberty_devmode_v1.4/#developing-and-running-the-application-in-a-docker-container-and-in-liberty-dev-mode","text":"When developing an application that will eventually be deployed to production in containers , you can avoid potential issues by ensuring that your development and production environments are as similar as possible. This aligns with Twelve Factor App methodology, particularly factor 10, which calls for dev/prod parity. For cloud-native applications, part of this issue is addressed by using containers where your environment can be codified to provide consistency between development and production. In this section of the lab, you will use Liberty dev mode with containers . With container support, you can develop applications on your local environment while your Open Liberty server runs in a container. The development container image is kept as similar as possible to the production container image, while still allowing for iterative development. Your code changes are automatically hot deployed to the container and picked up by the running server. Additionally, dev mode allows you run tests either automatically or on demand, and you can attach a debugger at any time to debug your application. With container support for Open Liberty dev mode, you can use the same Dockerfile for both development and production. You use the same base image and customizations, and you specify the exact configuration files that you need for your application in your Dockerfile. This prevents you from running into any surprises when you deploy your application to production. Dev mode changes how the image is built and run to enable iterative development, so the images are identical except for how application and configuration files are mounted into the containers. With dev mode, simply save a source file in any text editor or IDE, and it is recompiled and picked up without any need to rebuild the image or restart the server.","title":"Developing and Running the application in a Docker Container and in Liberty Dev Mode"},{"location":"lab-guides/md/lab3/Lab03-Liberty_devmode_v1.4/#investigate-docker-commands-and-dockerfile-for-building-images","text":"This section is a primer on how to use, build, deploy and run Liberty in a Docker container. You will pull Liberty from Docker hub, install it, review information about the container, access resources inside the container, add an application then test it. To run the application in a container, Docker needs to be installed and the Docker daemon running. In this lab environment, these prerequisites have been configured. Open a Terminal window and verify that Docker is running docker --version Run the hello-world docker sample. The docker image will be pulled from Dockerhub if it is not already on the local machine. If Docker is functioning properly, you will see the highlighted message illustrated below, stating that Docker is working properly. docker run --name hello-world hello-world | Use the docker images command to find out which Docker images are in the local docker repository docker images Use the docker history command to view the layers that make up the Docker image docker history hello-world Let\u2019s run a Liberty image Docker container. Docker will check if there is an image in the repository. If not, it will download the latest image, then run it docker run -d -p 9086:9080 --name wlp websphere-liberty Review the containers information. a. The docker ps command lists only running containers. The docker ps -a command shows all containers, running or stopped. docker ps b. The docker stats command shows resource usage of the running containers. Use the Ctrl + C keys to stop stats docker stats Open the Firefox browser on the VM and access Liberty running in the container: http://localhost:9086 Look at the Liberty logs in the running container docker logs -f wlp Stop and remove the docker containers used in this section of the lab. Then use the docker ps -a command to verify the containers are removed. docker stop wlp docker rm wlp</p> docker rm hello-world</p> docker ps -a</p></td>","title":"Investigate Docker Commands and Dockerfile for building images"},{"location":"lab-guides/md/lab3/Lab03-Liberty_devmode_v1.4/#running-the-application-in-a-container","text":"To run the application in a container, Docker needs to be installed and the Docker daemon running. In this lab environment, these prerequisites have been configured. First, to containerize the application, you need a Dockerfile . This file contains a collection of instructions that define how a Docker image is built, what files are packaged into it, what commands run when the image runs as a container, and other information. For this lab, a Dockerfile has been provided to build the docker image for the System Properties Sample. This Dockerfile copies the .war file into a Docker image that contains the Java runtime and a preconfigured Open Liberty server. From a Terminal window, STOP the running Liberty Server from the previous section of the lab, using the commands below: cd /home/ibmdemo/Student/labs/devmode/demo-project mvn liberty:stop View the Dockerfile that is used to build the docker image. a. Open a terminal window and change to the directory: /home/ibmdemo/Student/labs/devmode/demo-project cd /home/ibmdemo/Student/labs/devmode/demo-project b. Investigate the Dockerfile cat Dockerfile | The Dockerfile performs the following tasks: Read below for a short description and details of the commands in the Dockerfile: FROM openliberty/open-liberty:kernel-java8-openj9-ubi FROM specifies the Docker image that is to be used. If this is not in the local repository, this will be pulled from Docker Hub. In this example, we pull the liberty kernel image that contains Java 8, and uses the RedHat Universal base Images for deployments to OpenShift. The kernel image contains just the Liberty kernel and no additional runtime features. This image is the recommended basis for custom built images, so that they can contain only the features required for a specific application ARG VERSION=1.0 and ARG REVISION=SNAPSHOT The ARG instruction defines variables that can be passe at build time. Once it is defined in the Dockerfile, you can pass it with the flag --build-arg . LABEL Labels are used in Dockerfile to help organize your Docker Images. Labels are key-value pairs and simply adds custom metadata to your Docker Images. COPY --chown=1001:0 src/main/liberty/config/ /config/ The COPY command copies the liberty configuration file (server.xml) to the /config folder in the Liberty container. The RedHat Universal Base Images (UBI) are built such that Liberty does not run as root. To ensure that Liberty can access the files that are copied to the image, they must be owned by a non-root user. All Liberty images from IBM contain a non- root user defined as 1001:0 . So the copy command copies the files as the non-root user that is known to exist on the LIBERTY image. COPY --chown=1001:0 target/*.war /config/apps/ The COPY command copies the application WAR file to the /config/apps directory on the image. RUN configure.sh The configure.sh script installs the required Liberty features based on the features defined in the server configuration file (server.xml). This script is baked into ALL Liberty and tWAS Docker images provided by IBM. Run the mvn package command from the demo-project directory. The command will produce a war file named \" guide-getting-started.war \u201d and copied to the \u201c target \u201d directory. mvn package The Maven package command builds the application and produces an application deployable binary \u201c.war\u201d file that is copied into the Docker image via the Dockerfile. Run the following command to download or update to the latest Open iberty Docker image used in our Dockerfile: docker pull openliberty/open-liberty:kernel-java8-openj9-ubi Note: The image has already been pulled onto this VM. So, you may only see a message indicating the image is already up to date, rather than pulling the image again. OR, you might see this message if the latest image is already pulled. To build and containerize the application, run the following Docker build command. Be sure you are in the directory that contains the Docker file. Note: The dot at the end of the docker build command is part of the command, indicating to use the current directory path. cd /home/ibmdemo/Student/labs/devmode/demo-project docker build -t openliberty-getting-started:1.0-SNAPSHOT . The Docker openliberty-getting-started:1.0-SNAPSHOT image is built from the Dockerfile . To verify that the image is built, run the docker images command to list all local Docker images docker images Your image should be listed as \u201c openliberty-getting-started \u201d with the TAG of \u201c 1.0-SNAPSHOT \u201d Next, run the container from the image. docker run -d --name gettingstarted-app -p 9080:9080 openliberty-getting-started:1.0-SNAPSHOT There is a bit going on in that command; so, here is a short description of the parameters on the command. And the final argument on the command is the Docker image name. Run the docker ps command to verify your docker container is running docker ps From a Web Browser, access the application using: http://localhost:9080/system/properties Stop and Remove the Docker container docker stop gettingstarted-app docker rm gettingstarted-app Remove the Docker image docker rmi openliberty-getting-started:1.0-SNAPSHOT","title":"Running the application in a container"},{"location":"lab-guides/md/lab3/Lab03-Liberty_devmode_v1.4/#using-dev-mode-to-develop-an-application-in-a-docker-container","text":"The Open Liberty Maven plug-in includes a devc goal that simplifies developing your application in a Docker container by starting dev mode with container support. This devc goal builds a Docker image, mounts the required directories, binds the required ports, and then runs the application inside of a container. Dev mode also listens for any changes in the application source code or configuration and rebuilds the image and restarts the container as necessary. Build and run the container by running the devc goal from the start directory: mvn liberty:devc a. When you see the massage: \u201c liberty is running in dev mode \u201d, Open Liberty is ready to run in dev mode: Open another Terminal window and run the docker ps command to verify that the container is started. docker ps From a Web Browser, access the application using: http://localhost:9080/system/properties Dev mode automatically picks up changes that you make to your application and allows you to run tests by pressing the enter/return key in the active command-line session. Run the integration test that is included in the application project. Note: The test case simply creates a client and invokes the http://localhost:9080/sste/properties endpoint. The expected HTTP response code is 200, which indicates a successful http response from the system/properties service. The test case will fail if the response code is anything other than 200. a. From the Terminal window that the mvn liberty:devc is running, press the ENTER key to run the tests. You will see that the test runs with no failures, as illustrated below. IMPORTANT: Next, you will introduce a change to the system/properties endpoint, which will break the test. In this lab, you will not go into detail on the test cases themselves because you will explore testing in greater detail in a subsequent lab when working with Liberty dev mode in the VS Code IDE. Update the server.xml file to change the context root from / to /dev a. From a terminal window, navigate to the liberty config folder of the application cd /home/ibmdemo/Student/labs/devmode/demo-project/src/main/liberty/config b. Use the gedit editor to open the index.html file in edit mode gedit server.xml c. Make the following minor change to the index.html page Change the highlighted line: Updated to read: contextRoot=\u201d/ dev \u201d /> d. Save the file and close the gedit editor. After you SAVE the file changes, Open Liberty automatically reloads its configuration. You can access the application at: http://localhost:9080/dev/system/properties Notice that context root is now /dev IMPORTANT: We encountered situations where the container got mapped to Docker host port 9081 instead of 9080. This happens when the new container comes up before the old container ports have been freed. To get the container back to port 9080, devc or do a minor change to the server.xml.. Rerun the integration test that is included in the application roject. a. From the Terminal window that the mvn liberty:devc is running, press the ENTER key to run the tests. You will see that the test runs, but now FAILS because a 404 HTTP response code was returned, using the original context root. Note: For the test case to PASS , the test case itself would need to be updated to reflect invoking the system/properties service using the new /dev context root. This activity is beyond the scope of this lab. However, you will explore the tests in greater detail in a subsequent lab.","title":"Using Dev mode to develop an application in a Docker container"},{"location":"lab-guides/md/lab3/Lab03-Liberty_devmode_v1.4/#lab-cleanup-and-completion","text":"Exit Liberty devc mode a. When you are finished, exit dev mode by pressing CTRL+C in the command-line session that the container was started from, or by typing q and then pressing the enter/return key. Note: Either of these options stops and removes the container. b. To check that the container was stopped, run the docker ps command. docker ps Congratulations ! You have successfully completed the lab \u201cGetting Started with Liberty and Dev Mode. In this exercise, you learned how developers can use Liberty in \u201cdev\u201d mode for achieving efficient iterative develop, test, debug cycle when developing Java based applications / microservices. You explored: Using Liberty dev mode (stand-alone) without an IDE Hot reloading of application code and configuration changes using dev mode Working with Liberty dev mode in containers Running integrated unit/integration tests from Liberty dev mode ===== END OF LAB =====","title":"Lab cleanup and completion"},{"location":"lab-guides/md/lab4/Lab04-Liberty-VSCode_v1.4/","text":"Modern Development experience with Liberty and Java applications Lab: Using Open Liberty Tools with VS Code Objectives In this exercise, you will learn how developers can use Liberty in \u201cdev\u201d mode with VS Code Integrated Development Environment for achieving efficient iterative develop, test, debug cycle when developing Java based applications and microservices. At the end of this lab you should be able to: Experience using the Open Liberty Tools extension available in VS Code to efficiently develop, test, and debug Java cloud native applications. Experience hot reloading of application code and configuration changes using dev mode You will need an estimated 60 to 90 minutes to complete this lab. Lab requirements Use the lab environment that we prepared for this lab. It already has the prerequisite software installed and configured. Introduction \u2013 Open Liberty Tools extension for VS Code In a separate lab, you learned how Open Liberty dev mode can be run from a command line while allowing you to edit your code with any text editor or IDE. In this lab, you will use the \u201c Open Liberty Tools\u201d VS Code extension to start Open Liberty in development mode, make changes to your application while the server is up, run tests and view results, and even debug the application without leaving the editor. Your code is automatically compiled and deployed to your running server, making it easy to iterate on your changes. The Open Liberty Tools for VS Code contains the following key Features View liberty-maven-plugin projects in the workspace (version 3.1 or higher) View liberty-gradle-plugin projects in the workspace (version 3.0 or higher) Start/Stop Open Liberty Server in dev mode Start Open Liberty Server dev mode with custom parameters Run Unit and Integration tests View unit and integration test reports The Open Liberty Tools for VS Code has a dependency on the Tools for MicroProfile VS Code extension to support the development of MicroProfile based microservices. The Tools for MicroProfile VS Code extension has dependencies on the following: Java JDK (or JRE) 11 or more recent Language Support for Java by Red Hat VS Code extension. Liberty Maven Plugin The Liberty Maven Plugin provides several goals for managing a Liberty server and applications. Maven 3.5.0 or later is recommended to use the Liberty Maven Plugin. Enabling the Liberty Maven Plugin in your project, simply add the following XML Stanza to your pom.xml file. For detailed infromation about the Maven goals supported by the Liberty Maven Plugin, visit: https://github.com/OpenLiberty/ci.maven Interacting with dev mode Once the Liberty Maven Plugin is specified in your pom.xml file, your project name is then listed under the Liberty Dev Dashboard in the side panel in VS Code, as illustrated below. You can interact with dev mode by right-clicking on your project name and selecting one of the commands supported by the Open Liberty Tools extension. Liberty dev mode Commands The following commands can be selected from the drop-down menu after right-clicking on your project name in the Liberty Dev Dashboard. The lab environment One (1) Linux VM has been provided for this lab. The \u201cLiberty vPOT \u2026 Desktop\u201d VM has the following software available: Application Project with Liberty Maven 3.6.0 The login credentials for the Liberty vPOT \u2026 Desktop\u201d VM are: User ID: **ibmdemo** Password: **passw0rd (That is a numeric zero in passw0rd)** IMPORTANT: Using the lab environment provided, all the required VS code extensions and dependencies have been installed for you. This allows you to focus on the value of using the capabilities of the tools for fast, efficient inner-loop development, test, debug, of Java based applications and Microservices using Open Liberty in dev mode. Login to the \"Liberty vPOT \u2026 Desktop\" VM and Get Started If the VM is not already started, start it by clicking the Play button. After the VM is started, click the \u201cLiberty vPOT \u2026 Desktop\u201d VM icon to access it. Login with ibmdemo ID. a. Click on the \u201c ibmdemo \u201d icon on the Ubuntu screen. b. When prompted for the password for \u201cibmdemo\u201d user, enter \u201c passw0rd \u201d as the password: Password: passw0rd (lowercase with a zero instead of the o) Resize the Skytap environment window for a larger viewing area while doing the lab. From the Skytap menu bar, click on the \u201c Fit to Size \u201d icon. This will enlarge the viewing area to fit the size of your browser window. If, at aytime during the lab, you ar asked to install updates, click CANCEL! Important: Click CANCEL \u2026. If, at any time during the lab, you get a pop-up asking to install updated software onto the Ubuntu VM. The one we experience is an update available for VS Code. CLICK CANCEL! Getting Started with Open Liberty Tools in VS Code Liberty Dev mode allows you, as the developer, to focus on your code. When Open Liberty is running in dev mode, your code is automatically compiled and deployed to the running server, making it easy to iterate on your changes. In this lab, as a developer, you will experience using the Open Liberty Tools extension in VS Code to work with your code, run tests on demand, so that you can get immediate feedback on your changes. You will also work with integrated debugging tools and attach a Java debugger to debug your running application. From a developer perspective, this is a huge gain in efficiency, as all these iterative inner-loop development activities occur without ever leaving the integrated development environment (IDE). Review the VS Code extensions and projects pom.xm file used for this project The sample application used in this lab is configured to be built with Maven. Every Maven-configured project contains a pom.xml file, which defines the project configuration, dependencies, plug-ins, and so on. Your pom.xml file is in the root directory of the project and is configured to include the liberty-maven-plugin , which allows you to install applications into Open Liberty and manage the server instances. To begin, navigate to the project directory and review the IDE extensions and pom.xml file that is used for the \u201c system\u201d microservice that is provided in the lab. First, add the project folder to a VS Code Workspace Close all Terminal windows and Brower Tabs used in any previous lab. Navigate to the project directory and launch VS Code from the start \u201d folder of the project. a. Open a terminal window and change to the following directory: cd /home/ibmdemo/Student/labs/devmode/guide-getting-started/start Launch VS Code using the current directory as the root folder for the workspace code . When the VS Code UI launches, the Explorer view is shown. The \u201cSTART\u201d folder contains the source code for the project. Review the installed extensions in VS Code that are used for this lab. a. Click on the Extensions icon in the left navigation bar in VS Code. b. Expand the \u201cINSTALLED\u201d extensions section to list the extensions that are currently installed in this environment. The notable extensions used in this lab are: Open Liberty Tools Tools for MicroProfile Language Support for Java Debugger for Java c. Click on the \u201c open Liberty Tools \u201d extension to view its details. d. Notice the list of commands that are supported by the Open Liberty Tools extension. e. Scroll down to the \u201c Requirements \u201d section of the Open Liberty Tools details page. Notice the requirement for \u201cTools for MicroProfile\u201d to support development of Microservices that use MicroProfile APIs with Open Liberty. Information: The Tools for MicroProfile extension requires the components to be installed in the environment: f. Close the Open Liberty Tools Extension details page. Review the pom.xml file used to configure and build the \"system\u201d microservice. a. Click on the Explorer icon located on the left navigation bar in VS Code. b. Expand the START folder if it is not already expanded c. Click on the pom.xml file to open it in the editor pane d. Close any Pop-up boxes asking if you want to install extensions or switch views. Note: You may see additional pop-ups, just close them, or ignore them. e. Note the binary packaging of the Java application war file that is produced from the Maven Build. The WAR file produced will be named guide-getting-started version 1.0-SNAPSHOT. f. Default HTTP and HTTPS Ports are defined, and substituted into the server.xml file g. The Open Liberty Tools Plugin is enabled, with a supported version of 3.3.4 h. Plugin for running Tests is also added to the Maven configuration, that leverage the testing dependencies also defined in the pom.xml file. i. Close the pom.xml file Information: Tip: Additional information on the liberty-maven-plugin can be found here: https://github.com/OpenLiberty/ci.maven Using Open Liberty Tools in VS Code In this section of the lab, you will use the Open Liberty Tools i n VS Code to work with your code and run tests on demand, so that you can get immediate feedback on your changes. Important: For Open Liberty Tools (LIBERTY DEV DASHBOARD) VS Code provides extensions for Java to support the Java language features. VS Code for Java supports two modes. Lightweight mode Standard mode VS Code has a default configuration called \u201chybrid mode\u201d where a workspace is opened in Lightweight mode, but as needed, you are prompted to switch to Standard mode. The Tools for MicroProfile Extension, which is required for the Open Liberty Tools extension, requires the Java workspace to be opened in \u201c STANDARD \u201d mode. Otherwise the LIBERTY DEV DASHBOARD will not function properly. Tip: In this lab environment, the workspace is already configured to use Standard mode. For more details on VS Code for Java is available here: https://code.visualstudio.com/docs/java/java-project Use the Liberty Dev Dashboard to start the Liberty Server in dev mode a. In VS Code, expand the LIBERTY DEV DASHBOARD section b. Right-mouse click on the guide-getting-started Liberty Server c. Select Start from the menu to start the server d. The Terminal view opens, and you see the server log messages as the server starts. When the following message spear in the Terminal, the Liberty server is started. Run the system Properties sample application from a web browser a. Open the Firefox Browser from inside of the VM b. Go to http://localhost:9080 to verify the application is running. Developer experience Using Open Liberty Tools in VS Code The System Properties Sample application is up and running in the Liberty server. Next, as a developer, you want to implement a health check for the application. The developer experience is frictionless, as all code and configuration change the developer introduces, are automatically detected and the server and application are dynamically updated in the running server to reflect the updated code and configuration. Let\u2019s explore a couple of examples of the very efficient developer experience by implementing some new capability into our service. In this example, you will leverage the mpHealth-2.2 feature in Open Liberty, which implements the MicroProfile mpHealth-2.2 API, to implement the new health checks for the application. The mpHealth-2.2 feature provides a /health endpoint that represents a binary status, either UP or DOWN, of the microservices that are installed. To learn more about the MicroProfile mpHealth feature, visit: https://www.openliberty.io/docs/21.0.0.4/health-check-microservices.html Update the Liberty server configuration file (server.xml) to include the mpHealth-2.2 feature to begin implementing the health checks for the application. a. In the VS Code Explorer view, navigate to START -> src -> main -> liberty / config b. Click on server.xml to open the file in the editor pane c. Add the mpHealth-2.2 feature to the server.xml file using the text below: <feature\\>mpHealth-2.2\\</feature\\> d. Save and Close the server.xml file When the server.xml file is saved, the configuration changes are detected, and the server is dynamically updated, installing the new feature and updating the application in the running server. View the messages in the Terminal view, showing the feature being installed and the application being updated. Once the changes are saved, and the server is automatically updated, the new / health endpoint is available. From the Firefox browser in the VM access the /health endpoint to view the health status of the application. **http://localhost:9080/health** Currently, the basic health check provides a simple status indicating if the service is running, but not if it is healthy. In the next steps, you will implement a liveness check that implements logic that gathers memory and cpu usage information and reports the service DOWN in the health check if the system resources exceed a certain threshold. You will also implement a readiness check that checks external property configuration in the server.xml file, that is used to place the service in maintenance mode. And if the service is in maintenance mode, the service is marked DOWN from the health check. Copy an implementation of the SystemReadinessCheck.java to the project a. Open a Terminal window on the VM b. Run the following command to copy the SystemReadinessCheck.java to the project cp /home/ibmdemo/Student/labs/devmode/guide-getting-started/finish/src/main/java/io/openliberty/sample/system/SystemReadinessCheck.java /home/ibmdemo/Student/labs/devmode/guide-getting-started/start/src/main/java/io/openliberty/sample/system/SystemReadinessCheck.java < Information: For the purposes of the lab, the copy command above copies a fully implemented Readiness check from the \u201cfinished\u201d project, into the current working project. Review the SystemReadinessCheck.java i mplementation a. Return to the VS Code Explorer view b. Navigate to START > main > java / io / openliberty / sample / system c. Click on the SystemReadinessCheck.java file to open it in the editor pane The SystemReadinessCheck simply evaluates the \u201cinMaintenance \u201d ConfigProperty, which is implemented via the mpConfig MicroProfile feature, and configured in the Liberty Server\u2019s server.xml file. If the \u201cinMaintenance\u201d property is set to \u201c false \u201d the readiness check sets the Health Status to UP . If the inMaintenance property is set to \u201c true \u201d the status is set to DOWN . From the Firefox Browser in the VM, rerun the /health endpoint to view the health status of the application. http://localhost:9080/health Information: Did you notice that while implementing the new readiness check code in the application, that you did not have to restart the application or Liberty Server? The Open Liberty Tools detected the code changes in the project, and dynamically updated the application in the running server. Copy an implementation of the SystemLivenessCheck.java to the project a Open a Terminal window on the VM b. Run the following command to copy the SystemLivenessCheck.java to the project cp /home/ibmdemo/Student/labs/devmode/guide-getting-started/finish/src/main/java/io/openliberty/sample/system/SystemLivenessCheck.java /home/ibmdemo/Student/labs/devmode/guide-getting-started/start/src/main/java/io/openliberty/sample/system/SystemLivenessCheck.java Information: For the purposes of the lab, the copy command above copies a fully implemented Liveness check from the \u201cfinished\u201d project, into the current working project. Review the SystemLivenessCheck.java i mplementation a. Return to the VS Code Explorer view b. Navigate to START -> main -> java / io / openliberty / sample / system c. Click on the SystemLivenessCheck.java file to open it in the editor pane The SystemLivenessCheck evaluates the \u201cmemory\u201d and \u201ccpu\u201d resources used. If the \u201cmemory\u201d used is less than 90%, the liveness probe sets the status to UP. If the \u201cmemory\u201d used is greater than 90%, the liveness probe sets the status to DOWN. From the Firefox Browser in the VM, rerun the /health endpoint to view the health status of the application. http://localhost:9080/health Note: in the case where there are multiple health checks being performed, as in our example, ALL the health checks must have the UP status for the service to be marked UP. So, what happens when we change the inMaintenance property to\u201ctrue\u201d? Let\u2019s modify the external configuration to set the service in maintenance mode and see the results of the health checks. Modify the inMaintenance property in the server.xml file a. Return to the VS Code console and navigate to START -> src -> main -> liberty / config b. Click on server.xml to open the file in the editor c. Modify the inMaintenance variable value to \u201c true \u201d as illustrated below d. Save the server.xml file. The server configuration is dynamically updated to reflect the update. From the Firefox Browser in the VM, rerun the /health endpoint to view the health status of the application. http://localhost:9080/health In the server.xml file, change the inMaintenance variable back to false\u201d a. Save the server.xml file b. Close the server.xml editor view Rerun the /health endpoint to verify the service is now marked UP again. Running Tests using the Open Liberty Tools in VS Code In this section of the lab, you will make some simple changes to the sample application code and run test cases directly from the VS Code IDE using the built-in capabilities in the Open Liberty tools. To simulate a breaking change in the application code, you will modify the path to the service endpoint from /properties to /all-properties . Because the test case attempts to run the system service using the /properties path, the test case will fail and return an HTTP Code of 404, rather than the expected response code of 200. Since the developer is purposely introducing this change, the test case needs to be updated to reflect the new path to the service for the tests to pass. Use the Liberty Dev Dashboard to Run Tests against the System Properties Sample service. a. In VS Code, expand the LIBERTY DEV DASHBOARD section b. Right-mouse click on the guide-getting-started Liberty Server c. Select Run Test from the menu to run the tests d. In the Terminal view, you will see the results of the tests. One test was executed, and one test PASSED. Next, as a developer on the project, you have been asked to change the code to specify a different path to the \u201cproperties\u201d service. Doing so, has an impact on the tests. In the next few steps, you will make the code change, and update the tests to match the NEW expected results. Open the sytemResources.java in VS Code editor a. In VS Code Explorer view, expand START -> src -> main -> java / io / openliberty / sample / system b. Click on SystemResources.java to open it in the editor Update the @Path to the system properties service to specify a different service path a. From the editor, make the following change to the systemResources.java file: Change the highlighted line: Updated to read: @Path(\"/all-properties\") b. SAVE the file. The Liberty server and application are dynamically updated. c. Close the editor view for the SystemResource.java file From the Firefox browser, run the service using the NEW endpoint URL http://localhost:9080/system/all-properties Use the Liberty Dev Dashboard to Run Tests against the System Properties Sample service. a. In VS Code, expand the LIBERTY DEV DASHBOARD section b. Right-mouse click on the guide-getting-started Liberty Server c. Select Run Test from the menu to start the server d. Alternatively, you can run the tests by simply pressing the ENTER key in the Terminal window. Give it a try. The tests now FAIL . Use the Liberty Dev Dashboard to View integration test report . a. In VS Code, expand the LIBERTY DEV DASHBOARD section b. Right-mouse click on the guide-getting-started Liberty Server c. Select View integration test report from the menu View the test results details in the \u201c guide-getting-started Failsafe report \u201d that is now displayed the editor pane a. Notice that the test case failed b. Scroll to the bottom of the report to see the ERROR message that was produced from the failing test. c. The issue is obvious. Since we changed the endpoint path, the test case assertion failed because it got a HTTP response code of 404 (Not Found) when attempting to run the service using the original path of /properties. d. Close the Failsafe Report in the Editor pane NOTE: In this case, we expected the test case to fail. And as the developer, you must update the test case to match the expected results based on to your code change. Modify the test case that is included in the application project> to invoke the updated path to the service. a. From the Explorer view in VS Code, navigate to START -> src -> test / java / it /io /openliberty / sample b. Click on PropertiesEndpointIT.java to open it in an editor pane c. From the editor, make the following change to the PropertiesEndpointIT.java file: Change the highlighted line: \u201csystem/properties\u201d Updated to read: \u201csystem/all-properties\u201d d. SAVE and CLOSE the file. The Liberty server and application are dynamically updated. Rerun the tests by Pressing the ENTER key in the Terminal view. The test PASS. At this point, you have explored using the Liberty Developer Tools to develop code, make server configuration changes, and run test cases to get immediate feedback on the updates. Using the Open Liberty Tools in VS Code provides an integrated development environment where your updates were automatically detected and dynamically applied to the running server. This provides a rapid inner-loop development cycle for development and testing. In the next section of the lab, you will explore how simple it is to integrate application debugging in the same development environment without having to restart the Liberty server. OPTIONAL: Integrated debugging using the Open Liberty Tools in VS Code Application debugging is an important part of application development. Developers expect to easily and quickly iterate through dev \u2013 test \u2013 debug without having to leave the development environment or having to restart servers and applications for debugging. In this section of the lab, you will explore how easy it is for developers to debug their Java application using the integrated development environment and Open Liberty. Here are the basics steps for debugging Set a breakpoint in the source code Add a \u201cJava Attach\u201d in the launch configuration and set the debug port Go to Debug view and select the \u201cAttach\u201d configuration Click the Start debugging icon Run the application in the Browser The application stops at the breakpoint Step through the app in debug mode to explore the variables and code to resolve issues One of the key features of Visual Studio Code is its great debugging support. In this section of the lab, you will use VS Code debigger to debug the Java application running on Liberty server. In this scenario, you will set a breakpoint and debug the SystemLivenessCheck.java code that is executed when running the /health endpoint in the application. Open the SystemLivenessCheck.java in VS Code editor a. In VS Code Explorer view, expand START -> src -> main -> java / io / openliberty / sample / system b. Click on SystemLivenessCheck.java to open it in the editor Set a breakpoint in the code where the MemoryMaxBean variable is set a. Locate the line with the text: MemoryMXBean memBean = ManagementFactory.getMemoryMXBean(); b. Left-mouse click on the left side of the Line Number (31 in the screen shot) to set a breakpoint. A red dot will appear, indicating the breakpoint is set Create a new Java Attach configuration and specify the debug port 7777 a. Select Run > Add Configuration\u2026 from the main menu in VS Code A new file named launch.json file was created in the .vscode directory. You can see the new file in the explorer view. b. In the launch.json file that opened in the Editor view, click on the \u201c Add Configuration \u201d button located on the lower right corner of the screen. c. Select Java: Attach from the menu. d. A new configuration is added to the launch.json file, that includes a \u201c port\u201d parameter to attach the debugger for Open Liberty. Note: Open Liberty is configured to use debug port 7777 by default. Change the \u201cport\u201d parameter to 7777 a. From the editor, make the following change to the lauch.json file: Change the highlighted line: \"port\": \" \" Updated to read: \u201cport\u201d: 7777 Note\u201d Be sure to REMOVE the double quotes around 7777, as illustrated below. b. SAVE and CLOSE the file. The Liberty server and application are dynamically updated. Now, attach the new Java Attach configuration a. Switch to the Debug perspective in VS Code, by selecting the Debug Icon on the left side navigation menu b. Using the launch Drop-down menu in the Debug perspective, set the Launch action to the \u201c Attach \u201d configuration that you created. c. The \u201cAttach\u201d configuration is now selected. You are ready to debug. Click on the Start Icon to start the debugger. The debugger is now attached, and the CALL STACK and BREAKPOINTS are displayed in the Debug perspective, as illustrated below: From the Firefox Browser in the VM, run the /health endpoint to view the health status of the application. The application will stop at the breakpoint in the SystemLivenessCheck.java code. http://localhost:9080/health In VS Code\u2019s Debugger perspective, the application stopped at the breakpoint you set in the SystemLivenessCheck.java, as illustrated below. Now you can use the \u201cstep Over\u201d, \u201cStep In\u201d \u201cStep Out\u201d,\u201d Run\u201d or \u201cDisconnect\u201d actions. a. Click the \u201c Step Over \u201d to execute the existing line of code and step to the next line of code in the application. When you are finished stepping through the debugger and exploring the local variables, click the Disconnect \u201d icon to disconnect the debugger Use the Liberty Dev Dashboard to STOP the Liberty Server in dev mode a. In VS Code, expand the LIBERTY DEV DASHBOARD section b. Right-mouse click on the guide-getting-started Liberty Server c. Select Stop from the menu to stop the server Exit the VS Code UI a. Select File > Exit from the main menu in VS Code to Exit the UI Close all opened Terminal Windows and Browser tabs Congratulations! You have successfully used the Liberty Dev VS Code extension to start Open Liberty in development mode, make changes to your application and Liberty server configuration while the server is up, run tests and view results, and even debug the application without leaving the editor. As you explored the fast and efficient inner-loop development experience using the Open Liberty tools and VS Code IDE, your code was automatically compiled and deployed to your running server, making it easy to iterate on your changes. ===== END OF LAB =====","title":"Modern Development experience with Liberty and Java applications"},{"location":"lab-guides/md/lab4/Lab04-Liberty-VSCode_v1.4/#modern-development-experience-with-liberty-and-java-applications","text":"","title":"Modern Development experience with Liberty and Java applications"},{"location":"lab-guides/md/lab4/Lab04-Liberty-VSCode_v1.4/#lab-using-open-liberty-tools-with-vs-code","text":"","title":"Lab: Using Open Liberty Tools with VS Code"},{"location":"lab-guides/md/lab4/Lab04-Liberty-VSCode_v1.4/#objectives","text":"In this exercise, you will learn how developers can use Liberty in \u201cdev\u201d mode with VS Code Integrated Development Environment for achieving efficient iterative develop, test, debug cycle when developing Java based applications and microservices. At the end of this lab you should be able to: Experience using the Open Liberty Tools extension available in VS Code to efficiently develop, test, and debug Java cloud native applications. Experience hot reloading of application code and configuration changes using dev mode You will need an estimated 60 to 90 minutes to complete this lab.","title":"Objectives"},{"location":"lab-guides/md/lab4/Lab04-Liberty-VSCode_v1.4/#lab-requirements","text":"Use the lab environment that we prepared for this lab. It already has the prerequisite software installed and configured.","title":"Lab requirements"},{"location":"lab-guides/md/lab4/Lab04-Liberty-VSCode_v1.4/#introduction-open-liberty-tools-extension-for-vs-code","text":"In a separate lab, you learned how Open Liberty dev mode can be run from a command line while allowing you to edit your code with any text editor or IDE. In this lab, you will use the \u201c Open Liberty Tools\u201d VS Code extension to start Open Liberty in development mode, make changes to your application while the server is up, run tests and view results, and even debug the application without leaving the editor. Your code is automatically compiled and deployed to your running server, making it easy to iterate on your changes. The Open Liberty Tools for VS Code contains the following key Features View liberty-maven-plugin projects in the workspace (version 3.1 or higher) View liberty-gradle-plugin projects in the workspace (version 3.0 or higher) Start/Stop Open Liberty Server in dev mode Start Open Liberty Server dev mode with custom parameters Run Unit and Integration tests View unit and integration test reports The Open Liberty Tools for VS Code has a dependency on the Tools for MicroProfile VS Code extension to support the development of MicroProfile based microservices. The Tools for MicroProfile VS Code extension has dependencies on the following: Java JDK (or JRE) 11 or more recent Language Support for Java by Red Hat VS Code extension.","title":"Introduction \u2013 Open Liberty Tools extension for VS Code"},{"location":"lab-guides/md/lab4/Lab04-Liberty-VSCode_v1.4/#liberty-maven-plugin","text":"The Liberty Maven Plugin provides several goals for managing a Liberty server and applications. Maven 3.5.0 or later is recommended to use the Liberty Maven Plugin. Enabling the Liberty Maven Plugin in your project, simply add the following XML Stanza to your pom.xml file. For detailed infromation about the Maven goals supported by the Liberty Maven Plugin, visit: https://github.com/OpenLiberty/ci.maven","title":"Liberty Maven Plugin"},{"location":"lab-guides/md/lab4/Lab04-Liberty-VSCode_v1.4/#interacting-with-dev-mode","text":"Once the Liberty Maven Plugin is specified in your pom.xml file, your project name is then listed under the Liberty Dev Dashboard in the side panel in VS Code, as illustrated below. You can interact with dev mode by right-clicking on your project name and selecting one of the commands supported by the Open Liberty Tools extension.","title":"Interacting with dev mode"},{"location":"lab-guides/md/lab4/Lab04-Liberty-VSCode_v1.4/#liberty-dev-mode-commands","text":"The following commands can be selected from the drop-down menu after right-clicking on your project name in the Liberty Dev Dashboard.","title":"Liberty dev mode Commands"},{"location":"lab-guides/md/lab4/Lab04-Liberty-VSCode_v1.4/#the-lab-environment","text":"One (1) Linux VM has been provided for this lab. The \u201cLiberty vPOT \u2026 Desktop\u201d VM has the following software available: Application Project with Liberty Maven 3.6.0 The login credentials for the Liberty vPOT \u2026 Desktop\u201d VM are: User ID: **ibmdemo** Password: **passw0rd (That is a numeric zero in passw0rd)** IMPORTANT: Using the lab environment provided, all the required VS code extensions and dependencies have been installed for you. This allows you to focus on the value of using the capabilities of the tools for fast, efficient inner-loop development, test, debug, of Java based applications and Microservices using Open Liberty in dev mode.","title":"The lab environment"},{"location":"lab-guides/md/lab4/Lab04-Liberty-VSCode_v1.4/#login-to-the-liberty-vpot-desktop-vm-and-get-started","text":"If the VM is not already started, start it by clicking the Play button. After the VM is started, click the \u201cLiberty vPOT \u2026 Desktop\u201d VM icon to access it. Login with ibmdemo ID. a. Click on the \u201c ibmdemo \u201d icon on the Ubuntu screen. b. When prompted for the password for \u201cibmdemo\u201d user, enter \u201c passw0rd \u201d as the password: Password: passw0rd (lowercase with a zero instead of the o) Resize the Skytap environment window for a larger viewing area while doing the lab. From the Skytap menu bar, click on the \u201c Fit to Size \u201d icon. This will enlarge the viewing area to fit the size of your browser window.","title":"Login to the \"Liberty vPOT \u2026 Desktop\" VM and Get Started"},{"location":"lab-guides/md/lab4/Lab04-Liberty-VSCode_v1.4/#if-at-aytime-during-the-lab-you-ar-asked-to-install-updates-click-cancel","text":"Important: Click CANCEL \u2026. If, at any time during the lab, you get a pop-up asking to install updated software onto the Ubuntu VM. The one we experience is an update available for VS Code. CLICK CANCEL!","title":"If, at aytime during the lab, you ar asked to install updates, click CANCEL!"},{"location":"lab-guides/md/lab4/Lab04-Liberty-VSCode_v1.4/#getting-started-with-open-liberty-tools-in-vs-code","text":"Liberty Dev mode allows you, as the developer, to focus on your code. When Open Liberty is running in dev mode, your code is automatically compiled and deployed to the running server, making it easy to iterate on your changes. In this lab, as a developer, you will experience using the Open Liberty Tools extension in VS Code to work with your code, run tests on demand, so that you can get immediate feedback on your changes. You will also work with integrated debugging tools and attach a Java debugger to debug your running application. From a developer perspective, this is a huge gain in efficiency, as all these iterative inner-loop development activities occur without ever leaving the integrated development environment (IDE).","title":"Getting Started with Open Liberty Tools in VS Code"},{"location":"lab-guides/md/lab4/Lab04-Liberty-VSCode_v1.4/#review-the-vs-code-extensions-and-projects-pomxm-file-used-for-this-project","text":"The sample application used in this lab is configured to be built with Maven. Every Maven-configured project contains a pom.xml file, which defines the project configuration, dependencies, plug-ins, and so on. Your pom.xml file is in the root directory of the project and is configured to include the liberty-maven-plugin , which allows you to install applications into Open Liberty and manage the server instances. To begin, navigate to the project directory and review the IDE extensions and pom.xml file that is used for the \u201c system\u201d microservice that is provided in the lab. First, add the project folder to a VS Code Workspace Close all Terminal windows and Brower Tabs used in any previous lab. Navigate to the project directory and launch VS Code from the start \u201d folder of the project. a. Open a terminal window and change to the following directory: cd /home/ibmdemo/Student/labs/devmode/guide-getting-started/start Launch VS Code using the current directory as the root folder for the workspace code . When the VS Code UI launches, the Explorer view is shown. The \u201cSTART\u201d folder contains the source code for the project. Review the installed extensions in VS Code that are used for this lab. a. Click on the Extensions icon in the left navigation bar in VS Code. b. Expand the \u201cINSTALLED\u201d extensions section to list the extensions that are currently installed in this environment. The notable extensions used in this lab are: Open Liberty Tools Tools for MicroProfile Language Support for Java Debugger for Java c. Click on the \u201c open Liberty Tools \u201d extension to view its details. d. Notice the list of commands that are supported by the Open Liberty Tools extension. e. Scroll down to the \u201c Requirements \u201d section of the Open Liberty Tools details page. Notice the requirement for \u201cTools for MicroProfile\u201d to support development of Microservices that use MicroProfile APIs with Open Liberty. Information: The Tools for MicroProfile extension requires the components to be installed in the environment: f. Close the Open Liberty Tools Extension details page. Review the pom.xml file used to configure and build the \"system\u201d microservice. a. Click on the Explorer icon located on the left navigation bar in VS Code. b. Expand the START folder if it is not already expanded c. Click on the pom.xml file to open it in the editor pane d. Close any Pop-up boxes asking if you want to install extensions or switch views. Note: You may see additional pop-ups, just close them, or ignore them. e. Note the binary packaging of the Java application war file that is produced from the Maven Build. The WAR file produced will be named guide-getting-started version 1.0-SNAPSHOT. f. Default HTTP and HTTPS Ports are defined, and substituted into the server.xml file g. The Open Liberty Tools Plugin is enabled, with a supported version of 3.3.4 h. Plugin for running Tests is also added to the Maven configuration, that leverage the testing dependencies also defined in the pom.xml file. i. Close the pom.xml file Information: Tip: Additional information on the liberty-maven-plugin can be found here: https://github.com/OpenLiberty/ci.maven","title":"Review the VS Code extensions and projects pom.xm file used for this project"},{"location":"lab-guides/md/lab4/Lab04-Liberty-VSCode_v1.4/#using-open-liberty-tools-in-vs-code","text":"In this section of the lab, you will use the Open Liberty Tools i n VS Code to work with your code and run tests on demand, so that you can get immediate feedback on your changes. Important: For Open Liberty Tools (LIBERTY DEV DASHBOARD) VS Code provides extensions for Java to support the Java language features. VS Code for Java supports two modes. Lightweight mode Standard mode VS Code has a default configuration called \u201chybrid mode\u201d where a workspace is opened in Lightweight mode, but as needed, you are prompted to switch to Standard mode. The Tools for MicroProfile Extension, which is required for the Open Liberty Tools extension, requires the Java workspace to be opened in \u201c STANDARD \u201d mode. Otherwise the LIBERTY DEV DASHBOARD will not function properly. Tip: In this lab environment, the workspace is already configured to use Standard mode. For more details on VS Code for Java is available here: https://code.visualstudio.com/docs/java/java-project Use the Liberty Dev Dashboard to start the Liberty Server in dev mode a. In VS Code, expand the LIBERTY DEV DASHBOARD section b. Right-mouse click on the guide-getting-started Liberty Server c. Select Start from the menu to start the server d. The Terminal view opens, and you see the server log messages as the server starts. When the following message spear in the Terminal, the Liberty server is started. Run the system Properties sample application from a web browser a. Open the Firefox Browser from inside of the VM b. Go to http://localhost:9080 to verify the application is running.","title":"Using Open Liberty Tools in VS Code"},{"location":"lab-guides/md/lab4/Lab04-Liberty-VSCode_v1.4/#developer-experience-using-open-liberty-tools-in-vs-code","text":"The System Properties Sample application is up and running in the Liberty server. Next, as a developer, you want to implement a health check for the application. The developer experience is frictionless, as all code and configuration change the developer introduces, are automatically detected and the server and application are dynamically updated in the running server to reflect the updated code and configuration. Let\u2019s explore a couple of examples of the very efficient developer experience by implementing some new capability into our service. In this example, you will leverage the mpHealth-2.2 feature in Open Liberty, which implements the MicroProfile mpHealth-2.2 API, to implement the new health checks for the application. The mpHealth-2.2 feature provides a /health endpoint that represents a binary status, either UP or DOWN, of the microservices that are installed. To learn more about the MicroProfile mpHealth feature, visit: https://www.openliberty.io/docs/21.0.0.4/health-check-microservices.html Update the Liberty server configuration file (server.xml) to include the mpHealth-2.2 feature to begin implementing the health checks for the application. a. In the VS Code Explorer view, navigate to START -> src -> main -> liberty / config b. Click on server.xml to open the file in the editor pane c. Add the mpHealth-2.2 feature to the server.xml file using the text below: <feature\\>mpHealth-2.2\\</feature\\> d. Save and Close the server.xml file When the server.xml file is saved, the configuration changes are detected, and the server is dynamically updated, installing the new feature and updating the application in the running server. View the messages in the Terminal view, showing the feature being installed and the application being updated. Once the changes are saved, and the server is automatically updated, the new / health endpoint is available. From the Firefox browser in the VM access the /health endpoint to view the health status of the application. **http://localhost:9080/health** Currently, the basic health check provides a simple status indicating if the service is running, but not if it is healthy. In the next steps, you will implement a liveness check that implements logic that gathers memory and cpu usage information and reports the service DOWN in the health check if the system resources exceed a certain threshold. You will also implement a readiness check that checks external property configuration in the server.xml file, that is used to place the service in maintenance mode. And if the service is in maintenance mode, the service is marked DOWN from the health check. Copy an implementation of the SystemReadinessCheck.java to the project a. Open a Terminal window on the VM b. Run the following command to copy the SystemReadinessCheck.java to the project cp /home/ibmdemo/Student/labs/devmode/guide-getting-started/finish/src/main/java/io/openliberty/sample/system/SystemReadinessCheck.java /home/ibmdemo/Student/labs/devmode/guide-getting-started/start/src/main/java/io/openliberty/sample/system/SystemReadinessCheck.java < Information: For the purposes of the lab, the copy command above copies a fully implemented Readiness check from the \u201cfinished\u201d project, into the current working project. Review the SystemReadinessCheck.java i mplementation a. Return to the VS Code Explorer view b. Navigate to START > main > java / io / openliberty / sample / system c. Click on the SystemReadinessCheck.java file to open it in the editor pane The SystemReadinessCheck simply evaluates the \u201cinMaintenance \u201d ConfigProperty, which is implemented via the mpConfig MicroProfile feature, and configured in the Liberty Server\u2019s server.xml file. If the \u201cinMaintenance\u201d property is set to \u201c false \u201d the readiness check sets the Health Status to UP . If the inMaintenance property is set to \u201c true \u201d the status is set to DOWN . From the Firefox Browser in the VM, rerun the /health endpoint to view the health status of the application. http://localhost:9080/health Information: Did you notice that while implementing the new readiness check code in the application, that you did not have to restart the application or Liberty Server? The Open Liberty Tools detected the code changes in the project, and dynamically updated the application in the running server. Copy an implementation of the SystemLivenessCheck.java to the project a Open a Terminal window on the VM b. Run the following command to copy the SystemLivenessCheck.java to the project cp /home/ibmdemo/Student/labs/devmode/guide-getting-started/finish/src/main/java/io/openliberty/sample/system/SystemLivenessCheck.java /home/ibmdemo/Student/labs/devmode/guide-getting-started/start/src/main/java/io/openliberty/sample/system/SystemLivenessCheck.java Information: For the purposes of the lab, the copy command above copies a fully implemented Liveness check from the \u201cfinished\u201d project, into the current working project. Review the SystemLivenessCheck.java i mplementation a. Return to the VS Code Explorer view b. Navigate to START -> main -> java / io / openliberty / sample / system c. Click on the SystemLivenessCheck.java file to open it in the editor pane The SystemLivenessCheck evaluates the \u201cmemory\u201d and \u201ccpu\u201d resources used. If the \u201cmemory\u201d used is less than 90%, the liveness probe sets the status to UP. If the \u201cmemory\u201d used is greater than 90%, the liveness probe sets the status to DOWN. From the Firefox Browser in the VM, rerun the /health endpoint to view the health status of the application. http://localhost:9080/health Note: in the case where there are multiple health checks being performed, as in our example, ALL the health checks must have the UP status for the service to be marked UP. So, what happens when we change the inMaintenance property to\u201ctrue\u201d? Let\u2019s modify the external configuration to set the service in maintenance mode and see the results of the health checks. Modify the inMaintenance property in the server.xml file a. Return to the VS Code console and navigate to START -> src -> main -> liberty / config b. Click on server.xml to open the file in the editor c. Modify the inMaintenance variable value to \u201c true \u201d as illustrated below d. Save the server.xml file. The server configuration is dynamically updated to reflect the update. From the Firefox Browser in the VM, rerun the /health endpoint to view the health status of the application. http://localhost:9080/health In the server.xml file, change the inMaintenance variable back to false\u201d a. Save the server.xml file b. Close the server.xml editor view Rerun the /health endpoint to verify the service is now marked UP again.","title":"Developer experience Using Open Liberty Tools in VS Code"},{"location":"lab-guides/md/lab4/Lab04-Liberty-VSCode_v1.4/#running-tests-using-the-open-liberty-tools-in-vs-code","text":"In this section of the lab, you will make some simple changes to the sample application code and run test cases directly from the VS Code IDE using the built-in capabilities in the Open Liberty tools. To simulate a breaking change in the application code, you will modify the path to the service endpoint from /properties to /all-properties . Because the test case attempts to run the system service using the /properties path, the test case will fail and return an HTTP Code of 404, rather than the expected response code of 200. Since the developer is purposely introducing this change, the test case needs to be updated to reflect the new path to the service for the tests to pass. Use the Liberty Dev Dashboard to Run Tests against the System Properties Sample service. a. In VS Code, expand the LIBERTY DEV DASHBOARD section b. Right-mouse click on the guide-getting-started Liberty Server c. Select Run Test from the menu to run the tests d. In the Terminal view, you will see the results of the tests. One test was executed, and one test PASSED. Next, as a developer on the project, you have been asked to change the code to specify a different path to the \u201cproperties\u201d service. Doing so, has an impact on the tests. In the next few steps, you will make the code change, and update the tests to match the NEW expected results. Open the sytemResources.java in VS Code editor a. In VS Code Explorer view, expand START -> src -> main -> java / io / openliberty / sample / system b. Click on SystemResources.java to open it in the editor Update the @Path to the system properties service to specify a different service path a. From the editor, make the following change to the systemResources.java file: Change the highlighted line: Updated to read: @Path(\"/all-properties\") b. SAVE the file. The Liberty server and application are dynamically updated. c. Close the editor view for the SystemResource.java file From the Firefox browser, run the service using the NEW endpoint URL http://localhost:9080/system/all-properties Use the Liberty Dev Dashboard to Run Tests against the System Properties Sample service. a. In VS Code, expand the LIBERTY DEV DASHBOARD section b. Right-mouse click on the guide-getting-started Liberty Server c. Select Run Test from the menu to start the server d. Alternatively, you can run the tests by simply pressing the ENTER key in the Terminal window. Give it a try. The tests now FAIL . Use the Liberty Dev Dashboard to View integration test report . a. In VS Code, expand the LIBERTY DEV DASHBOARD section b. Right-mouse click on the guide-getting-started Liberty Server c. Select View integration test report from the menu View the test results details in the \u201c guide-getting-started Failsafe report \u201d that is now displayed the editor pane a. Notice that the test case failed b. Scroll to the bottom of the report to see the ERROR message that was produced from the failing test. c. The issue is obvious. Since we changed the endpoint path, the test case assertion failed because it got a HTTP response code of 404 (Not Found) when attempting to run the service using the original path of /properties. d. Close the Failsafe Report in the Editor pane NOTE: In this case, we expected the test case to fail. And as the developer, you must update the test case to match the expected results based on to your code change. Modify the test case that is included in the application project> to invoke the updated path to the service. a. From the Explorer view in VS Code, navigate to START -> src -> test / java / it /io /openliberty / sample b. Click on PropertiesEndpointIT.java to open it in an editor pane c. From the editor, make the following change to the PropertiesEndpointIT.java file: Change the highlighted line: \u201csystem/properties\u201d Updated to read: \u201csystem/all-properties\u201d d. SAVE and CLOSE the file. The Liberty server and application are dynamically updated. Rerun the tests by Pressing the ENTER key in the Terminal view. The test PASS. At this point, you have explored using the Liberty Developer Tools to develop code, make server configuration changes, and run test cases to get immediate feedback on the updates. Using the Open Liberty Tools in VS Code provides an integrated development environment where your updates were automatically detected and dynamically applied to the running server. This provides a rapid inner-loop development cycle for development and testing. In the next section of the lab, you will explore how simple it is to integrate application debugging in the same development environment without having to restart the Liberty server.","title":"Running Tests using the Open Liberty Tools in VS Code"},{"location":"lab-guides/md/lab4/Lab04-Liberty-VSCode_v1.4/#optional-integrated-debugging-using-the-open-liberty-tools-in-vs-code","text":"Application debugging is an important part of application development. Developers expect to easily and quickly iterate through dev \u2013 test \u2013 debug without having to leave the development environment or having to restart servers and applications for debugging. In this section of the lab, you will explore how easy it is for developers to debug their Java application using the integrated development environment and Open Liberty. Here are the basics steps for debugging Set a breakpoint in the source code Add a \u201cJava Attach\u201d in the launch configuration and set the debug port Go to Debug view and select the \u201cAttach\u201d configuration Click the Start debugging icon Run the application in the Browser The application stops at the breakpoint Step through the app in debug mode to explore the variables and code to resolve issues One of the key features of Visual Studio Code is its great debugging support. In this section of the lab, you will use VS Code debigger to debug the Java application running on Liberty server. In this scenario, you will set a breakpoint and debug the SystemLivenessCheck.java code that is executed when running the /health endpoint in the application. Open the SystemLivenessCheck.java in VS Code editor a. In VS Code Explorer view, expand START -> src -> main -> java / io / openliberty / sample / system b. Click on SystemLivenessCheck.java to open it in the editor Set a breakpoint in the code where the MemoryMaxBean variable is set a. Locate the line with the text: MemoryMXBean memBean = ManagementFactory.getMemoryMXBean(); b. Left-mouse click on the left side of the Line Number (31 in the screen shot) to set a breakpoint. A red dot will appear, indicating the breakpoint is set Create a new Java Attach configuration and specify the debug port 7777 a. Select Run > Add Configuration\u2026 from the main menu in VS Code A new file named launch.json file was created in the .vscode directory. You can see the new file in the explorer view. b. In the launch.json file that opened in the Editor view, click on the \u201c Add Configuration \u201d button located on the lower right corner of the screen. c. Select Java: Attach from the menu. d. A new configuration is added to the launch.json file, that includes a \u201c port\u201d parameter to attach the debugger for Open Liberty. Note: Open Liberty is configured to use debug port 7777 by default. Change the \u201cport\u201d parameter to 7777 a. From the editor, make the following change to the lauch.json file: Change the highlighted line: \"port\": \" \" Updated to read: \u201cport\u201d: 7777 Note\u201d Be sure to REMOVE the double quotes around 7777, as illustrated below. b. SAVE and CLOSE the file. The Liberty server and application are dynamically updated. Now, attach the new Java Attach configuration a. Switch to the Debug perspective in VS Code, by selecting the Debug Icon on the left side navigation menu b. Using the launch Drop-down menu in the Debug perspective, set the Launch action to the \u201c Attach \u201d configuration that you created. c. The \u201cAttach\u201d configuration is now selected. You are ready to debug. Click on the Start Icon to start the debugger. The debugger is now attached, and the CALL STACK and BREAKPOINTS are displayed in the Debug perspective, as illustrated below: From the Firefox Browser in the VM, run the /health endpoint to view the health status of the application. The application will stop at the breakpoint in the SystemLivenessCheck.java code. http://localhost:9080/health In VS Code\u2019s Debugger perspective, the application stopped at the breakpoint you set in the SystemLivenessCheck.java, as illustrated below. Now you can use the \u201cstep Over\u201d, \u201cStep In\u201d \u201cStep Out\u201d,\u201d Run\u201d or \u201cDisconnect\u201d actions. a. Click the \u201c Step Over \u201d to execute the existing line of code and step to the next line of code in the application. When you are finished stepping through the debugger and exploring the local variables, click the Disconnect \u201d icon to disconnect the debugger Use the Liberty Dev Dashboard to STOP the Liberty Server in dev mode a. In VS Code, expand the LIBERTY DEV DASHBOARD section b. Right-mouse click on the guide-getting-started Liberty Server c. Select Stop from the menu to stop the server Exit the VS Code UI a. Select File > Exit from the main menu in VS Code to Exit the UI Close all opened Terminal Windows and Browser tabs Congratulations! You have successfully used the Liberty Dev VS Code extension to start Open Liberty in development mode, make changes to your application and Liberty server configuration while the server is up, run tests and view results, and even debug the application without leaving the editor. As you explored the fast and efficient inner-loop development experience using the Open Liberty tools and VS Code IDE, your code was automatically compiled and deployed to your running server, making it easy to iterate on your changes. ===== END OF LAB =====","title":"OPTIONAL: Integrated debugging using the Open Liberty Tools in VS Code"},{"location":"lab-guides/md/lab5/","text":"Explore IBM Transformation Advisor data collection, app assessments, and deployment accelerators Hands-on scenario using TA\u2019s WebSphere Data collector, Java application assessment, and deployment accelerators for modernization to Liberty and containers Explore IBM Transformation Advisor This lab provides fundamental hands-on experience of the evaluation process of WebSphere application for their modernization journey to Liberty and container-based clouds. It shows the value of using Transformation Advisor (TA) to evaluate on-premises Java applications and identify a migration candidate for moving to the cloud. You will also learn how to use the deployment accelerators that TA generates to help deploy and run Java applications on Liberty and in containers. Upon completion of this lab, you will have gained experience using TA to quickly analyze on-premises Java applications without accessing their source code, estimate the effort in moving to container-based clouds, and using TA\u2019s deployment accelerators to accelerate your application modernization journey to Liberty and containers. IBM Cloud Transformation Advisor (Transformation Advisor) is an application modernization tool that is entitled through IBM WebSphere Hybrid Edition. Transformation Advisor helps you quickly evaluate on-premises Java EE applications for deployment to the cloud. The Transformation Advisor tool provides the following value: identify the Java EE programming models in the app. determine the complexity of apps by listing a high-level inventory of the content and structure of each app. highlight Java EE programming model and WebSphere API differences between the WebSphere profile types identify Java EE specification implementation differences that might affect the app generate accelerators for deploying the application to Liberty and containers in a target environment. Additionally, the tool provides a recommendation for the right-fit IBM WebSphere Application Server edition and offers advice, best practices, and potential solutions to assess the ease of moving apps to Liberty or newer versions of WebSphere traditional. It accelerates application migrating to cloud process, minimize errors and risks and reduce time to market. 1. Introduction As shown in the image below, your company has several web applications deployed to WebSphere Application Server (WAS) environment. Your company wants to move these applications to the modern WebSphere Liberty server on a container-based cloud. However, you are not sure how much effort the migration process might take. You decide to use the IBM Transformation Advisor to do a quick evaluation of these applications without their source code to identify a good candidate application to move to Liberty and container-based cloud. After determining a candidate application for modernization to WebSphere Liberty, you use the accelerators generated by TA to deploy and run the application to WebSphere Liberty on your local developer machine and in containers to validate the solution. 2. Objective The objectives of this lab are to: Learn how to collect Java application and configuration data using the Transformation Advisor Data Collector tool. Learn how to use the Transformation Advisor to evaluate the effort involved to modernize to Liberty and container-based clouds and identify good application candidates for modernization. Learn how to use the accelerators generated by Transformation Advisor to deploy a candidate application to WebSphere Liberty and containers. 3. Prerequisites The following prerequisites must be completed prior to beginning this lab: Familiarity with basic Linux commands Have internet access Have a SkyTap lab environment ready 4. The lab environment One Linux VM is included in the environment and has been provided for this lab. The Workstation-Liberty-TA-M2m VM will be referred as the \u201c workstation \u201d VM throughout the lab. The login credentials for the workstation VM are: User ID: ibmdemo Password: passw0rd Transformation Advisor (TA) has already been installed on the Workstation VM. TA local runs in Docker containers. Get started using Transformation Adviser for yourself: http://ibm.biz/cloudta 5. Lab Tasks In this lab, you will use the Transformation Advisor to identify a good candidate application for moving to WebSphere Liberty and containers. To identify which Java EE programming models are on the server, you would typically run the Transformation Advisor Data Collector tool against a WebSphere server or cell. For this lab, you will simulate the process of running the data collector which generates a \u201cdata collection\u201d which is a zip file containing the inventory of the application, structure of each application, the WebSphere server configuration required for the application, and various analysis reports. For this lab environment, the data collection zip archive file has already been generated. You will import that zip file into the Transformation Advisor UI for application analysis. Using Transformation Advisor, you will gain insights into potential migration issues that may need to be remediated if you move the application to Liberty and containers. Reviewing the analysis reports, you will determine the complexity of the development effort required and select a candidate application to migrate to Liberty in a container-based cloud. Here are the activities involved in this process: Simulate running the Transformation Advisor Data Collector tool against the WebSphere Application Server to get application data Upload the data collection zip archive file that was generated by the data collector, into Transformation Advisor UI for analysis. Review the analysis and reports that Transformation Advisor generates to identify the right candidate application for a rapid and cost-effective migration to Liberty and container-based cloud. 6. Execute Lab Tasks 6.1 Log in to the workstation VM and Get Started If the VM is not already started, start it by clicking the play button for the whole group. After the VMs are started, click the Workstation VM icon to access it. If you see a screen displaying only \u201c ibmdemo \u201d. Click on the screen to get to the password prompt to login. Login with ibmdemo ID. Click on the ibmdemo icon on the screen. When prompted for the password for ibmdemo , enter \" password \" as the password: Resize the Skytap environment window for a larger viewing area while doing the lab. From the Skytap menu bar, click on the \" Fit to Size \" icon. This will enlarge the viewing area to fit the size of your browser window. 6.2 The WebSphere applications to be assessed The illustration below shows the WebSphere applications that are deployed to the WebSphere Application Server (WAS) environment. We already ran the Transformation Advisor Data Collection tool against the WebSphere server and provided the resulting data collection zip archive file on the Workstation VM to be used in the lab. You will simulate the data collection process. However, not actually run the data collector since this lab environment does not have access to the WebSphere environment. As illustrated below, Transformation Advisor will collect the application data for the following five applications. During the analysis of these applications, you will gain important insights regarding these applications, their JEE technologies used, relative complexity of each application, and detailed analysis of the overall effort and complexity of moving each application to Liberty and container-based cloud environments. In the Enterprise Applications list above, you can see the applications that deployed to the WebSphere Application Server environment. Next, you use Transformation Advisor to analyze these applications to identify a good candidate to be moved to Liberty. 6.3 Launch Transformation Advisor (local) The Transformation Advisor can evaluate any Java based applications. In this lab, you are going to use it to evaluate whether the on-premises WebSphere application, Mod Resorts , is suitable to move to Liberty and what the effort might be to get it there. The Transformation Advisor is installed locally on the Workstation VM. Launch the Transformation Advisor tool using the steps below. From Workstation VM Desktop Tool Bar, click the Terminal icon to open a Terminal window. Clone the GitHub repo that includes artifacts required for this lab cd /home/ibmdemo git clone https://github.com/IBMTechSales/student-tech-academy-platform.git Once completed, the local lab artifacts repo is cloned at /home/ibmdemo/student-tech-academy-platform directory on the Workstation desktop. Launch the Transformation Advisor with commands: cd /home/ibmdemo/TA_LOCAL/transformationAdvisor/transformation-advisor-local-3.2.1 ./launchTransformationAdvisor.sh Wait for Transformation Advisor to initialize and display the action menu list. Type 5 and press Enter to start the Transformation Advisor . The Transformation Advisor application is started, right-click the application URL link and select Open Link to launch it in a web browser window This Transformation Advisor Home page is displayed in the Web Browser. In the next section, you will use the Transformation Advisor UI to download the data collector utility for the environment that the WebSphere Application Server would be running, such as Windows or Linux. 6.4 Download Transformation Advisor Data Collector utility Now the Transformation Advisor is running, you will download its Data Collector utility that would run on a WebSphere Application Server. To evaluate on-premises Java applications, you need to run Transformation Advisor Data Collector utility against the Application server environment. It will extract application information from the environment. The utility can be downloaded from the Transformation Advisor UI. From the Transformation Advisor Home page, create a new workspace a. Click the Create New button b. Enter the workspace name as Evaluation, then click the Create button A workspace is a designated area that will house the migration recommendations provided by Transformation Advisor from your application server environment. You can name and organize these however you want, whether it\u2019s by business application, location, or teams Once the Workspace is created, you will have options to either download the Data Collector utility or upload existing data file. In this lab, we are going to perform the following steps: Download the Data Collector utility for the Linux environment Simulate running the data collector Upload an existing data collection zip file into Transformation Advisor for analysis Use the accelerators generated by Transformation Advisor to deploy the Mod Resorts application to Liberty, and to containers. Click the Download button to download the data collector for Linux In the Download page, you can download data collector utility based on your source operating system for your WebSphere environment. It also shows how to use the command line utility to collect application and configuration data from WebSphere, WebLogic, and Tomcat servers. a. Since the lab VM is a Linux OS, click Download Linux to get the utility. b. In the Chrome browser window, when the download is complete, you will see the file shown in the bottom banner of the browser window. The zipped Data Collector utility file will be saved in / home/ibmdemo/Downloads directory of the Workstation VM. Continue to the next section of the lab to simulate running the data collector utility. 6.5 Simulate running the Transformation Advisor Data Collector utility After downloading the zipped Data Collector utility, it needs to be unpacked and run against a WebSphere Application server (WAS) to collect all the data of deployed applications and their configuration from the WAS server. Now, let\u2019s simulate the steps to run the data collector. Go back to the terminal window and navigate the /home/ibmdemo/Downloads directory and view its contents with commands: cd /home/ibmdemo/Downloads/ ls -l | grep transformationadvisor You can see the downloaded data collector utility file named \u201c transformationadvisor-Linux_Evaluation.tgz \u201d Extract the data collector utility using the following command: tar xvfz transformationadvisor-Linux_Evaluation.tgz The data collector utility will be extracted to /home/ibmdemo/Downloads /transformationadvisor-3.2.1 directory. Note: At this point, the data collector is ready to execute against a WebSphere environment. Return to the Transformation Advisor UI in the Web browser to view the section on \u201c Run the Tool \u201d, which shows the command to run on the WebSphere environment. a. From the Data Collector page, scroll down to the \u201c Run Tool \u201d section. The data collector command that would be executed is based on the domain and analysis type selections you make in this section. Choose the IBM WebSphere Domain. Other domains include other JAVA EE runtimes. Note: The data collector tool command changes based on this selection. Select the Analysis type of \u201c Apps and Configuration \u201d Selecting Apps & Configuration ensures that the application data and server configuration data is collected. The server configuration data is extremely helpful in Transformation Advisor to generate deployment artifacts in the migration bundle, which we will explore later in the lab. Review the data collector command that is shown based on your selections. If you were going to run the command, there are a few additional things that need to happen. Replace the \\<WEBSPHERE_HOME_DIR> and \\<PROFILE_NAME> variables with the values from the WebSphere environment If the WebSphere environment is not connected to the VM where Transformation Advisor is running, then the data collector utility that was downloaded must be copied and unpacked to the WebSphere environment. 6.5.1 FOR ILLUSTRATIVE PURPOSES ONLY: Simulation of running the Transformation Advisor Data Collector utility Important: This section is for illustrative purposes only. DO NOT RUN THE COMMANDS shown! If the WebSphere Application Server and Transformation Advisor has connectivity, the data collector could be run as follows. Example of the Data Collector utility command to start collect the deployed applications information on the WebSphere Application server. ./bin/transformationadvisor -w /opt/ibm/WebSphere/AppServer -p AppSrv01 Type 1 to accept the license agreement and press Enter , as illustrated below The utility will start to collect application data. This process takes time to complete, depending on how many applications are deployed on the WebSphere Application server. When the collection utility completes, you will see the following message; \u201c Thank you for uploading your data. You can proceed to the application UI for doing further analysis.\u201d Your application data is collected, it is saved as a zip file \u201c AppSrv01.zip\u201d , named based on the WebSphere profile that was analyzed. In general, if your application server and the Transformation Advisor are in the same network infrastructure, the collected data will be automatically uploaded to Transformation Advisor for you to view the analysis results. Otherwise, you must manually upload the data to Transformation Advisor before you can view the results. 6.6 Upload the data collection into Transformation Advisor In this section, you will upload the data collection zip file \u201c AppSrv01.zip \u201d from the WebSphere environment for analysis. Typically, before you can upload the data collector zip files, you will need to download the appropriate data collector for your target environments operation environment, such as Linux, Windows, etc. Additionally, you would run the data collector in the target environment to collect the data for your applications. Then, you can import the collection data into Transformation Advisor for analysis. Tip: As noted in the previous section, the data collection steps have already been done, and the resulting AppSrv01.zip file is provided for you in the lab environment. Go back to the Transformation Advisor page in the web browser, click the \u201c Workload type \u201d link to go to the Recommendations page. From the Evaluation workspace, upload the \u201c AppSrv01.zip \u201d data collection file a. Click the Upload button to upload a data collection file b. From the Upload Data page, click the Drop or add file link c. Navigate to the location of the data collection file and add the AppSrv01.zip file. Then click the Open button on the Download page. Home > ibmdemo > openshift-workshop-was > labs > Liberty > TA-labs > AppSrv01.zip d. The AppSrv01.zip data collection file is now ready to be uploaded. Click the Upload button to continue. Once the data collection has been uploaded to Transformation Advisor, you are redirected back to the TA Recommendations screen. Notice that the page shows \u201c All Java applications \u201d from the WebSphere Application Server profile named AppSrv01 . The following details are included in the workspace summary: Total Applications : The total number of applications in the workspace. Avg. cost per application : The average number of days of development effort required to migrate an application. Common Code : The total cost to migrate all the common code in the workspace to the target platform. Unique app code : The total cost to migrate all the unique app code (code that is not shared between applications) in the workspace to the target platform. Total cost : The total cost to migrate all the applications and common code in the workspace to the target platform. In the next section, you will use Transformation Advisor to view the application data analysis that was collected. 6.7 Evaluate On-Premises Java Applications In this section, you are going to use the Transformation Advisor UI to view the application data analysis results that was collected in the previous section. From the \u201c All Java applications\u201d page, you can see there was a total of 5 applications analyzed from the WAS server. When data is uploaded, Transformation Advisor automatically detects the host machine the data came from, meaning, where the WebSphere application server apps were running. TA creates a corresponding collection and adds the applications there. The collection name can be overridden when running the data collector or edited in the transformation Advisor UI after the data is uploaded. In this example, the default collection name is used: admin.ibm.demo , which is the host machine where the data came from. Click on the \u201c Collections \u201d drop-down icon and view the collection name: \u201c admin.ibm.demo \u201d Transformation advisor analyzes all the application code and common code that is shared across applications and provides an estimated total cost for migrating the apps and common code in the workspace. Total cost is the number of days of development cost to migrate that code to run on the selected migration target . In this example, WebSphere Liberty is the selected migration target. The Migration targets include: Open Liberty WebSphere Liberty WebSphere Traditional You can choose multiple migration targets and Transformation Advisor will provide the workspace total cost effort for each of the selected targets. This provides a high-level view of the scope of work to migrate all the applications in the collection to specific migration targets. Depending on the applications, you may find that the effort to migrate to Open Liberty requires more effort that migrating to WebSphere Liberty. This is because Open Liberty does not include all the Java EE API specifications that are included in WebSphere Liberty. Click on the Migration targets drop-down and select all three migration targets and notice the different development costs associated with migration all 5 applications in the workspace to the various migration target environments. Here you can see that moving the applications in the collection to WebSphere traditional requires zero development costs, meaning there is no code changes necessary. However, moving to WebSphere Liberty may require 2.5 days and Open Liberty may take 6 days of development time to update the application code to run on those target runtimes. The \u201c All Java applications\u201d page also shows the application summary analysis results for all the apps from the AppSrv01 profile for each of the selected migration targets. For each app / migration target combination, you can see these results: Java application Collection / Profile name Complexity Issues Common code files Application cost (in days) Migration plan The following details are included in the summary table (this is the per-application view): Application Name : The name of the EAR/WAR file found on the application server. Collection/Profile : Collection represents the hostname of the machine where the application resides. The profile represents the profile name in the application server where the application is installed. Complexity : Indicates how complex Transformation Advisor considers this application to be if you were to migrate it to the cloud. Issues : The number and severity of potential issues with the migration of the application. Common code files : The number of common code files this aplication uses. A file is considered common if it is from a Shared Library or is used by at least one other application. Application cost in days : Provides an estimate in days for the development effort to perform the migration for just this application. Cost estimates calculated by Transformation Advisor are high-level estimates only and may vary widely based on skills and other factors not considered by the tool. Migration plan : accelerator files generated by Transformation advisor to aide in building and deploying the selected application to the target runtime. Mod Resorts is one of the applications that we want to consider migration to Liberty. In this section you will review the analysis results for the modresorts-1_0_war.ear application and determine if it is a good candidate for migration to Open Liberty or WebSphere liberty. First, let\u2019s narrow the focus in Transformation Advisor to view only the modresorts-1_0_war.ear application. a. In the search bar, type modresorts which will narrow the application list to only the Mod Resorts application for all three migration targets In this example, if you want to move the modresorts-1_0_war.ear application to Open Liberty, the complexity level is Simple , which indicates that the application code does not need to be changed before it can be moved to Open Liberty. The application has no dependency, does not have any common code or shared library files. It has two minor (informational level) issues. The estimated development effort is zero day because no code change is required. Notice that the modresorts application is also simple to migrate to the WebSphere Liberty and WebSphere traditional migration targets. For this lab, you will focus on the modernization of moderesorts-1.0_war.ear to Open Liberty. Next, you will look at the analysis results for moderesorts-1_0_war.ear application in detail. Click the modresorts-1_0_war.ear link targeting Open Liberty to expand its analysis results. The first section in the detail analysis summary page is the Complexity rules section . The overall complexity for the application is simple , indicating that the application can be directly moved to Open Liberty without any code change. Scroll down to Complexity Rules section. You can see there is no code change required and no development cost, the estimate migration over all develop cost is 0 days . This estimate is based on data from IBM Services engagements, which includes migrating the application code, but does not encompass the full scope of a migration project that would include server configuration, testing, etc. Expand the Issues and details section. You can see the only minor potential issue listed is on configuring the application in Docker container. Next, scroll down to the bottom of the page and click the Technology Report link, this opens a new browser window to show the application Evaluation Report. The Technology report lists all java technologies the application used and whether these technologies are supported by a specific WebSphere platform from Liberty for Java on IBM Cloud to WebSphere traditional for z/OS. It is used to determine whether a particular WebSphere product is suitable for an application. TIP: If the complexity of migrating to the target environment is \u201c Complex \u201d , it means that some APIs are not available in the target runtime and application will have to be rewritten to use different APIs. As you can see from the report, the Mod Resorts application only uses Java Servlet which is supported by all WebSphere editions. Go back to the Transformation Advisor browser tab and click the Analysis Report link. The Detailed Migration Analysis Report opened in a new browser window. This is the deep-dive report which shows all issue found at the code level. a. Scroll down to Detailed Results by Rule section, you can see all the java technology issues identified based on different migration rules. For the Mod Resorts application, there are two warning rules regarding the application configuration in Docker containers. b. Click the Show results link next to the warning rules. You can see the detail analysis of the issue at code level, in a specific class file and specific line. This helps developers to pinpoint where the issue is, or potential issue may be. c. Click the Show rule help link. This expands the Rule Help section which provides recommended solutions on how to fix the issue. For the Docker container configuration issue, the utility provides best practice suggestion to externalize the configuration for the container. Go back to the Transformation Advisor page and click the Inventory Report link. The Inventory Report shows up. This report helps you examine what is in your application, including the number of modules, their relationships, and the technologies in those modules. It also gives you a view of all the utility JAR files in the application, and the Java package names in the jar files, which will help identify if the classes are the customers application code or 3 rd party code. Potential deployment problems and performance considerations are also included. a. Scroll down to view this report which serves as good decision-making tool to info you what is inside your application runtime, and to help you to have a better understanding of the application runtime, the components it has and the relationships among them. In the Inventory report, view the package names of the classes in the utility Jars a. Scroll down to view the Contained Archives section and click on the \u201c show details \u201d link next to modresorts-1.0.war b. Then scroll down to the Utility JAR files and click on the \u201c show details \u201d link next to Utility JAR files c. View the Archive names of the jar files and the packages used in the JAR files. This is a good way to determine if the code in the utility JARS include customer code or if they are 3 rd party jars like (org.pache*). Additionally, if the application migration complexity is SIMPLE, you may want to verify if the utility jars include any company packages that begin with org or other package names that are IGNORED by default in the Transformation Advisor data collector. It could be possible that application code was not analyzed due to package names that are ignored by the data collector From the analysis reports you reviewed above, you know that the Mod Resorts application is supported by Open Liberty, and the issue that the tool identified would not affect the application migration. You can confidently select the application as a good candidate for migrating to Open Liberty with minimal effort. 6.8 Overview of the Mod Resorts application From the insights gained from Transformation Advisor, you learned that the Mod Resorts is a simple EE application and is a good candidate for moving to Open Liberty and container-based clouds. For illustration purposes, in this short section, a few screen shots are captured to illustrate the Mod Resorts application. The Mod Resorts application home page is illustrated here: The user would select the destination of their travel Perhaps the user wants to go to PARIS, FRANCE. Mod Resorts shows the weather of the city. Continue to the next section of the lab where you are briefly introduced to Transformation Advisor\u2019s migration plan. The migration plan includes a migration bundle of generated deployment artifact that accelerate the deployment of the application to Liberty and container-based cloud deployment. 7. Explore the migration bundle for the Mod Resorts application Transformation Advisor display details about the migration bundle that it generated to accelerate the modernization of applications to Liberty or traditional WebSphere in containers and to OpenShift. The migration bundle includes diverse artifacts, depending on the needs of the application to accelerate the build and deployment of an application Docker image into OpenShift platform. The user can choose to create a migration bundle for either: binary project of an application (uploading a WAR/EAR file and its dependent libraries) source code project of an application, so that the application source files can be modernized and maintained Now, let\u2019s quickly explore the Migration Plan for the Mod Resorts application to see the artifacts that Transformation Advisor creates to expedite the app deployment to OpenShift Platform. Return to the \u201c All Java applications \u201d page in Transformation Advisor which displays the Java application summary list Ensure only the Open Liberty migration target is selected Click on the Migration plan link located next to the Mod Resorts application analysis for Open Liberty, which will display migration plan for modresorts for the Open Liberty target Select the Binary option in the migration plan. Using the Binary option requires that you upload the Mod Resorts application binary (WAR or EAR), which will be included in the migration bundle along with the deployment artifacts that Transformation Advisor generated. a. Select Manual upload option under the Application dependencies section. Here you will manually upload the Mod Resorts WAR file to the migration bundle. b. Click the \u201c Drag or add file\u201d link to add the md resorts WAR file to the migration bundle c. Navigate to: Home > ibmdemo > openshift-workshop-was > labs > Liberty > TA-labs > modresorts-1.0.war Scroll down to the Migration Files section of the migration plan. Notice the files that were generated by Transformation Advisor to accelerate build and deployment of the application to Liberty, containers, and OpenShift. To accelerate the application modernization, the artifacts produced by Transformation Advisor include: server.xml : the configuration for the Liberty server pom.xml : Build the application using Maven Application CR : Custom Resource for the application to be deployed to OpenShift via the Open Liberty Operator Dockerfile : Create the Docker image for the application The user will be able to choose to download the artifacts as a migration bundle or send the bundle contents into a Git repository . Click the Download bundle link to download the bundle of artifacts to the local filesystem on the Workstation VM. The modresorts10war_migrationBundle.zip file will be downloaded to the /home/ibmdemo/Downloads directory Unzip the migration bundle artifacts to a new folder on the Workstation VM a. From a terminal window, run the following commands to unzip the migration bundle to a new directory named \" modresorts-bundle \": mkdir /home/ibmdemo/modresorts-bundle cd /home/ibmdemo/modresorts-bundle cp ~/Downloads/modresorts10war_migrationBundle.zip ~/modresorts-bundle unzip ~/modresorts-bundle/modresorts10war_migrationBundle.zip ls View the server.xml file. DO NOT CHANGE THE FILE CONTENTS. The server.xml file in the migration bundle is the Liberty server configuration file generated by Transformation Advisor, configured for the modresorts application. gedit ~/modresorts-bundle/src/main/liberty/config/server.xml The Liberty features list include features that the application requires. mpMetrics feature is included, which provides a /metrics endpoint from which you can access all metrics that are emitted by the Open Liberty server and deployed applications. Variables are used so that the values that are likely to be different between environments can easily be overridden by external configurations like environment variables or configMaps and Secrets in Kubernetes. Close the editor when you finish reviewing the file. DO NOT SAVE any changes to the contents. View the Dockerfile file. Do not change the file contents. The Dockerfile file in the migration bundle is used to build the container image for running the modresorts application on a Liberty runtime in a containerized environment such ads Docker, Kubernetes, or Red Hat OpenShift. The Dockerfile was generated by Transformation Advisor, configured for the building the modresorts application. gedit ~/modresorts-bundle/Dockerfile The Dockerfile is a two-stage Dockerfile. The first phase is the \u201c build-stage \u201d that creates a docker image for the modresorts application. The second stage uses the Open Liberty kernel container image and the build artifacts produced from the \u201cbuild-stage\u201d to build the modresorts container image with the modresorts application and configuration files for deploying to a container environment. Close the editor when you finish reviewing the file. DO NOT SAVE any changes to the contents. 8. Use Transformation Advisor deployment accelerators to deploy and run the Mod Resorts application on Open Liberty In this section, you will install Open Liberty, create a new Liberty server, and leverage the artifacts generated by Transformation Advisor to configure and run the Mod Resorts application on your new Open Liberty server. Tip: Open Liberty is installed from a zip archive file. For the lab, the Open Liberty zip archive has already been downloaded to the lab environment. To get started, you will create a new directory where you would like to install Open Liberty. Then unzip the archive. That\u2019s it, Open Liberty is installed. Install Open Liberty on the VM a. From a Terminal window, run the following commands to perform an archive installation of Open Liberty mkdir ~/Liberty cd ~/Liberty unzip ~/Student/labs/TA-labs/openliberty-javaee8-21.0.0.12.zip -d ~/Liberty b. Open Liberty is installed to the \\~/Liberty/wlp directory. Change to Open Liberty \u201c bin \u201d directory, which is where the Open Liberty binaries are located. cd wlp/bin Use the server command to create a new Open Liberty server named modresorts_server ./server create modresorts_server Use the server command to start the Open Liberty server named modresorts_server ./server start modresorts_server Open a new Terminal window and view the Open Liberty server log file named \u201cmessages.log\u201d tail -f ~/Liberty/wlp/usr/servers/modresorts_server/logs/messages.log a. Look for the message that the modresorts server started successfully At this point you have an Open Liberty Server running with a defaultserver configuration. However, there are no applications installed(deployed). Next, you will copy the Open Liberty server configuration file that TA generated for the Mod Resorts application. Then you will copy the Mod Resorts binary (WAR) to the Open Liberty server, in which case the application will be deployed and started. Copy the server.xml file that Transformation Advisor, which includes the Open Liberty server configuration for the modresorts application a. Return to the Terminal window where you started the Open Liberty Server. b. Run the following command to copy the server.xml file to the modresorts_server configuration directory. cp ~/modresorts-bundle/src/main/liberty/config/server.xml ~/Liberty/wlp/usr/servers/modresorts_server c. In the Terminal window running the \u201c tail \u201d command on the Open Liberty log file, notice that the server is being updated to reflect the updates in the new server.xml file that we copied into the Liberty runtime configuration. Note: You will see messages that specific Liberty features being removed, and others being added, based on the new server.xml file that is loaded. Install the modresorts application to the Open Liberty server, using the WAR file that is included in the Transformation Advisor migration bundle. cp ~/modresorts-bundle/target/modresorts-1.0.war ~/Liberty/wlp/usr/servers/modresorts_server/apps The command above copied the modresorts application WAR file to the Open Liberty \u201c apps \u201d folder, which where the server.xml file is configured to run the application. In the Terminal window running the \u201c tail \u201d command on the Open Liberty log file, notice that the server is being updated to reflect the modresorts application being started. Run the modresorts application from the Chrome browser on the VM. The context root for the application is \u201c/resorts\u201d and is defined in the Open Liberty server.xml file. http://localhost:9080/resorts a. You may click the drop-down menu for \u201c WHERE TO ?\u201d and select a destination Tip! If the application does not respond when clicking on the \u201cWHERE TO?\u201d menu, increase the window size of the Chrome browser. This appears to be a glitch with the application or Chrome browser Stop the Open Liberty server a. Return to the Terminal window where you started the Open Liberty Server b. Run the following command to stop the server named modresorts_server ./server stop modresorts_server Use CTL-C to Stop the \u201c tail \u201d command in the 2 nd Terminal window 9. Use Transformation Advisor accelerators to run the Mod Resorts application on Open Liberty in containers In this section, you will use the Dockerfile to build a docker image and run the modresorts application in a local Docker container. The Dockerfile is a two-stage Dockerfile: - The first phase is the \u201c build-stage \u201d that creates a docker image for the modresorts application. - The second stage uses the Open Liberty kernel container image and the build artifacts produced from the \u201cbuild-stage\u201d to build the modresorts container image with the modresorts application and configuration files for deploying to a container environment. - **RUN features.sh** downloads the Open Liberty features that are defined in the server.xml file - **RUN configure.sh** installs the Open Liberty features into the Docker image. Build the Docker image that includes the modresorts application on Open Liberty a. From a Terminal window, change to the directory where the Transformation Advisor migration bundle is located. b. Run the Docker build command to build the image The name of the docker image will be modresorts:1.0, as specified by the -t (tag) parameter. The Dockerfile used is in the current directory, as specified by the training dot on the command cd ~/modresorts-bundle docker build --no-cache -t modresorts:1.0 . When complete, you will see that the Docker image was created and tagged as \u201c modresorts:1.0 \u201d c. List the Docker image and its tag. The name of the image is \u201c modresorts \u201d and is tagged as \u201c 1.0 \u201d docker images | grep modresorts Run the Docker image -d runs the docker command in detached mode -p maps the internal pot 9080 to an external port 9081 --name specifies the name for the docker container that gets spun up Modresorts:1.0 is the name of the docker image to use to spin up the new container docker run -d -p 9081:9080 --name modresorts modresorts:1.0 Verify the docker container is running docker ps | grep modresorts The \u201c docker ps \u201d command lists docker containers that are \u201crunning\u201d. Running \u201c docker ps -a \u201d lists all docker containers, including containers that are stopped. View the Open Liberty log in the \u201c modresorts \u201d container to verify the modresorts application was installed and is running docker logs modresorts Run the modresorts application from the Web Browser. The application is exposed on port: 9081 The application context root is: /resorts http://localhost:9081/resorts a. You may click the drop-down menu for \u201c WHERE TO ?\u201d and select a destination Tip! If the application does not respond when clicking on the \u201cWHERE TO?\u201d menu, increase the window size of the Chrome browser. This appears to be a glitch with the application in Chrome browser Stop and remove the docker container. Then check that the container has been removed, by using the \u201c docker ps -a\u201d command docker stop modresorts docker rm modresorts docker ps -a | grep modresorts Remove the modresorts docker image. Then use the \u201c docker images \u201d command to verify the image has been removed docker rmi modresorts:1.0 docker images | grep modresorts Summary In this lab, you learned how to evaluate the existing Java application using IBM Cloud Transformation Advisor. You learned how to use Transformation Advisors generated deployment accelerators from the migration bundle to build and run an application in Open Liberty in stand-alone mode on a VM and in containers. As a part of IBM Application Modernization solutions, the Transformation Advisor tool provides a recommendation for the right-fit IBM WebSphere Application Server edition and offers advice, best practices, and potential solutions to assess the ease of moving apps to Liberty or to WAS container, or to newer versions of WebSphere traditional. Transformation Advisor accelerates application migrating to Liberty and containers and helps minimize errors and risks and reduce time to market. Congratulations! You have successfully completed the lab \u201cExploring IBM Transformation Advisor data collection, app assessments, and deployment accelerators\u201d","title":"Explore IBM Transformation Advisor data collection, app assessments, and deployment accelerators"},{"location":"lab-guides/md/lab5/#explore-ibm-transformation-advisor-data-collection-app-assessments-and-deployment-accelerators","text":"","title":"Explore IBM Transformation Advisor data collection, app assessments, and deployment accelerators"},{"location":"lab-guides/md/lab5/#hands-on-scenario-using-tas-websphere-data-collector-java-application-assessment-and-deployment-accelerators-for-modernization-to-liberty-and-containers","text":"","title":"Hands-on scenario using TA\u2019s WebSphere Data collector, Java application assessment, and deployment accelerators for modernization to Liberty and containers"},{"location":"lab-guides/md/lab5/#explore-ibm-transformation-advisor","text":"This lab provides fundamental hands-on experience of the evaluation process of WebSphere application for their modernization journey to Liberty and container-based clouds. It shows the value of using Transformation Advisor (TA) to evaluate on-premises Java applications and identify a migration candidate for moving to the cloud. You will also learn how to use the deployment accelerators that TA generates to help deploy and run Java applications on Liberty and in containers. Upon completion of this lab, you will have gained experience using TA to quickly analyze on-premises Java applications without accessing their source code, estimate the effort in moving to container-based clouds, and using TA\u2019s deployment accelerators to accelerate your application modernization journey to Liberty and containers. IBM Cloud Transformation Advisor (Transformation Advisor) is an application modernization tool that is entitled through IBM WebSphere Hybrid Edition. Transformation Advisor helps you quickly evaluate on-premises Java EE applications for deployment to the cloud. The Transformation Advisor tool provides the following value: identify the Java EE programming models in the app. determine the complexity of apps by listing a high-level inventory of the content and structure of each app. highlight Java EE programming model and WebSphere API differences between the WebSphere profile types identify Java EE specification implementation differences that might affect the app generate accelerators for deploying the application to Liberty and containers in a target environment. Additionally, the tool provides a recommendation for the right-fit IBM WebSphere Application Server edition and offers advice, best practices, and potential solutions to assess the ease of moving apps to Liberty or newer versions of WebSphere traditional. It accelerates application migrating to cloud process, minimize errors and risks and reduce time to market.","title":"Explore IBM Transformation Advisor"},{"location":"lab-guides/md/lab5/#1-introduction","text":"As shown in the image below, your company has several web applications deployed to WebSphere Application Server (WAS) environment. Your company wants to move these applications to the modern WebSphere Liberty server on a container-based cloud. However, you are not sure how much effort the migration process might take. You decide to use the IBM Transformation Advisor to do a quick evaluation of these applications without their source code to identify a good candidate application to move to Liberty and container-based cloud. After determining a candidate application for modernization to WebSphere Liberty, you use the accelerators generated by TA to deploy and run the application to WebSphere Liberty on your local developer machine and in containers to validate the solution.","title":"1. Introduction"},{"location":"lab-guides/md/lab5/#2-objective","text":"The objectives of this lab are to: Learn how to collect Java application and configuration data using the Transformation Advisor Data Collector tool. Learn how to use the Transformation Advisor to evaluate the effort involved to modernize to Liberty and container-based clouds and identify good application candidates for modernization. Learn how to use the accelerators generated by Transformation Advisor to deploy a candidate application to WebSphere Liberty and containers.","title":"2. Objective"},{"location":"lab-guides/md/lab5/#3-prerequisites","text":"The following prerequisites must be completed prior to beginning this lab: Familiarity with basic Linux commands Have internet access Have a SkyTap lab environment ready","title":"3. Prerequisites"},{"location":"lab-guides/md/lab5/#4-the-lab-environment","text":"One Linux VM is included in the environment and has been provided for this lab. The Workstation-Liberty-TA-M2m VM will be referred as the \u201c workstation \u201d VM throughout the lab. The login credentials for the workstation VM are: User ID: ibmdemo Password: passw0rd Transformation Advisor (TA) has already been installed on the Workstation VM. TA local runs in Docker containers. Get started using Transformation Adviser for yourself: http://ibm.biz/cloudta","title":"4. The lab environment"},{"location":"lab-guides/md/lab5/#5-lab-tasks","text":"In this lab, you will use the Transformation Advisor to identify a good candidate application for moving to WebSphere Liberty and containers. To identify which Java EE programming models are on the server, you would typically run the Transformation Advisor Data Collector tool against a WebSphere server or cell. For this lab, you will simulate the process of running the data collector which generates a \u201cdata collection\u201d which is a zip file containing the inventory of the application, structure of each application, the WebSphere server configuration required for the application, and various analysis reports. For this lab environment, the data collection zip archive file has already been generated. You will import that zip file into the Transformation Advisor UI for application analysis. Using Transformation Advisor, you will gain insights into potential migration issues that may need to be remediated if you move the application to Liberty and containers. Reviewing the analysis reports, you will determine the complexity of the development effort required and select a candidate application to migrate to Liberty in a container-based cloud. Here are the activities involved in this process: Simulate running the Transformation Advisor Data Collector tool against the WebSphere Application Server to get application data Upload the data collection zip archive file that was generated by the data collector, into Transformation Advisor UI for analysis. Review the analysis and reports that Transformation Advisor generates to identify the right candidate application for a rapid and cost-effective migration to Liberty and container-based cloud.","title":"5. Lab Tasks"},{"location":"lab-guides/md/lab5/#6-execute-lab-tasks","text":"","title":"6. Execute Lab Tasks"},{"location":"lab-guides/md/lab5/#61-log-in-to-the-workstation-vm-and-get-started","text":"If the VM is not already started, start it by clicking the play button for the whole group. After the VMs are started, click the Workstation VM icon to access it. If you see a screen displaying only \u201c ibmdemo \u201d. Click on the screen to get to the password prompt to login. Login with ibmdemo ID. Click on the ibmdemo icon on the screen. When prompted for the password for ibmdemo , enter \" password \" as the password: Resize the Skytap environment window for a larger viewing area while doing the lab. From the Skytap menu bar, click on the \" Fit to Size \" icon. This will enlarge the viewing area to fit the size of your browser window.","title":"6.1 Log in to the workstation VM and Get Started"},{"location":"lab-guides/md/lab5/#62-the-websphere-applications-to-be-assessed","text":"The illustration below shows the WebSphere applications that are deployed to the WebSphere Application Server (WAS) environment. We already ran the Transformation Advisor Data Collection tool against the WebSphere server and provided the resulting data collection zip archive file on the Workstation VM to be used in the lab. You will simulate the data collection process. However, not actually run the data collector since this lab environment does not have access to the WebSphere environment. As illustrated below, Transformation Advisor will collect the application data for the following five applications. During the analysis of these applications, you will gain important insights regarding these applications, their JEE technologies used, relative complexity of each application, and detailed analysis of the overall effort and complexity of moving each application to Liberty and container-based cloud environments. In the Enterprise Applications list above, you can see the applications that deployed to the WebSphere Application Server environment. Next, you use Transformation Advisor to analyze these applications to identify a good candidate to be moved to Liberty.","title":"6.2 The WebSphere applications to be assessed"},{"location":"lab-guides/md/lab5/#63-launch-transformation-advisor-local","text":"The Transformation Advisor can evaluate any Java based applications. In this lab, you are going to use it to evaluate whether the on-premises WebSphere application, Mod Resorts , is suitable to move to Liberty and what the effort might be to get it there. The Transformation Advisor is installed locally on the Workstation VM. Launch the Transformation Advisor tool using the steps below. From Workstation VM Desktop Tool Bar, click the Terminal icon to open a Terminal window. Clone the GitHub repo that includes artifacts required for this lab cd /home/ibmdemo git clone https://github.com/IBMTechSales/student-tech-academy-platform.git Once completed, the local lab artifacts repo is cloned at /home/ibmdemo/student-tech-academy-platform directory on the Workstation desktop. Launch the Transformation Advisor with commands: cd /home/ibmdemo/TA_LOCAL/transformationAdvisor/transformation-advisor-local-3.2.1 ./launchTransformationAdvisor.sh Wait for Transformation Advisor to initialize and display the action menu list. Type 5 and press Enter to start the Transformation Advisor . The Transformation Advisor application is started, right-click the application URL link and select Open Link to launch it in a web browser window This Transformation Advisor Home page is displayed in the Web Browser. In the next section, you will use the Transformation Advisor UI to download the data collector utility for the environment that the WebSphere Application Server would be running, such as Windows or Linux.","title":"6.3 Launch Transformation Advisor (local)"},{"location":"lab-guides/md/lab5/#64-download-transformation-advisor-data-collector-utility","text":"Now the Transformation Advisor is running, you will download its Data Collector utility that would run on a WebSphere Application Server. To evaluate on-premises Java applications, you need to run Transformation Advisor Data Collector utility against the Application server environment. It will extract application information from the environment. The utility can be downloaded from the Transformation Advisor UI. From the Transformation Advisor Home page, create a new workspace a. Click the Create New button b. Enter the workspace name as Evaluation, then click the Create button A workspace is a designated area that will house the migration recommendations provided by Transformation Advisor from your application server environment. You can name and organize these however you want, whether it\u2019s by business application, location, or teams Once the Workspace is created, you will have options to either download the Data Collector utility or upload existing data file. In this lab, we are going to perform the following steps: Download the Data Collector utility for the Linux environment Simulate running the data collector Upload an existing data collection zip file into Transformation Advisor for analysis Use the accelerators generated by Transformation Advisor to deploy the Mod Resorts application to Liberty, and to containers. Click the Download button to download the data collector for Linux In the Download page, you can download data collector utility based on your source operating system for your WebSphere environment. It also shows how to use the command line utility to collect application and configuration data from WebSphere, WebLogic, and Tomcat servers. a. Since the lab VM is a Linux OS, click Download Linux to get the utility. b. In the Chrome browser window, when the download is complete, you will see the file shown in the bottom banner of the browser window. The zipped Data Collector utility file will be saved in / home/ibmdemo/Downloads directory of the Workstation VM. Continue to the next section of the lab to simulate running the data collector utility.","title":"6.4 Download Transformation Advisor Data Collector utility"},{"location":"lab-guides/md/lab5/#65-simulate-running-the-transformation-advisor-data-collector-utility","text":"After downloading the zipped Data Collector utility, it needs to be unpacked and run against a WebSphere Application server (WAS) to collect all the data of deployed applications and their configuration from the WAS server. Now, let\u2019s simulate the steps to run the data collector. Go back to the terminal window and navigate the /home/ibmdemo/Downloads directory and view its contents with commands: cd /home/ibmdemo/Downloads/ ls -l | grep transformationadvisor You can see the downloaded data collector utility file named \u201c transformationadvisor-Linux_Evaluation.tgz \u201d Extract the data collector utility using the following command: tar xvfz transformationadvisor-Linux_Evaluation.tgz The data collector utility will be extracted to /home/ibmdemo/Downloads /transformationadvisor-3.2.1 directory. Note: At this point, the data collector is ready to execute against a WebSphere environment. Return to the Transformation Advisor UI in the Web browser to view the section on \u201c Run the Tool \u201d, which shows the command to run on the WebSphere environment. a. From the Data Collector page, scroll down to the \u201c Run Tool \u201d section. The data collector command that would be executed is based on the domain and analysis type selections you make in this section. Choose the IBM WebSphere Domain. Other domains include other JAVA EE runtimes. Note: The data collector tool command changes based on this selection. Select the Analysis type of \u201c Apps and Configuration \u201d Selecting Apps & Configuration ensures that the application data and server configuration data is collected. The server configuration data is extremely helpful in Transformation Advisor to generate deployment artifacts in the migration bundle, which we will explore later in the lab. Review the data collector command that is shown based on your selections. If you were going to run the command, there are a few additional things that need to happen. Replace the \\<WEBSPHERE_HOME_DIR> and \\<PROFILE_NAME> variables with the values from the WebSphere environment If the WebSphere environment is not connected to the VM where Transformation Advisor is running, then the data collector utility that was downloaded must be copied and unpacked to the WebSphere environment.","title":"6.5 Simulate running the Transformation Advisor Data Collector utility"},{"location":"lab-guides/md/lab5/#651-for-illustrative-purposes-only-simulation-of-running-the-transformation-advisor-data-collector-utility","text":"Important: This section is for illustrative purposes only. DO NOT RUN THE COMMANDS shown! If the WebSphere Application Server and Transformation Advisor has connectivity, the data collector could be run as follows. Example of the Data Collector utility command to start collect the deployed applications information on the WebSphere Application server. ./bin/transformationadvisor -w /opt/ibm/WebSphere/AppServer -p AppSrv01 Type 1 to accept the license agreement and press Enter , as illustrated below The utility will start to collect application data. This process takes time to complete, depending on how many applications are deployed on the WebSphere Application server. When the collection utility completes, you will see the following message; \u201c Thank you for uploading your data. You can proceed to the application UI for doing further analysis.\u201d Your application data is collected, it is saved as a zip file \u201c AppSrv01.zip\u201d , named based on the WebSphere profile that was analyzed. In general, if your application server and the Transformation Advisor are in the same network infrastructure, the collected data will be automatically uploaded to Transformation Advisor for you to view the analysis results. Otherwise, you must manually upload the data to Transformation Advisor before you can view the results.","title":"6.5.1 FOR ILLUSTRATIVE PURPOSES ONLY: Simulation of running the Transformation Advisor Data Collector utility"},{"location":"lab-guides/md/lab5/#66-upload-the-data-collection-into-transformation-advisor","text":"In this section, you will upload the data collection zip file \u201c AppSrv01.zip \u201d from the WebSphere environment for analysis. Typically, before you can upload the data collector zip files, you will need to download the appropriate data collector for your target environments operation environment, such as Linux, Windows, etc. Additionally, you would run the data collector in the target environment to collect the data for your applications. Then, you can import the collection data into Transformation Advisor for analysis. Tip: As noted in the previous section, the data collection steps have already been done, and the resulting AppSrv01.zip file is provided for you in the lab environment. Go back to the Transformation Advisor page in the web browser, click the \u201c Workload type \u201d link to go to the Recommendations page. From the Evaluation workspace, upload the \u201c AppSrv01.zip \u201d data collection file a. Click the Upload button to upload a data collection file b. From the Upload Data page, click the Drop or add file link c. Navigate to the location of the data collection file and add the AppSrv01.zip file. Then click the Open button on the Download page. Home > ibmdemo > openshift-workshop-was > labs > Liberty > TA-labs > AppSrv01.zip d. The AppSrv01.zip data collection file is now ready to be uploaded. Click the Upload button to continue. Once the data collection has been uploaded to Transformation Advisor, you are redirected back to the TA Recommendations screen. Notice that the page shows \u201c All Java applications \u201d from the WebSphere Application Server profile named AppSrv01 . The following details are included in the workspace summary: Total Applications : The total number of applications in the workspace. Avg. cost per application : The average number of days of development effort required to migrate an application. Common Code : The total cost to migrate all the common code in the workspace to the target platform. Unique app code : The total cost to migrate all the unique app code (code that is not shared between applications) in the workspace to the target platform. Total cost : The total cost to migrate all the applications and common code in the workspace to the target platform. In the next section, you will use Transformation Advisor to view the application data analysis that was collected.","title":"6.6 Upload the data collection into Transformation Advisor"},{"location":"lab-guides/md/lab5/#67-evaluate-on-premises-java-applications","text":"In this section, you are going to use the Transformation Advisor UI to view the application data analysis results that was collected in the previous section. From the \u201c All Java applications\u201d page, you can see there was a total of 5 applications analyzed from the WAS server. When data is uploaded, Transformation Advisor automatically detects the host machine the data came from, meaning, where the WebSphere application server apps were running. TA creates a corresponding collection and adds the applications there. The collection name can be overridden when running the data collector or edited in the transformation Advisor UI after the data is uploaded. In this example, the default collection name is used: admin.ibm.demo , which is the host machine where the data came from. Click on the \u201c Collections \u201d drop-down icon and view the collection name: \u201c admin.ibm.demo \u201d Transformation advisor analyzes all the application code and common code that is shared across applications and provides an estimated total cost for migrating the apps and common code in the workspace. Total cost is the number of days of development cost to migrate that code to run on the selected migration target . In this example, WebSphere Liberty is the selected migration target. The Migration targets include: Open Liberty WebSphere Liberty WebSphere Traditional You can choose multiple migration targets and Transformation Advisor will provide the workspace total cost effort for each of the selected targets. This provides a high-level view of the scope of work to migrate all the applications in the collection to specific migration targets. Depending on the applications, you may find that the effort to migrate to Open Liberty requires more effort that migrating to WebSphere Liberty. This is because Open Liberty does not include all the Java EE API specifications that are included in WebSphere Liberty. Click on the Migration targets drop-down and select all three migration targets and notice the different development costs associated with migration all 5 applications in the workspace to the various migration target environments. Here you can see that moving the applications in the collection to WebSphere traditional requires zero development costs, meaning there is no code changes necessary. However, moving to WebSphere Liberty may require 2.5 days and Open Liberty may take 6 days of development time to update the application code to run on those target runtimes. The \u201c All Java applications\u201d page also shows the application summary analysis results for all the apps from the AppSrv01 profile for each of the selected migration targets. For each app / migration target combination, you can see these results: Java application Collection / Profile name Complexity Issues Common code files Application cost (in days) Migration plan The following details are included in the summary table (this is the per-application view): Application Name : The name of the EAR/WAR file found on the application server. Collection/Profile : Collection represents the hostname of the machine where the application resides. The profile represents the profile name in the application server where the application is installed. Complexity : Indicates how complex Transformation Advisor considers this application to be if you were to migrate it to the cloud. Issues : The number and severity of potential issues with the migration of the application. Common code files : The number of common code files this aplication uses. A file is considered common if it is from a Shared Library or is used by at least one other application. Application cost in days : Provides an estimate in days for the development effort to perform the migration for just this application. Cost estimates calculated by Transformation Advisor are high-level estimates only and may vary widely based on skills and other factors not considered by the tool. Migration plan : accelerator files generated by Transformation advisor to aide in building and deploying the selected application to the target runtime. Mod Resorts is one of the applications that we want to consider migration to Liberty. In this section you will review the analysis results for the modresorts-1_0_war.ear application and determine if it is a good candidate for migration to Open Liberty or WebSphere liberty. First, let\u2019s narrow the focus in Transformation Advisor to view only the modresorts-1_0_war.ear application. a. In the search bar, type modresorts which will narrow the application list to only the Mod Resorts application for all three migration targets In this example, if you want to move the modresorts-1_0_war.ear application to Open Liberty, the complexity level is Simple , which indicates that the application code does not need to be changed before it can be moved to Open Liberty. The application has no dependency, does not have any common code or shared library files. It has two minor (informational level) issues. The estimated development effort is zero day because no code change is required. Notice that the modresorts application is also simple to migrate to the WebSphere Liberty and WebSphere traditional migration targets. For this lab, you will focus on the modernization of moderesorts-1.0_war.ear to Open Liberty. Next, you will look at the analysis results for moderesorts-1_0_war.ear application in detail. Click the modresorts-1_0_war.ear link targeting Open Liberty to expand its analysis results. The first section in the detail analysis summary page is the Complexity rules section . The overall complexity for the application is simple , indicating that the application can be directly moved to Open Liberty without any code change. Scroll down to Complexity Rules section. You can see there is no code change required and no development cost, the estimate migration over all develop cost is 0 days . This estimate is based on data from IBM Services engagements, which includes migrating the application code, but does not encompass the full scope of a migration project that would include server configuration, testing, etc. Expand the Issues and details section. You can see the only minor potential issue listed is on configuring the application in Docker container. Next, scroll down to the bottom of the page and click the Technology Report link, this opens a new browser window to show the application Evaluation Report. The Technology report lists all java technologies the application used and whether these technologies are supported by a specific WebSphere platform from Liberty for Java on IBM Cloud to WebSphere traditional for z/OS. It is used to determine whether a particular WebSphere product is suitable for an application. TIP: If the complexity of migrating to the target environment is \u201c Complex \u201d , it means that some APIs are not available in the target runtime and application will have to be rewritten to use different APIs. As you can see from the report, the Mod Resorts application only uses Java Servlet which is supported by all WebSphere editions. Go back to the Transformation Advisor browser tab and click the Analysis Report link. The Detailed Migration Analysis Report opened in a new browser window. This is the deep-dive report which shows all issue found at the code level. a. Scroll down to Detailed Results by Rule section, you can see all the java technology issues identified based on different migration rules. For the Mod Resorts application, there are two warning rules regarding the application configuration in Docker containers. b. Click the Show results link next to the warning rules. You can see the detail analysis of the issue at code level, in a specific class file and specific line. This helps developers to pinpoint where the issue is, or potential issue may be. c. Click the Show rule help link. This expands the Rule Help section which provides recommended solutions on how to fix the issue. For the Docker container configuration issue, the utility provides best practice suggestion to externalize the configuration for the container. Go back to the Transformation Advisor page and click the Inventory Report link. The Inventory Report shows up. This report helps you examine what is in your application, including the number of modules, their relationships, and the technologies in those modules. It also gives you a view of all the utility JAR files in the application, and the Java package names in the jar files, which will help identify if the classes are the customers application code or 3 rd party code. Potential deployment problems and performance considerations are also included. a. Scroll down to view this report which serves as good decision-making tool to info you what is inside your application runtime, and to help you to have a better understanding of the application runtime, the components it has and the relationships among them. In the Inventory report, view the package names of the classes in the utility Jars a. Scroll down to view the Contained Archives section and click on the \u201c show details \u201d link next to modresorts-1.0.war b. Then scroll down to the Utility JAR files and click on the \u201c show details \u201d link next to Utility JAR files c. View the Archive names of the jar files and the packages used in the JAR files. This is a good way to determine if the code in the utility JARS include customer code or if they are 3 rd party jars like (org.pache*). Additionally, if the application migration complexity is SIMPLE, you may want to verify if the utility jars include any company packages that begin with org or other package names that are IGNORED by default in the Transformation Advisor data collector. It could be possible that application code was not analyzed due to package names that are ignored by the data collector From the analysis reports you reviewed above, you know that the Mod Resorts application is supported by Open Liberty, and the issue that the tool identified would not affect the application migration. You can confidently select the application as a good candidate for migrating to Open Liberty with minimal effort.","title":"6.7 Evaluate On-Premises Java Applications"},{"location":"lab-guides/md/lab5/#68-overview-of-the-mod-resorts-application","text":"From the insights gained from Transformation Advisor, you learned that the Mod Resorts is a simple EE application and is a good candidate for moving to Open Liberty and container-based clouds. For illustration purposes, in this short section, a few screen shots are captured to illustrate the Mod Resorts application. The Mod Resorts application home page is illustrated here: The user would select the destination of their travel Perhaps the user wants to go to PARIS, FRANCE. Mod Resorts shows the weather of the city. Continue to the next section of the lab where you are briefly introduced to Transformation Advisor\u2019s migration plan. The migration plan includes a migration bundle of generated deployment artifact that accelerate the deployment of the application to Liberty and container-based cloud deployment.","title":"6.8 Overview of the Mod Resorts application"},{"location":"lab-guides/md/lab5/#7-explore-the-migration-bundle-for-the-mod-resorts-application","text":"Transformation Advisor display details about the migration bundle that it generated to accelerate the modernization of applications to Liberty or traditional WebSphere in containers and to OpenShift. The migration bundle includes diverse artifacts, depending on the needs of the application to accelerate the build and deployment of an application Docker image into OpenShift platform. The user can choose to create a migration bundle for either: binary project of an application (uploading a WAR/EAR file and its dependent libraries) source code project of an application, so that the application source files can be modernized and maintained Now, let\u2019s quickly explore the Migration Plan for the Mod Resorts application to see the artifacts that Transformation Advisor creates to expedite the app deployment to OpenShift Platform. Return to the \u201c All Java applications \u201d page in Transformation Advisor which displays the Java application summary list Ensure only the Open Liberty migration target is selected Click on the Migration plan link located next to the Mod Resorts application analysis for Open Liberty, which will display migration plan for modresorts for the Open Liberty target Select the Binary option in the migration plan. Using the Binary option requires that you upload the Mod Resorts application binary (WAR or EAR), which will be included in the migration bundle along with the deployment artifacts that Transformation Advisor generated. a. Select Manual upload option under the Application dependencies section. Here you will manually upload the Mod Resorts WAR file to the migration bundle. b. Click the \u201c Drag or add file\u201d link to add the md resorts WAR file to the migration bundle c. Navigate to: Home > ibmdemo > openshift-workshop-was > labs > Liberty > TA-labs > modresorts-1.0.war Scroll down to the Migration Files section of the migration plan. Notice the files that were generated by Transformation Advisor to accelerate build and deployment of the application to Liberty, containers, and OpenShift. To accelerate the application modernization, the artifacts produced by Transformation Advisor include: server.xml : the configuration for the Liberty server pom.xml : Build the application using Maven Application CR : Custom Resource for the application to be deployed to OpenShift via the Open Liberty Operator Dockerfile : Create the Docker image for the application The user will be able to choose to download the artifacts as a migration bundle or send the bundle contents into a Git repository . Click the Download bundle link to download the bundle of artifacts to the local filesystem on the Workstation VM. The modresorts10war_migrationBundle.zip file will be downloaded to the /home/ibmdemo/Downloads directory Unzip the migration bundle artifacts to a new folder on the Workstation VM a. From a terminal window, run the following commands to unzip the migration bundle to a new directory named \" modresorts-bundle \": mkdir /home/ibmdemo/modresorts-bundle cd /home/ibmdemo/modresorts-bundle cp ~/Downloads/modresorts10war_migrationBundle.zip ~/modresorts-bundle unzip ~/modresorts-bundle/modresorts10war_migrationBundle.zip ls View the server.xml file. DO NOT CHANGE THE FILE CONTENTS. The server.xml file in the migration bundle is the Liberty server configuration file generated by Transformation Advisor, configured for the modresorts application. gedit ~/modresorts-bundle/src/main/liberty/config/server.xml The Liberty features list include features that the application requires. mpMetrics feature is included, which provides a /metrics endpoint from which you can access all metrics that are emitted by the Open Liberty server and deployed applications. Variables are used so that the values that are likely to be different between environments can easily be overridden by external configurations like environment variables or configMaps and Secrets in Kubernetes. Close the editor when you finish reviewing the file. DO NOT SAVE any changes to the contents. View the Dockerfile file. Do not change the file contents. The Dockerfile file in the migration bundle is used to build the container image for running the modresorts application on a Liberty runtime in a containerized environment such ads Docker, Kubernetes, or Red Hat OpenShift. The Dockerfile was generated by Transformation Advisor, configured for the building the modresorts application. gedit ~/modresorts-bundle/Dockerfile The Dockerfile is a two-stage Dockerfile. The first phase is the \u201c build-stage \u201d that creates a docker image for the modresorts application. The second stage uses the Open Liberty kernel container image and the build artifacts produced from the \u201cbuild-stage\u201d to build the modresorts container image with the modresorts application and configuration files for deploying to a container environment. Close the editor when you finish reviewing the file. DO NOT SAVE any changes to the contents.","title":"7. Explore the migration bundle for the Mod Resorts application"},{"location":"lab-guides/md/lab5/#8-use-transformation-advisor-deployment-accelerators-to-deploy-and-run-the-mod-resorts-application-on-open-liberty","text":"In this section, you will install Open Liberty, create a new Liberty server, and leverage the artifacts generated by Transformation Advisor to configure and run the Mod Resorts application on your new Open Liberty server. Tip: Open Liberty is installed from a zip archive file. For the lab, the Open Liberty zip archive has already been downloaded to the lab environment. To get started, you will create a new directory where you would like to install Open Liberty. Then unzip the archive. That\u2019s it, Open Liberty is installed. Install Open Liberty on the VM a. From a Terminal window, run the following commands to perform an archive installation of Open Liberty mkdir ~/Liberty cd ~/Liberty unzip ~/Student/labs/TA-labs/openliberty-javaee8-21.0.0.12.zip -d ~/Liberty b. Open Liberty is installed to the \\~/Liberty/wlp directory. Change to Open Liberty \u201c bin \u201d directory, which is where the Open Liberty binaries are located. cd wlp/bin Use the server command to create a new Open Liberty server named modresorts_server ./server create modresorts_server Use the server command to start the Open Liberty server named modresorts_server ./server start modresorts_server Open a new Terminal window and view the Open Liberty server log file named \u201cmessages.log\u201d tail -f ~/Liberty/wlp/usr/servers/modresorts_server/logs/messages.log a. Look for the message that the modresorts server started successfully At this point you have an Open Liberty Server running with a defaultserver configuration. However, there are no applications installed(deployed). Next, you will copy the Open Liberty server configuration file that TA generated for the Mod Resorts application. Then you will copy the Mod Resorts binary (WAR) to the Open Liberty server, in which case the application will be deployed and started. Copy the server.xml file that Transformation Advisor, which includes the Open Liberty server configuration for the modresorts application a. Return to the Terminal window where you started the Open Liberty Server. b. Run the following command to copy the server.xml file to the modresorts_server configuration directory. cp ~/modresorts-bundle/src/main/liberty/config/server.xml ~/Liberty/wlp/usr/servers/modresorts_server c. In the Terminal window running the \u201c tail \u201d command on the Open Liberty log file, notice that the server is being updated to reflect the updates in the new server.xml file that we copied into the Liberty runtime configuration. Note: You will see messages that specific Liberty features being removed, and others being added, based on the new server.xml file that is loaded. Install the modresorts application to the Open Liberty server, using the WAR file that is included in the Transformation Advisor migration bundle. cp ~/modresorts-bundle/target/modresorts-1.0.war ~/Liberty/wlp/usr/servers/modresorts_server/apps The command above copied the modresorts application WAR file to the Open Liberty \u201c apps \u201d folder, which where the server.xml file is configured to run the application. In the Terminal window running the \u201c tail \u201d command on the Open Liberty log file, notice that the server is being updated to reflect the modresorts application being started. Run the modresorts application from the Chrome browser on the VM. The context root for the application is \u201c/resorts\u201d and is defined in the Open Liberty server.xml file. http://localhost:9080/resorts a. You may click the drop-down menu for \u201c WHERE TO ?\u201d and select a destination Tip! If the application does not respond when clicking on the \u201cWHERE TO?\u201d menu, increase the window size of the Chrome browser. This appears to be a glitch with the application or Chrome browser Stop the Open Liberty server a. Return to the Terminal window where you started the Open Liberty Server b. Run the following command to stop the server named modresorts_server ./server stop modresorts_server Use CTL-C to Stop the \u201c tail \u201d command in the 2 nd Terminal window","title":"8. Use Transformation Advisor deployment accelerators to deploy and run the Mod Resorts application on Open Liberty"},{"location":"lab-guides/md/lab5/#9-use-transformation-advisor-accelerators-to-run-the-mod-resorts-application-on-open-liberty-in-containers","text":"In this section, you will use the Dockerfile to build a docker image and run the modresorts application in a local Docker container. The Dockerfile is a two-stage Dockerfile: - The first phase is the \u201c build-stage \u201d that creates a docker image for the modresorts application. - The second stage uses the Open Liberty kernel container image and the build artifacts produced from the \u201cbuild-stage\u201d to build the modresorts container image with the modresorts application and configuration files for deploying to a container environment. - **RUN features.sh** downloads the Open Liberty features that are defined in the server.xml file - **RUN configure.sh** installs the Open Liberty features into the Docker image. Build the Docker image that includes the modresorts application on Open Liberty a. From a Terminal window, change to the directory where the Transformation Advisor migration bundle is located. b. Run the Docker build command to build the image The name of the docker image will be modresorts:1.0, as specified by the -t (tag) parameter. The Dockerfile used is in the current directory, as specified by the training dot on the command cd ~/modresorts-bundle docker build --no-cache -t modresorts:1.0 . When complete, you will see that the Docker image was created and tagged as \u201c modresorts:1.0 \u201d c. List the Docker image and its tag. The name of the image is \u201c modresorts \u201d and is tagged as \u201c 1.0 \u201d docker images | grep modresorts Run the Docker image -d runs the docker command in detached mode -p maps the internal pot 9080 to an external port 9081 --name specifies the name for the docker container that gets spun up Modresorts:1.0 is the name of the docker image to use to spin up the new container docker run -d -p 9081:9080 --name modresorts modresorts:1.0 Verify the docker container is running docker ps | grep modresorts The \u201c docker ps \u201d command lists docker containers that are \u201crunning\u201d. Running \u201c docker ps -a \u201d lists all docker containers, including containers that are stopped. View the Open Liberty log in the \u201c modresorts \u201d container to verify the modresorts application was installed and is running docker logs modresorts Run the modresorts application from the Web Browser. The application is exposed on port: 9081 The application context root is: /resorts http://localhost:9081/resorts a. You may click the drop-down menu for \u201c WHERE TO ?\u201d and select a destination Tip! If the application does not respond when clicking on the \u201cWHERE TO?\u201d menu, increase the window size of the Chrome browser. This appears to be a glitch with the application in Chrome browser Stop and remove the docker container. Then check that the container has been removed, by using the \u201c docker ps -a\u201d command docker stop modresorts docker rm modresorts docker ps -a | grep modresorts Remove the modresorts docker image. Then use the \u201c docker images \u201d command to verify the image has been removed docker rmi modresorts:1.0 docker images | grep modresorts","title":"9. Use Transformation Advisor accelerators to run the Mod Resorts application on Open Liberty in containers"},{"location":"lab-guides/md/lab5/#summary","text":"In this lab, you learned how to evaluate the existing Java application using IBM Cloud Transformation Advisor. You learned how to use Transformation Advisors generated deployment accelerators from the migration bundle to build and run an application in Open Liberty in stand-alone mode on a VM and in containers. As a part of IBM Application Modernization solutions, the Transformation Advisor tool provides a recommendation for the right-fit IBM WebSphere Application Server edition and offers advice, best practices, and potential solutions to assess the ease of moving apps to Liberty or to WAS container, or to newer versions of WebSphere traditional. Transformation Advisor accelerates application migrating to Liberty and containers and helps minimize errors and risks and reduce time to market. Congratulations! You have successfully completed the lab \u201cExploring IBM Transformation Advisor data collection, app assessments, and deployment accelerators\u201d","title":"Summary"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/","text":"Explore IBM Transformation Advisor data collection, app assessments, and deployment accelerators Hands-on scenario using TA\u2019s WebSphere Data collector, Java application assessment, and deployment accelerators for modernization to Liberty and containers Explore IBM Transformation Advisor This lab provides fundamental hands-on experience of the evaluation process of WebSphere application for their modernization journey to Liberty and container-based clouds. It shows the value of using Transformation Advisor (TA) to evaluate on-premises Java applications and identify a migration candidate for moving to the cloud. You will also learn how to use the deployment accelerators that TA generates to help deploy and run Java applications on Liberty and in containers. Upon completion of this lab, you will have gained experience using TA to quickly analyze on-premises Java applications without accessing their source code, estimate the effort in moving to container-based clouds, and using TA\u2019s deployment accelerators to accelerate your application modernization journey to Liberty and containers. IBM Cloud Transformation Advisor (Transformation Advisor) is an application modernization tool that is entitled through IBM WebSphere Hybrid Edition. Transformation Advisor helps you quickly evaluate on-premises Java EE applications for deployment to the cloud. The Transformation Advisor tool provides the following value: identify the Java EE programming models in the app. determine the complexity of apps by listing a high-level inventory of the content and structure of each app. highlight Java EE programming model and WebSphere API differences between the WebSphere profile types identify Java EE specification implementation differences that might affect the app generate accelerators for deploying the application to Liberty and containers in a target environment. Additionally, the tool provides a recommendation for the right-fit IBM WebSphere Application Server edition and offers advice, best practices, and potential solutions to assess the ease of moving apps to Liberty or newer versions of WebSphere traditional. It accelerates application migrating to cloud process, minimize errors and risks and reduce time to market. 1. Introduction As shown in the image below, your company has several web applications deployed to WebSphere Application Server (WAS) environment. Your company wants to move these applications to the modern WebSphere Liberty server on a container-based cloud. However, you are not sure how much effort the migration process might take. You decide to use the IBM Transformation Advisor to do a quick evaluation of these applications without their source code to identify a good candidate application to move to Liberty and container-based cloud. After determining a candidate application for modernization to WebSphere Liberty, you use the accelerators generated by TA to deploy and run the application to WebSphere Liberty on your local developer machine and in containers to validate the solution. 2. Objective The objectives of this lab are to: Learn how to collect Java application and configuration data using the Transformation Advisor Data Collector tool. Learn how to use the Transformation Advisor to evaluate the effort involved to modernize to Liberty and container-based clouds and identify good application candidates for modernization. Learn how to use the accelerators generated by Transformation Advisor to deploy a candidate application to WebSphere Liberty and containers. 3. Prerequisites The following prerequisites must be completed prior to beginning this lab: Familiarity with basic Linux commands Have internet access Have a SkyTap lab environment ready 4. The lab environment One Linux VM is included in the environment and has been provided for this lab. The Workstation-Liberty-TA-M2m VM will be referred as the \u201c workstation \u201d VM throughout the lab. The login credentials for the workstation VM are: User ID: ibmdemo Password: passw0rd Transformation Advisor (TA) has already been installed on the Workstation VM. TA local runs in Docker containers. Get started using Transformation Adviser for yourself: http://ibm.biz/cloudta 5. Lab Tasks In this lab, you will use the Transformation Advisor to identify a good candidate application for moving to WebSphere Liberty and containers. To identify which Java EE programming models are on the server, you would typically run the Transformation Advisor Data Collector tool against a WebSphere server or cell. For this lab, you will simulate the process of running the data collector which generates a \u201cdata collection\u201d which is a zip file containing the inventory of the application, structure of each application, the WebSphere server configuration required for the application, and various analysis reports. For this lab environment, the data collection zip archive file has already been generated. You will import that zip file into the Transformation Advisor UI for application analysis. Using Transformation Advisor, you will gain insights into potential migration issues that may need to be remediated if you move the application to Liberty and containers. Reviewing the analysis reports, you will determine the complexity of the development effort required and select a candidate application to migrate to Liberty in a container-based cloud. Here are the activities involved in this process: Simulate running the Transformation Advisor Data Collector tool against the WebSphere Application Server to get application data Upload the data collection zip archive file that was generated by the data collector, into Transformation Advisor UI for analysis. Review the analysis and reports that Transformation Advisor generates to identify the right candidate application for a rapid and cost-effective migration to Liberty and container-based cloud. 6. Execute Lab Tasks 6.1 Log in to the workstation VM and Get Started If the VM is not already started, start it by clicking the play button for the whole group. After the VMs are started, click the Workstation VM icon to access it. If you see a screen displaying only \u201c ibmdemo \u201d. Click on the screen to get to the password prompt to login. Login with ibmdemo ID. Click on the ibmdemo icon on the screen. When prompted for the password for ibmdemo , enter \" password \" as the password: Resize the Skytap environment window for a larger viewing area while doing the lab. From the Skytap menu bar, click on the \" Fit to Size \" icon. This will enlarge the viewing area to fit the size of your browser window. 6.2 The WebSphere applications to be assessed The illustration below shows the WebSphere applications that are deployed to the WebSphere Application Server (WAS) environment. We already ran the Transformation Advisor Data Collection tool against the WebSphere server and provided the resulting data collection zip archive file on the Workstation VM to be used in the lab. You will simulate the data collection process. However, not actually run the data collector since this lab environment does not have access to the WebSphere environment. As illustrated below, Transformation Advisor will collect the application data for the following five applications. During the analysis of these applications, you will gain important insights regarding these applications, their JEE technologies used, relative complexity of each application, and detailed analysis of the overall effort and complexity of moving each application to Liberty and container-based cloud environments. In the Enterprise Applications list above, you can see the applications that deployed to the WebSphere Application Server environment. Next, you use Transformation Advisor to analyze these applications to identify a good candidate to be moved to Liberty. 6.3 Launch Transformation Advisor (local) The Transformation Advisor can evaluate any Java based applications. In this lab, you are going to use it to evaluate whether the on-premises WebSphere application, Mod Resorts , is suitable to move to Liberty and what the effort might be to get it there. The Transformation Advisor is installed locally on the Workstation VM. Launch the Transformation Advisor tool using the steps below. From Workstation VM Desktop Tool Bar, click the Terminal icon to open a Terminal window. Clone the GitHub repo that includes artifacts required for this lab cd /home/ibmdemo git clone https://github.com/IBMTechSales/student-tech-academy-platform.git Once completed, the local lab artifacts repo is cloned at /home/ibmdemo/student-tech-academy-platform directory on the Workstation desktop. Launch the Transformation Advisor with commands: cd /home/ibmdemo/TA_LOCAL/transformationAdvisor/transformation-advisor-local-3.2.1 ./launchTransformationAdvisor.sh Wait for Transformation Advisor to initialize and display the action menu list. Type 5 and press Enter to start the Transformation Advisor . The Transformation Advisor application is started, right-click the application URL link and select Open Link to launch it in a web browser window This Transformation Advisor Home page is displayed in the Web Browser. In the next section, you will use the Transformation Advisor UI to download the data collector utility for the environment that the WebSphere Application Server would be running, such as Windows or Linux. 6.4 Download Transformation Advisor Data Collector utility Now the Transformation Advisor is running, you will download its Data Collector utility that would run on a WebSphere Application Server. To evaluate on-premises Java applications, you need to run Transformation Advisor Data Collector utility against the Application server environment. It will extract application information from the environment. The utility can be downloaded from the Transformation Advisor UI. From the Transformation Advisor Home page, create a new workspace a. Click the Create New button b. Enter the workspace name as Evaluation, then click the Create button A workspace is a designated area that will house the migration recommendations provided by Transformation Advisor from your application server environment. You can name and organize these however you want, whether it\u2019s by business application, location, or teams Once the Workspace is created, you will have options to either download the Data Collector utility or upload existing data file. In this lab, we are going to perform the following steps: Download the Data Collector utility for the Linux environment Simulate running the data collector Upload an existing data collection zip file into Transformation Advisor for analysis Use the accelerators generated by Transformation Advisor to deploy the Mod Resorts application to Liberty, and to containers. Click the Download button to download the data collector for Linux In the Download page, you can download data collector utility based on your source operating system for your WebSphere environment. It also shows how to use the command line utility to collect application and configuration data from WebSphere, WebLogic, and Tomcat servers. a. Since the lab VM is a Linux OS, click Download Linux to get the utility. b. In the Chrome browser window, when the download is complete, you will see the file shown in the bottom banner of the browser window. The zipped Data Collector utility file will be saved in / home/ibmdemo/Downloads directory of the Workstation VM. Continue to the next section of the lab to simulate running the data collector utility. 6.5 Simulate running the Transformation Advisor Data Collector utility After downloading the zipped Data Collector utility, it needs to be unpacked and run against a WebSphere Application server (WAS) to collect all the data of deployed applications and their configuration from the WAS server. Now, let\u2019s simulate the steps to run the data collector. Go back to the terminal window and navigate the /home/ibmdemo/Downloads directory and view its contents with commands: cd /home/ibmdemo/Downloads/ ls -l | grep transformationadvisor You can see the downloaded data collector utility file named \u201c transformationadvisor-Linux_Evaluation.tgz \u201d Extract the data collector utility using the following command: tar xvfz transformationadvisor-Linux_Evaluation.tgz The data collector utility will be extracted to /home/ibmdemo/Downloads /transformationadvisor-3.2.1 directory. Note: At this point, the data collector is ready to execute against a WebSphere environment. Return to the Transformation Advisor UI in the Web browser to view the section on \u201c Run the Tool \u201d, which shows the command to run on the WebSphere environment. a. From the Data Collector page, scroll down to the \u201c Run Tool \u201d section. The data collector command that would be executed is based on the domain and analysis type selections you make in this section. Choose the IBM WebSphere Domain. Other domains include other JAVA EE runtimes. Note: The data collector tool command changes based on this selection. Select the Analysis type of \u201c Apps and Configuration \u201d Selecting Apps & Configuration ensures that the application data and server configuration data is collected. The server configuration data is extremely helpful in Transformation Advisor to generate deployment artifacts in the migration bundle, which we will explore later in the lab. Review the data collector command that is shown based on your selections. If you were going to run the command, there are a few additional things that need to happen. Replace the \\<WEBSPHERE_HOME_DIR> and \\<PROFILE_NAME> variables with the values from the WebSphere environment If the WebSphere environment is not connected to the VM where Transformation Advisor is running, then the data collector utility that was downloaded must be copied and unpacked to the WebSphere environment. 6.5.1 FOR ILLUSTRATIVE PURPOSES ONLY: Simulation of running the Transformation Advisor Data Collector utility Important: This section is for illustrative purposes only. DO NOT RUN THE COMMANDS shown! If the WebSphere Application Server and Transformation Advisor has connectivity, the data collector could be run as follows. Example of the Data Collector utility command to start collect the deployed applications information on the WebSphere Application server. ./bin/transformationadvisor -w /opt/ibm/WebSphere/AppServer -p AppSrv01 Type 1 to accept the license agreement and press Enter , as illustrated below The utility will start to collect application data. This process takes time to complete, depending on how many applications are deployed on the WebSphere Application server. When the collection utility completes, you will see the following message; \u201c Thank you for uploading your data. You can proceed to the application UI for doing further analysis.\u201d Your application data is collected, it is saved as a zip file \u201c AppSrv01.zip\u201d , named based on the WebSphere profile that was analyzed. In general, if your application server and the Transformation Advisor are in the same network infrastructure, the collected data will be automatically uploaded to Transformation Advisor for you to view the analysis results. Otherwise, you must manually upload the data to Transformation Advisor before you can view the results. 6.6 Upload the data collection into Transformation Advisor In this section, you will upload the data collection zip file \u201c AppSrv01.zip \u201d from the WebSphere environment for analysis. Typically, before you can upload the data collector zip files, you will need to download the appropriate data collector for your target environments operation environment, such as Linux, Windows, etc. Additionally, you would run the data collector in the target environment to collect the data for your applications. Then, you can import the collection data into Transformation Advisor for analysis. Tip: As noted in the previous section, the data collection steps have already been done, and the resulting AppSrv01.zip file is provided for you in the lab environment. Go back to the Transformation Advisor page in the web browser, click the \u201c Workload type \u201d link to go to the Recommendations page. From the Evaluation workspace, upload the \u201c AppSrv01.zip \u201d data collection file a. Click the Upload button to upload a data collection file b. From the Upload Data page, click the Drop or add file link c. Navigate to the location of the data collection file and add the AppSrv01.zip file. Then click the Open button on the Download page. Home > ibmdemo > openshift-workshop-was > labs > Liberty > TA-labs > AppSrv01.zip d. The AppSrv01.zip data collection file is now ready to be uploaded. Click the Upload button to continue. Once the data collection has been uploaded to Transformation Advisor, you are redirected back to the TA Recommendations screen. Notice that the page shows \u201c All Java applications \u201d from the WebSphere Application Server profile named AppSrv01 . The following details are included in the workspace summary: Total Applications : The total number of applications in the workspace. Avg. cost per application : The average number of days of development effort required to migrate an application. Common Code : The total cost to migrate all the common code in the workspace to the target platform. Unique app code : The total cost to migrate all the unique app code (code that is not shared between applications) in the workspace to the target platform. Total cost : The total cost to migrate all the applications and common code in the workspace to the target platform. In the next section, you will use Transformation Advisor to view the application data analysis that was collected. 6.7 Evaluate On-Premises Java Applications In this section, you are going to use the Transformation Advisor UI to view the application data analysis results that was collected in the previous section. From the \u201c All Java applications\u201d page, you can see there was a total of 5 applications analyzed from the WAS server. When data is uploaded, Transformation Advisor automatically detects the host machine the data came from, meaning, where the WebSphere application server apps were running. TA creates a corresponding collection and adds the applications there. The collection name can be overridden when running the data collector or edited in the transformation Advisor UI after the data is uploaded. In this example, the default collection name is used: admin.ibm.demo , which is the host machine where the data came from. Click on the \u201c Collections \u201d drop-down icon and view the collection name: \u201c admin.ibm.demo \u201d Transformation advisor analyzes all the application code and common code that is shared across applications and provides an estimated total cost for migrating the apps and common code in the workspace. Total cost is the number of days of development cost to migrate that code to run on the selected migration target . In this example, WebSphere Liberty is the selected migration target. The Migration targets include: Open Liberty WebSphere Liberty WebSphere Traditional You can choose multiple migration targets and Transformation Advisor will provide the workspace total cost effort for each of the selected targets. This provides a high-level view of the scope of work to migrate all the applications in the collection to specific migration targets. Depending on the applications, you may find that the effort to migrate to Open Liberty requires more effort that migrating to WebSphere Liberty. This is because Open Liberty does not include all the Java EE API specifications that are included in WebSphere Liberty. Click on the Migration targets drop-down and select all three migration targets and notice the different development costs associated with migration all 5 applications in the workspace to the various migration target environments. Here you can see that moving the applications in the collection to WebSphere traditional requires zero development costs, meaning there is no code changes necessary. However, moving to WebSphere Liberty may require 2.5 days and Open Liberty may take 6 days of development time to update the application code to run on those target runtimes. The \u201c All Java applications\u201d page also shows the application summary analysis results for all the apps from the AppSrv01 profile for each of the selected migration targets. For each app / migration target combination, you can see these results: Java application Collection / Profile name Complexity Issues Common code files Application cost (in days) Migration plan The following details are included in the summary table (this is the per-application view): Application Name : The name of the EAR/WAR file found on the application server. Collection/Profile : Collection represents the hostname of the machine where the application resides. The profile represents the profile name in the application server where the application is installed. Complexity : Indicates how complex Transformation Advisor considers this application to be if you were to migrate it to the cloud. Issues : The number and severity of potential issues with the migration of the application. Common code files : The number of common code files this aplication uses. A file is considered common if it is from a Shared Library or is used by at least one other application. Application cost in days : Provides an estimate in days for the development effort to perform the migration for just this application. Cost estimates calculated by Transformation Advisor are high-level estimates only and may vary widely based on skills and other factors not considered by the tool. Migration plan : accelerator files generated by Transformation advisor to aide in building and deploying the selected application to the target runtime. Mod Resorts is one of the applications that we want to consider migration to Liberty. In this section you will review the analysis results for the modresorts-1_0_war.ear application and determine if it is a good candidate for migration to Open Liberty or WebSphere liberty. First, let\u2019s narrow the focus in Transformation Advisor to view only the modresorts-1_0_war.ear application. a. In the search bar, type modresorts which will narrow the application list to only the Mod Resorts application for all three migration targets In this example, if you want to move the modresorts-1_0_war.ear application to Open Liberty, the complexity level is Simple , which indicates that the application code does not need to be changed before it can be moved to Open Liberty. The application has no dependency, does not have any common code or shared library files. It has two minor (informational level) issues. The estimated development effort is zero day because no code change is required. Notice that the modresorts application is also simple to migrate to the WebSphere Liberty and WebSphere traditional migration targets. For this lab, you will focus on the modernization of moderesorts-1.0_war.ear to Open Liberty. Next, you will look at the analysis results for moderesorts-1_0_war.ear application in detail. Click the modresorts-1_0_war.ear link targeting Open Liberty to expand its analysis results. The first section in the detail analysis summary page is the Complexity rules section . The overall complexity for the application is simple , indicating that the application can be directly moved to Open Liberty without any code change. Scroll down to Complexity Rules section. You can see there is no code change required and no development cost, the estimate migration over all develop cost is 0 days . This estimate is based on data from IBM Services engagements, which includes migrating the application code, but does not encompass the full scope of a migration project that would include server configuration, testing, etc. Expand the Issues and details section. You can see the only minor potential issue listed is on configuring the application in Docker container. Next, scroll down to the bottom of the page and click the Technology Report link, this opens a new browser window to show the application Evaluation Report. The Technology report lists all java technologies the application used and whether these technologies are supported by a specific WebSphere platform from Liberty for Java on IBM Cloud to WebSphere traditional for z/OS. It is used to determine whether a particular WebSphere product is suitable for an application. TIP: If the complexity of migrating to the target environment is \u201c Complex \u201d , it means that some APIs are not available in the target runtime and application will have to be rewritten to use different APIs. As you can see from the report, the Mod Resorts application only uses Java Servlet which is supported by all WebSphere editions. Go back to the Transformation Advisor browser tab and click the Analysis Report link. The Detailed Migration Analysis Report opened in a new browser window. This is the deep-dive report which shows all issue found at the code level. a. Scroll down to Detailed Results by Rule section, you can see all the java technology issues identified based on different migration rules. For the Mod Resorts application, there are two warning rules regarding the application configuration in Docker containers. b. Click the Show results link next to the warning rules. You can see the detail analysis of the issue at code level, in a specific class file and specific line. This helps developers to pinpoint where the issue is, or potential issue may be. c. Click the Show rule help link. This expands the Rule Help section which provides recommended solutions on how to fix the issue. For the Docker container configuration issue, the utility provides best practice suggestion to externalize the configuration for the container. Go back to the Transformation Advisor page and click the Inventory Report link. The Inventory Report shows up. This report helps you examine what is in your application, including the number of modules, their relationships, and the technologies in those modules. It also gives you a view of all the utility JAR files in the application, and the Java package names in the jar files, which will help identify if the classes are the customers application code or 3 rd party code. Potential deployment problems and performance considerations are also included. a. Scroll down to view this report which serves as good decision-making tool to info you what is inside your application runtime, and to help you to have a better understanding of the application runtime, the components it has and the relationships among them. In the Inventory report, view the package names of the classes in the utility Jars a. Scroll down to view the Contained Archives section and click on the \u201c show details \u201d link next to modresorts-1.0.war b. Then scroll down to the Utility JAR files and click on the \u201c show details \u201d link next to Utility JAR files c. View the Archive names of the jar files and the packages used in the JAR files. This is a good way to determine if the code in the utility JARS include customer code or if they are 3 rd party jars like (org.pache*). Additionally, if the application migration complexity is SIMPLE, you may want to verify if the utility jars include any company packages that begin with org or other package names that are IGNORED by default in the Transformation Advisor data collector. It could be possible that application code was not analyzed due to package names that are ignored by the data collector From the analysis reports you reviewed above, you know that the Mod Resorts application is supported by Open Liberty, and the issue that the tool identified would not affect the application migration. You can confidently select the application as a good candidate for migrating to Open Liberty with minimal effort. 6.8 Overview of the Mod Resorts application From the insights gained from Transformation Advisor, you learned that the Mod Resorts is a simple EE application and is a good candidate for moving to Open Liberty and container-based clouds. For illustration purposes, in this short section, a few screen shots are captured to illustrate the Mod Resorts application. The Mod Resorts application home page is illustrated here: The user would select the destination of their travel Perhaps the user wants to go to PARIS, FRANCE. Mod Resorts shows the weather of the city. Continue to the next section of the lab where you are briefly introduced to Transformation Advisor\u2019s migration plan. The migration plan includes a migration bundle of generated deployment artifact that accelerate the deployment of the application to Liberty and container-based cloud deployment. 7. Explore the migration bundle for the Mod Resorts application Transformation Advisor display details about the migration bundle that it generated to accelerate the modernization of applications to Liberty or traditional WebSphere in containers and to OpenShift. The migration bundle includes diverse artifacts, depending on the needs of the application to accelerate the build and deployment of an application Docker image into OpenShift platform. The user can choose to create a migration bundle for either: binary project of an application (uploading a WAR/EAR file and its dependent libraries) source code project of an application, so that the application source files can be modernized and maintained Now, let\u2019s quickly explore the Migration Plan for the Mod Resorts application to see the artifacts that Transformation Advisor creates to expedite the app deployment to OpenShift Platform. Return to the \u201c All Java applications \u201d page in Transformation Advisor which displays the Java application summary list Ensure only the Open Liberty migration target is selected Click on the Migration plan link located next to the Mod Resorts application analysis for Open Liberty, which will display migration plan for modresorts for the Open Liberty target Select the Binary option in the migration plan. Using the Binary option requires that you upload the Mod Resorts application binary (WAR or EAR), which will be included in the migration bundle along with the deployment artifacts that Transformation Advisor generated. a. Select Manual upload option under the Application dependencies section. Here you will manually upload the Mod Resorts WAR file to the migration bundle. b. Click the \u201c Drag or add file\u201d link to add the md resorts WAR file to the migration bundle c. Navigate to: Home > ibmdemo > openshift-workshop-was > labs > Liberty > TA-labs > modresorts-1.0.war Scroll down to the Migration Files section of the migration plan. Notice the files that were generated by Transformation Advisor to accelerate build and deployment of the application to Liberty, containers, and OpenShift. To accelerate the application modernization, the artifacts produced by Transformation Advisor include: server.xml : the configuration for the Liberty server pom.xml : Build the application using Maven Application CR : Custom Resource for the application to be deployed to OpenShift via the Open Liberty Operator Dockerfile : Create the Docker image for the application The user will be able to choose to download the artifacts as a migration bundle or send the bundle contents into a Git repository . Click the Download bundle link to download the bundle of artifacts to the local filesystem on the Workstation VM. The modresorts10war_migrationBundle.zip file will be downloaded to the /home/ibmdemo/Downloads directory Unzip the migration bundle artifacts to a new folder on the Workstation VM a. From a terminal window, run the following commands to unzip the migration bundle to a new directory named \" modresorts-bundle \": mkdir /home/ibmdemo/modresorts-bundle cd /home/ibmdemo/modresorts-bundle cp ~/Downloads/modresorts10war_migrationBundle.zip ~/modresorts-bundle unzip ~/modresorts-bundle/modresorts10war_migrationBundle.zip ls View the server.xml file. DO NOT CHANGE THE FILE CONTENTS. The server.xml file in the migration bundle is the Liberty server configuration file generated by Transformation Advisor, configured for the modresorts application. gedit ~/modresorts-bundle/src/main/liberty/config/server.xml The Liberty features list include features that the application requires. mpMetrics feature is included, which provides a /metrics endpoint from which you can access all metrics that are emitted by the Open Liberty server and deployed applications. Variables are used so that the values that are likely to be different between environments can easily be overridden by external configurations like environment variables or configMaps and Secrets in Kubernetes. Close the editor when you finish reviewing the file. DO NOT SAVE any changes to the contents. View the Dockerfile file. Do not change the file contents. The Dockerfile file in the migration bundle is used to build the container image for running the modresorts application on a Liberty runtime in a containerized environment such ads Docker, Kubernetes, or Red Hat OpenShift. The Dockerfile was generated by Transformation Advisor, configured for the building the modresorts application. gedit ~/modresorts-bundle/Dockerfile The Dockerfile is a two-stage Dockerfile. The first phase is the \u201c build-stage \u201d that creates a docker image for the modresorts application. The second stage uses the Open Liberty kernel container image and the build artifacts produced from the \u201cbuild-stage\u201d to build the modresorts container image with the modresorts application and configuration files for deploying to a container environment. Close the editor when you finish reviewing the file. DO NOT SAVE any changes to the contents. 8. Use Transformation Advisor deployment accelerators to deploy and run the Mod Resorts application on Open Liberty In this section, you will install Open Liberty, create a new Liberty server, and leverage the artifacts generated by Transformation Advisor to configure and run the Mod Resorts application on your new Open Liberty server. Tip: Open Liberty is installed from a zip archive file. For the lab, the Open Liberty zip archive has already been downloaded to the lab environment. To get started, you will create a new directory where you would like to install Open Liberty. Then unzip the archive. That\u2019s it, Open Liberty is installed. Install Open Liberty on the VM a. From a Terminal window, run the following commands to perform an archive installation of Open Liberty mkdir ~/Liberty cd ~/Liberty unzip ~/Student/labs/TA-labs/openliberty-javaee8-21.0.0.12.zip -d ~/Liberty b. Open Liberty is installed to the \\~/Liberty/wlp directory. Change to Open Liberty \u201c bin \u201d directory, which is where the Open Liberty binaries are located. cd wlp/bin Use the server command to create a new Open Liberty server named modresorts_server ./server create modresorts_server Use the server command to start the Open Liberty server named modresorts_server ./server start modresorts_server Open a new Terminal window and view the Open Liberty server log file named \u201cmessages.log\u201d tail -f ~/Liberty/wlp/usr/servers/modresorts_server/logs/messages.log a. Look for the message that the modresorts server started successfully At this point you have an Open Liberty Server running with a defaultserver configuration. However, there are no applications installed(deployed). Next, you will copy the Open Liberty server configuration file that TA generated for the Mod Resorts application. Then you will copy the Mod Resorts binary (WAR) to the Open Liberty server, in which case the application will be deployed and started. Copy the server.xml file that Transformation Advisor, which includes the Open Liberty server configuration for the modresorts application a. Return to the Terminal window where you started the Open Liberty Server. b. Run the following command to copy the server.xml file to the modresorts_server configuration directory. cp ~/modresorts-bundle/src/main/liberty/config/server.xml ~/Liberty/wlp/usr/servers/modresorts_server c. In the Terminal window running the \u201c tail \u201d command on the Open Liberty log file, notice that the server is being updated to reflect the updates in the new server.xml file that we copied into the Liberty runtime configuration. Note: You will see messages that specific Liberty features being removed, and others being added, based on the new server.xml file that is loaded. Install the modresorts application to the Open Liberty server, using the WAR file that is included in the Transformation Advisor migration bundle. cp ~/modresorts-bundle/target/modresorts-1.0.war ~/Liberty/wlp/usr/servers/modresorts_server/apps The command above copied the modresorts application WAR file to the Open Liberty \u201c apps \u201d folder, which where the server.xml file is configured to run the application. In the Terminal window running the \u201c tail \u201d command on the Open Liberty log file, notice that the server is being updated to reflect the modresorts application being started. Run the modresorts application from the Chrome browser on the VM. The context root for the application is \u201c/resorts\u201d and is defined in the Open Liberty server.xml file. http://localhost:9080/resorts a. You may click the drop-down menu for \u201c WHERE TO ?\u201d and select a destination Tip! If the application does not respond when clicking on the \u201cWHERE TO?\u201d menu, increase the window size of the Chrome browser. This appears to be a glitch with the application or Chrome browser Stop the Open Liberty server a. Return to the Terminal window where you started the Open Liberty Server b. Run the following command to stop the server named modresorts_server ./server stop modresorts_server Use CTL-C to Stop the \u201c tail \u201d command in the 2 nd Terminal window 9. Use Transformation Advisor accelerators to run the Mod Resorts application on Open Liberty in containers In this section, you will use the Dockerfile to build a docker image and run the modresorts application in a local Docker container. The Dockerfile is a two-stage Dockerfile: - The first phase is the \u201c build-stage \u201d that creates a docker image for the modresorts application. - The second stage uses the Open Liberty kernel container image and the build artifacts produced from the \u201cbuild-stage\u201d to build the modresorts container image with the modresorts application and configuration files for deploying to a container environment. - **RUN features.sh** downloads the Open Liberty features that are defined in the server.xml file - **RUN configure.sh** installs the Open Liberty features into the Docker image. Build the Docker image that includes the modresorts application on Open Liberty a. From a Terminal window, change to the directory where the Transformation Advisor migration bundle is located. b. Run the Docker build command to build the image The name of the docker image will be modresorts:1.0, as specified by the -t (tag) parameter. The Dockerfile used is in the current directory, as specified by the training dot on the command cd ~/modresorts-bundle docker build --no-cache -t modresorts:1.0 . When complete, you will see that the Docker image was created and tagged as \u201c modresorts:1.0 \u201d c. List the Docker image and its tag. The name of the image is \u201c modresorts \u201d and is tagged as \u201c 1.0 \u201d docker images | grep modresorts Run the Docker image -d runs the docker command in detached mode -p maps the internal pot 9080 to an external port 9081 --name specifies the name for the docker container that gets spun up Modresorts:1.0 is the name of the docker image to use to spin up the new container docker run -d -p 9081:9080 --name modresorts modresorts:1.0 Verify the docker container is running docker ps | grep modresorts The \u201c docker ps \u201d command lists docker containers that are \u201crunning\u201d. Running \u201c docker ps -a \u201d lists all docker containers, including containers that are stopped. View the Open Liberty log in the \u201c modresorts \u201d container to verify the modresorts application was installed and is running docker logs modresorts Run the modresorts application from the Web Browser. The application is exposed on port: 9081 The application context root is: /resorts http://localhost:9081/resorts a. You may click the drop-down menu for \u201c WHERE TO ?\u201d and select a destination Tip! If the application does not respond when clicking on the \u201cWHERE TO?\u201d menu, increase the window size of the Chrome browser. This appears to be a glitch with the application in Chrome browser Stop and remove the docker container. Then check that the container has been removed, by using the \u201c docker ps -a\u201d command docker stop modresorts docker rm modresorts docker ps -a | grep modresorts Remove the modresorts docker image. Then use the \u201c docker images \u201d command to verify the image has been removed docker rmi modresorts:1.0 docker images | grep modresorts Summary In this lab, you learned how to evaluate the existing Java application using IBM Cloud Transformation Advisor. You learned how to use Transformation Advisors generated deployment accelerators from the migration bundle to build and run an application in Open Liberty in stand-alone mode on a VM and in containers. As a part of IBM Application Modernization solutions, the Transformation Advisor tool provides a recommendation for the right-fit IBM WebSphere Application Server edition and offers advice, best practices, and potential solutions to assess the ease of moving apps to Liberty or to WAS container, or to newer versions of WebSphere traditional. Transformation Advisor accelerates application migrating to Liberty and containers and helps minimize errors and risks and reduce time to market. Congratulations! You have successfully completed the lab \u201cExploring IBM Transformation Advisor data collection, app assessments, and deployment accelerators\u201d","title":"Explore IBM Transformation Advisor data collection, app assessments, and deployment accelerators"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#explore-ibm-transformation-advisor-data-collection-app-assessments-and-deployment-accelerators","text":"","title":"Explore IBM Transformation Advisor data collection, app assessments, and deployment accelerators"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#hands-on-scenario-using-tas-websphere-data-collector-java-application-assessment-and-deployment-accelerators-for-modernization-to-liberty-and-containers","text":"","title":"Hands-on scenario using TA\u2019s WebSphere Data collector, Java application assessment, and deployment accelerators for modernization to Liberty and containers"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#explore-ibm-transformation-advisor","text":"This lab provides fundamental hands-on experience of the evaluation process of WebSphere application for their modernization journey to Liberty and container-based clouds. It shows the value of using Transformation Advisor (TA) to evaluate on-premises Java applications and identify a migration candidate for moving to the cloud. You will also learn how to use the deployment accelerators that TA generates to help deploy and run Java applications on Liberty and in containers. Upon completion of this lab, you will have gained experience using TA to quickly analyze on-premises Java applications without accessing their source code, estimate the effort in moving to container-based clouds, and using TA\u2019s deployment accelerators to accelerate your application modernization journey to Liberty and containers. IBM Cloud Transformation Advisor (Transformation Advisor) is an application modernization tool that is entitled through IBM WebSphere Hybrid Edition. Transformation Advisor helps you quickly evaluate on-premises Java EE applications for deployment to the cloud. The Transformation Advisor tool provides the following value: identify the Java EE programming models in the app. determine the complexity of apps by listing a high-level inventory of the content and structure of each app. highlight Java EE programming model and WebSphere API differences between the WebSphere profile types identify Java EE specification implementation differences that might affect the app generate accelerators for deploying the application to Liberty and containers in a target environment. Additionally, the tool provides a recommendation for the right-fit IBM WebSphere Application Server edition and offers advice, best practices, and potential solutions to assess the ease of moving apps to Liberty or newer versions of WebSphere traditional. It accelerates application migrating to cloud process, minimize errors and risks and reduce time to market.","title":"Explore IBM Transformation Advisor"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#1-introduction","text":"As shown in the image below, your company has several web applications deployed to WebSphere Application Server (WAS) environment. Your company wants to move these applications to the modern WebSphere Liberty server on a container-based cloud. However, you are not sure how much effort the migration process might take. You decide to use the IBM Transformation Advisor to do a quick evaluation of these applications without their source code to identify a good candidate application to move to Liberty and container-based cloud. After determining a candidate application for modernization to WebSphere Liberty, you use the accelerators generated by TA to deploy and run the application to WebSphere Liberty on your local developer machine and in containers to validate the solution.","title":"1. Introduction"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#2-objective","text":"The objectives of this lab are to: Learn how to collect Java application and configuration data using the Transformation Advisor Data Collector tool. Learn how to use the Transformation Advisor to evaluate the effort involved to modernize to Liberty and container-based clouds and identify good application candidates for modernization. Learn how to use the accelerators generated by Transformation Advisor to deploy a candidate application to WebSphere Liberty and containers.","title":"2. Objective"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#3-prerequisites","text":"The following prerequisites must be completed prior to beginning this lab: Familiarity with basic Linux commands Have internet access Have a SkyTap lab environment ready","title":"3. Prerequisites"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#4-the-lab-environment","text":"One Linux VM is included in the environment and has been provided for this lab. The Workstation-Liberty-TA-M2m VM will be referred as the \u201c workstation \u201d VM throughout the lab. The login credentials for the workstation VM are: User ID: ibmdemo Password: passw0rd Transformation Advisor (TA) has already been installed on the Workstation VM. TA local runs in Docker containers. Get started using Transformation Adviser for yourself: http://ibm.biz/cloudta","title":"4. The lab environment"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#5-lab-tasks","text":"In this lab, you will use the Transformation Advisor to identify a good candidate application for moving to WebSphere Liberty and containers. To identify which Java EE programming models are on the server, you would typically run the Transformation Advisor Data Collector tool against a WebSphere server or cell. For this lab, you will simulate the process of running the data collector which generates a \u201cdata collection\u201d which is a zip file containing the inventory of the application, structure of each application, the WebSphere server configuration required for the application, and various analysis reports. For this lab environment, the data collection zip archive file has already been generated. You will import that zip file into the Transformation Advisor UI for application analysis. Using Transformation Advisor, you will gain insights into potential migration issues that may need to be remediated if you move the application to Liberty and containers. Reviewing the analysis reports, you will determine the complexity of the development effort required and select a candidate application to migrate to Liberty in a container-based cloud. Here are the activities involved in this process: Simulate running the Transformation Advisor Data Collector tool against the WebSphere Application Server to get application data Upload the data collection zip archive file that was generated by the data collector, into Transformation Advisor UI for analysis. Review the analysis and reports that Transformation Advisor generates to identify the right candidate application for a rapid and cost-effective migration to Liberty and container-based cloud.","title":"5. Lab Tasks"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#6-execute-lab-tasks","text":"","title":"6. Execute Lab Tasks"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#61-log-in-to-the-workstation-vm-and-get-started","text":"If the VM is not already started, start it by clicking the play button for the whole group. After the VMs are started, click the Workstation VM icon to access it. If you see a screen displaying only \u201c ibmdemo \u201d. Click on the screen to get to the password prompt to login. Login with ibmdemo ID. Click on the ibmdemo icon on the screen. When prompted for the password for ibmdemo , enter \" password \" as the password: Resize the Skytap environment window for a larger viewing area while doing the lab. From the Skytap menu bar, click on the \" Fit to Size \" icon. This will enlarge the viewing area to fit the size of your browser window.","title":"6.1 Log in to the workstation VM and Get Started"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#62-the-websphere-applications-to-be-assessed","text":"The illustration below shows the WebSphere applications that are deployed to the WebSphere Application Server (WAS) environment. We already ran the Transformation Advisor Data Collection tool against the WebSphere server and provided the resulting data collection zip archive file on the Workstation VM to be used in the lab. You will simulate the data collection process. However, not actually run the data collector since this lab environment does not have access to the WebSphere environment. As illustrated below, Transformation Advisor will collect the application data for the following five applications. During the analysis of these applications, you will gain important insights regarding these applications, their JEE technologies used, relative complexity of each application, and detailed analysis of the overall effort and complexity of moving each application to Liberty and container-based cloud environments. In the Enterprise Applications list above, you can see the applications that deployed to the WebSphere Application Server environment. Next, you use Transformation Advisor to analyze these applications to identify a good candidate to be moved to Liberty.","title":"6.2 The WebSphere applications to be assessed"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#63-launch-transformation-advisor-local","text":"The Transformation Advisor can evaluate any Java based applications. In this lab, you are going to use it to evaluate whether the on-premises WebSphere application, Mod Resorts , is suitable to move to Liberty and what the effort might be to get it there. The Transformation Advisor is installed locally on the Workstation VM. Launch the Transformation Advisor tool using the steps below. From Workstation VM Desktop Tool Bar, click the Terminal icon to open a Terminal window. Clone the GitHub repo that includes artifacts required for this lab cd /home/ibmdemo git clone https://github.com/IBMTechSales/student-tech-academy-platform.git Once completed, the local lab artifacts repo is cloned at /home/ibmdemo/student-tech-academy-platform directory on the Workstation desktop. Launch the Transformation Advisor with commands: cd /home/ibmdemo/TA_LOCAL/transformationAdvisor/transformation-advisor-local-3.2.1 ./launchTransformationAdvisor.sh Wait for Transformation Advisor to initialize and display the action menu list. Type 5 and press Enter to start the Transformation Advisor . The Transformation Advisor application is started, right-click the application URL link and select Open Link to launch it in a web browser window This Transformation Advisor Home page is displayed in the Web Browser. In the next section, you will use the Transformation Advisor UI to download the data collector utility for the environment that the WebSphere Application Server would be running, such as Windows or Linux.","title":"6.3 Launch Transformation Advisor (local)"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#64-download-transformation-advisor-data-collector-utility","text":"Now the Transformation Advisor is running, you will download its Data Collector utility that would run on a WebSphere Application Server. To evaluate on-premises Java applications, you need to run Transformation Advisor Data Collector utility against the Application server environment. It will extract application information from the environment. The utility can be downloaded from the Transformation Advisor UI. From the Transformation Advisor Home page, create a new workspace a. Click the Create New button b. Enter the workspace name as Evaluation, then click the Create button A workspace is a designated area that will house the migration recommendations provided by Transformation Advisor from your application server environment. You can name and organize these however you want, whether it\u2019s by business application, location, or teams Once the Workspace is created, you will have options to either download the Data Collector utility or upload existing data file. In this lab, we are going to perform the following steps: Download the Data Collector utility for the Linux environment Simulate running the data collector Upload an existing data collection zip file into Transformation Advisor for analysis Use the accelerators generated by Transformation Advisor to deploy the Mod Resorts application to Liberty, and to containers. Click the Download button to download the data collector for Linux In the Download page, you can download data collector utility based on your source operating system for your WebSphere environment. It also shows how to use the command line utility to collect application and configuration data from WebSphere, WebLogic, and Tomcat servers. a. Since the lab VM is a Linux OS, click Download Linux to get the utility. b. In the Chrome browser window, when the download is complete, you will see the file shown in the bottom banner of the browser window. The zipped Data Collector utility file will be saved in / home/ibmdemo/Downloads directory of the Workstation VM. Continue to the next section of the lab to simulate running the data collector utility.","title":"6.4 Download Transformation Advisor Data Collector utility"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#65-simulate-running-the-transformation-advisor-data-collector-utility","text":"After downloading the zipped Data Collector utility, it needs to be unpacked and run against a WebSphere Application server (WAS) to collect all the data of deployed applications and their configuration from the WAS server. Now, let\u2019s simulate the steps to run the data collector. Go back to the terminal window and navigate the /home/ibmdemo/Downloads directory and view its contents with commands: cd /home/ibmdemo/Downloads/ ls -l | grep transformationadvisor You can see the downloaded data collector utility file named \u201c transformationadvisor-Linux_Evaluation.tgz \u201d Extract the data collector utility using the following command: tar xvfz transformationadvisor-Linux_Evaluation.tgz The data collector utility will be extracted to /home/ibmdemo/Downloads /transformationadvisor-3.2.1 directory. Note: At this point, the data collector is ready to execute against a WebSphere environment. Return to the Transformation Advisor UI in the Web browser to view the section on \u201c Run the Tool \u201d, which shows the command to run on the WebSphere environment. a. From the Data Collector page, scroll down to the \u201c Run Tool \u201d section. The data collector command that would be executed is based on the domain and analysis type selections you make in this section. Choose the IBM WebSphere Domain. Other domains include other JAVA EE runtimes. Note: The data collector tool command changes based on this selection. Select the Analysis type of \u201c Apps and Configuration \u201d Selecting Apps & Configuration ensures that the application data and server configuration data is collected. The server configuration data is extremely helpful in Transformation Advisor to generate deployment artifacts in the migration bundle, which we will explore later in the lab. Review the data collector command that is shown based on your selections. If you were going to run the command, there are a few additional things that need to happen. Replace the \\<WEBSPHERE_HOME_DIR> and \\<PROFILE_NAME> variables with the values from the WebSphere environment If the WebSphere environment is not connected to the VM where Transformation Advisor is running, then the data collector utility that was downloaded must be copied and unpacked to the WebSphere environment.","title":"6.5 Simulate running the Transformation Advisor Data Collector utility"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#651-for-illustrative-purposes-only-simulation-of-running-the-transformation-advisor-data-collector-utility","text":"Important: This section is for illustrative purposes only. DO NOT RUN THE COMMANDS shown! If the WebSphere Application Server and Transformation Advisor has connectivity, the data collector could be run as follows. Example of the Data Collector utility command to start collect the deployed applications information on the WebSphere Application server. ./bin/transformationadvisor -w /opt/ibm/WebSphere/AppServer -p AppSrv01 Type 1 to accept the license agreement and press Enter , as illustrated below The utility will start to collect application data. This process takes time to complete, depending on how many applications are deployed on the WebSphere Application server. When the collection utility completes, you will see the following message; \u201c Thank you for uploading your data. You can proceed to the application UI for doing further analysis.\u201d Your application data is collected, it is saved as a zip file \u201c AppSrv01.zip\u201d , named based on the WebSphere profile that was analyzed. In general, if your application server and the Transformation Advisor are in the same network infrastructure, the collected data will be automatically uploaded to Transformation Advisor for you to view the analysis results. Otherwise, you must manually upload the data to Transformation Advisor before you can view the results.","title":"6.5.1 FOR ILLUSTRATIVE PURPOSES ONLY: Simulation of running the Transformation Advisor Data Collector utility"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#66-upload-the-data-collection-into-transformation-advisor","text":"In this section, you will upload the data collection zip file \u201c AppSrv01.zip \u201d from the WebSphere environment for analysis. Typically, before you can upload the data collector zip files, you will need to download the appropriate data collector for your target environments operation environment, such as Linux, Windows, etc. Additionally, you would run the data collector in the target environment to collect the data for your applications. Then, you can import the collection data into Transformation Advisor for analysis. Tip: As noted in the previous section, the data collection steps have already been done, and the resulting AppSrv01.zip file is provided for you in the lab environment. Go back to the Transformation Advisor page in the web browser, click the \u201c Workload type \u201d link to go to the Recommendations page. From the Evaluation workspace, upload the \u201c AppSrv01.zip \u201d data collection file a. Click the Upload button to upload a data collection file b. From the Upload Data page, click the Drop or add file link c. Navigate to the location of the data collection file and add the AppSrv01.zip file. Then click the Open button on the Download page. Home > ibmdemo > openshift-workshop-was > labs > Liberty > TA-labs > AppSrv01.zip d. The AppSrv01.zip data collection file is now ready to be uploaded. Click the Upload button to continue. Once the data collection has been uploaded to Transformation Advisor, you are redirected back to the TA Recommendations screen. Notice that the page shows \u201c All Java applications \u201d from the WebSphere Application Server profile named AppSrv01 . The following details are included in the workspace summary: Total Applications : The total number of applications in the workspace. Avg. cost per application : The average number of days of development effort required to migrate an application. Common Code : The total cost to migrate all the common code in the workspace to the target platform. Unique app code : The total cost to migrate all the unique app code (code that is not shared between applications) in the workspace to the target platform. Total cost : The total cost to migrate all the applications and common code in the workspace to the target platform. In the next section, you will use Transformation Advisor to view the application data analysis that was collected.","title":"6.6 Upload the data collection into Transformation Advisor"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#67-evaluate-on-premises-java-applications","text":"In this section, you are going to use the Transformation Advisor UI to view the application data analysis results that was collected in the previous section. From the \u201c All Java applications\u201d page, you can see there was a total of 5 applications analyzed from the WAS server. When data is uploaded, Transformation Advisor automatically detects the host machine the data came from, meaning, where the WebSphere application server apps were running. TA creates a corresponding collection and adds the applications there. The collection name can be overridden when running the data collector or edited in the transformation Advisor UI after the data is uploaded. In this example, the default collection name is used: admin.ibm.demo , which is the host machine where the data came from. Click on the \u201c Collections \u201d drop-down icon and view the collection name: \u201c admin.ibm.demo \u201d Transformation advisor analyzes all the application code and common code that is shared across applications and provides an estimated total cost for migrating the apps and common code in the workspace. Total cost is the number of days of development cost to migrate that code to run on the selected migration target . In this example, WebSphere Liberty is the selected migration target. The Migration targets include: Open Liberty WebSphere Liberty WebSphere Traditional You can choose multiple migration targets and Transformation Advisor will provide the workspace total cost effort for each of the selected targets. This provides a high-level view of the scope of work to migrate all the applications in the collection to specific migration targets. Depending on the applications, you may find that the effort to migrate to Open Liberty requires more effort that migrating to WebSphere Liberty. This is because Open Liberty does not include all the Java EE API specifications that are included in WebSphere Liberty. Click on the Migration targets drop-down and select all three migration targets and notice the different development costs associated with migration all 5 applications in the workspace to the various migration target environments. Here you can see that moving the applications in the collection to WebSphere traditional requires zero development costs, meaning there is no code changes necessary. However, moving to WebSphere Liberty may require 2.5 days and Open Liberty may take 6 days of development time to update the application code to run on those target runtimes. The \u201c All Java applications\u201d page also shows the application summary analysis results for all the apps from the AppSrv01 profile for each of the selected migration targets. For each app / migration target combination, you can see these results: Java application Collection / Profile name Complexity Issues Common code files Application cost (in days) Migration plan The following details are included in the summary table (this is the per-application view): Application Name : The name of the EAR/WAR file found on the application server. Collection/Profile : Collection represents the hostname of the machine where the application resides. The profile represents the profile name in the application server where the application is installed. Complexity : Indicates how complex Transformation Advisor considers this application to be if you were to migrate it to the cloud. Issues : The number and severity of potential issues with the migration of the application. Common code files : The number of common code files this aplication uses. A file is considered common if it is from a Shared Library or is used by at least one other application. Application cost in days : Provides an estimate in days for the development effort to perform the migration for just this application. Cost estimates calculated by Transformation Advisor are high-level estimates only and may vary widely based on skills and other factors not considered by the tool. Migration plan : accelerator files generated by Transformation advisor to aide in building and deploying the selected application to the target runtime. Mod Resorts is one of the applications that we want to consider migration to Liberty. In this section you will review the analysis results for the modresorts-1_0_war.ear application and determine if it is a good candidate for migration to Open Liberty or WebSphere liberty. First, let\u2019s narrow the focus in Transformation Advisor to view only the modresorts-1_0_war.ear application. a. In the search bar, type modresorts which will narrow the application list to only the Mod Resorts application for all three migration targets In this example, if you want to move the modresorts-1_0_war.ear application to Open Liberty, the complexity level is Simple , which indicates that the application code does not need to be changed before it can be moved to Open Liberty. The application has no dependency, does not have any common code or shared library files. It has two minor (informational level) issues. The estimated development effort is zero day because no code change is required. Notice that the modresorts application is also simple to migrate to the WebSphere Liberty and WebSphere traditional migration targets. For this lab, you will focus on the modernization of moderesorts-1.0_war.ear to Open Liberty. Next, you will look at the analysis results for moderesorts-1_0_war.ear application in detail. Click the modresorts-1_0_war.ear link targeting Open Liberty to expand its analysis results. The first section in the detail analysis summary page is the Complexity rules section . The overall complexity for the application is simple , indicating that the application can be directly moved to Open Liberty without any code change. Scroll down to Complexity Rules section. You can see there is no code change required and no development cost, the estimate migration over all develop cost is 0 days . This estimate is based on data from IBM Services engagements, which includes migrating the application code, but does not encompass the full scope of a migration project that would include server configuration, testing, etc. Expand the Issues and details section. You can see the only minor potential issue listed is on configuring the application in Docker container. Next, scroll down to the bottom of the page and click the Technology Report link, this opens a new browser window to show the application Evaluation Report. The Technology report lists all java technologies the application used and whether these technologies are supported by a specific WebSphere platform from Liberty for Java on IBM Cloud to WebSphere traditional for z/OS. It is used to determine whether a particular WebSphere product is suitable for an application. TIP: If the complexity of migrating to the target environment is \u201c Complex \u201d , it means that some APIs are not available in the target runtime and application will have to be rewritten to use different APIs. As you can see from the report, the Mod Resorts application only uses Java Servlet which is supported by all WebSphere editions. Go back to the Transformation Advisor browser tab and click the Analysis Report link. The Detailed Migration Analysis Report opened in a new browser window. This is the deep-dive report which shows all issue found at the code level. a. Scroll down to Detailed Results by Rule section, you can see all the java technology issues identified based on different migration rules. For the Mod Resorts application, there are two warning rules regarding the application configuration in Docker containers. b. Click the Show results link next to the warning rules. You can see the detail analysis of the issue at code level, in a specific class file and specific line. This helps developers to pinpoint where the issue is, or potential issue may be. c. Click the Show rule help link. This expands the Rule Help section which provides recommended solutions on how to fix the issue. For the Docker container configuration issue, the utility provides best practice suggestion to externalize the configuration for the container. Go back to the Transformation Advisor page and click the Inventory Report link. The Inventory Report shows up. This report helps you examine what is in your application, including the number of modules, their relationships, and the technologies in those modules. It also gives you a view of all the utility JAR files in the application, and the Java package names in the jar files, which will help identify if the classes are the customers application code or 3 rd party code. Potential deployment problems and performance considerations are also included. a. Scroll down to view this report which serves as good decision-making tool to info you what is inside your application runtime, and to help you to have a better understanding of the application runtime, the components it has and the relationships among them. In the Inventory report, view the package names of the classes in the utility Jars a. Scroll down to view the Contained Archives section and click on the \u201c show details \u201d link next to modresorts-1.0.war b. Then scroll down to the Utility JAR files and click on the \u201c show details \u201d link next to Utility JAR files c. View the Archive names of the jar files and the packages used in the JAR files. This is a good way to determine if the code in the utility JARS include customer code or if they are 3 rd party jars like (org.pache*). Additionally, if the application migration complexity is SIMPLE, you may want to verify if the utility jars include any company packages that begin with org or other package names that are IGNORED by default in the Transformation Advisor data collector. It could be possible that application code was not analyzed due to package names that are ignored by the data collector From the analysis reports you reviewed above, you know that the Mod Resorts application is supported by Open Liberty, and the issue that the tool identified would not affect the application migration. You can confidently select the application as a good candidate for migrating to Open Liberty with minimal effort.","title":"6.7 Evaluate On-Premises Java Applications"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#68-overview-of-the-mod-resorts-application","text":"From the insights gained from Transformation Advisor, you learned that the Mod Resorts is a simple EE application and is a good candidate for moving to Open Liberty and container-based clouds. For illustration purposes, in this short section, a few screen shots are captured to illustrate the Mod Resorts application. The Mod Resorts application home page is illustrated here: The user would select the destination of their travel Perhaps the user wants to go to PARIS, FRANCE. Mod Resorts shows the weather of the city. Continue to the next section of the lab where you are briefly introduced to Transformation Advisor\u2019s migration plan. The migration plan includes a migration bundle of generated deployment artifact that accelerate the deployment of the application to Liberty and container-based cloud deployment.","title":"6.8 Overview of the Mod Resorts application"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#7-explore-the-migration-bundle-for-the-mod-resorts-application","text":"Transformation Advisor display details about the migration bundle that it generated to accelerate the modernization of applications to Liberty or traditional WebSphere in containers and to OpenShift. The migration bundle includes diverse artifacts, depending on the needs of the application to accelerate the build and deployment of an application Docker image into OpenShift platform. The user can choose to create a migration bundle for either: binary project of an application (uploading a WAR/EAR file and its dependent libraries) source code project of an application, so that the application source files can be modernized and maintained Now, let\u2019s quickly explore the Migration Plan for the Mod Resorts application to see the artifacts that Transformation Advisor creates to expedite the app deployment to OpenShift Platform. Return to the \u201c All Java applications \u201d page in Transformation Advisor which displays the Java application summary list Ensure only the Open Liberty migration target is selected Click on the Migration plan link located next to the Mod Resorts application analysis for Open Liberty, which will display migration plan for modresorts for the Open Liberty target Select the Binary option in the migration plan. Using the Binary option requires that you upload the Mod Resorts application binary (WAR or EAR), which will be included in the migration bundle along with the deployment artifacts that Transformation Advisor generated. a. Select Manual upload option under the Application dependencies section. Here you will manually upload the Mod Resorts WAR file to the migration bundle. b. Click the \u201c Drag or add file\u201d link to add the md resorts WAR file to the migration bundle c. Navigate to: Home > ibmdemo > openshift-workshop-was > labs > Liberty > TA-labs > modresorts-1.0.war Scroll down to the Migration Files section of the migration plan. Notice the files that were generated by Transformation Advisor to accelerate build and deployment of the application to Liberty, containers, and OpenShift. To accelerate the application modernization, the artifacts produced by Transformation Advisor include: server.xml : the configuration for the Liberty server pom.xml : Build the application using Maven Application CR : Custom Resource for the application to be deployed to OpenShift via the Open Liberty Operator Dockerfile : Create the Docker image for the application The user will be able to choose to download the artifacts as a migration bundle or send the bundle contents into a Git repository . Click the Download bundle link to download the bundle of artifacts to the local filesystem on the Workstation VM. The modresorts10war_migrationBundle.zip file will be downloaded to the /home/ibmdemo/Downloads directory Unzip the migration bundle artifacts to a new folder on the Workstation VM a. From a terminal window, run the following commands to unzip the migration bundle to a new directory named \" modresorts-bundle \": mkdir /home/ibmdemo/modresorts-bundle cd /home/ibmdemo/modresorts-bundle cp ~/Downloads/modresorts10war_migrationBundle.zip ~/modresorts-bundle unzip ~/modresorts-bundle/modresorts10war_migrationBundle.zip ls View the server.xml file. DO NOT CHANGE THE FILE CONTENTS. The server.xml file in the migration bundle is the Liberty server configuration file generated by Transformation Advisor, configured for the modresorts application. gedit ~/modresorts-bundle/src/main/liberty/config/server.xml The Liberty features list include features that the application requires. mpMetrics feature is included, which provides a /metrics endpoint from which you can access all metrics that are emitted by the Open Liberty server and deployed applications. Variables are used so that the values that are likely to be different between environments can easily be overridden by external configurations like environment variables or configMaps and Secrets in Kubernetes. Close the editor when you finish reviewing the file. DO NOT SAVE any changes to the contents. View the Dockerfile file. Do not change the file contents. The Dockerfile file in the migration bundle is used to build the container image for running the modresorts application on a Liberty runtime in a containerized environment such ads Docker, Kubernetes, or Red Hat OpenShift. The Dockerfile was generated by Transformation Advisor, configured for the building the modresorts application. gedit ~/modresorts-bundle/Dockerfile The Dockerfile is a two-stage Dockerfile. The first phase is the \u201c build-stage \u201d that creates a docker image for the modresorts application. The second stage uses the Open Liberty kernel container image and the build artifacts produced from the \u201cbuild-stage\u201d to build the modresorts container image with the modresorts application and configuration files for deploying to a container environment. Close the editor when you finish reviewing the file. DO NOT SAVE any changes to the contents.","title":"7. Explore the migration bundle for the Mod Resorts application"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#8-use-transformation-advisor-deployment-accelerators-to-deploy-and-run-the-mod-resorts-application-on-open-liberty","text":"In this section, you will install Open Liberty, create a new Liberty server, and leverage the artifacts generated by Transformation Advisor to configure and run the Mod Resorts application on your new Open Liberty server. Tip: Open Liberty is installed from a zip archive file. For the lab, the Open Liberty zip archive has already been downloaded to the lab environment. To get started, you will create a new directory where you would like to install Open Liberty. Then unzip the archive. That\u2019s it, Open Liberty is installed. Install Open Liberty on the VM a. From a Terminal window, run the following commands to perform an archive installation of Open Liberty mkdir ~/Liberty cd ~/Liberty unzip ~/Student/labs/TA-labs/openliberty-javaee8-21.0.0.12.zip -d ~/Liberty b. Open Liberty is installed to the \\~/Liberty/wlp directory. Change to Open Liberty \u201c bin \u201d directory, which is where the Open Liberty binaries are located. cd wlp/bin Use the server command to create a new Open Liberty server named modresorts_server ./server create modresorts_server Use the server command to start the Open Liberty server named modresorts_server ./server start modresorts_server Open a new Terminal window and view the Open Liberty server log file named \u201cmessages.log\u201d tail -f ~/Liberty/wlp/usr/servers/modresorts_server/logs/messages.log a. Look for the message that the modresorts server started successfully At this point you have an Open Liberty Server running with a defaultserver configuration. However, there are no applications installed(deployed). Next, you will copy the Open Liberty server configuration file that TA generated for the Mod Resorts application. Then you will copy the Mod Resorts binary (WAR) to the Open Liberty server, in which case the application will be deployed and started. Copy the server.xml file that Transformation Advisor, which includes the Open Liberty server configuration for the modresorts application a. Return to the Terminal window where you started the Open Liberty Server. b. Run the following command to copy the server.xml file to the modresorts_server configuration directory. cp ~/modresorts-bundle/src/main/liberty/config/server.xml ~/Liberty/wlp/usr/servers/modresorts_server c. In the Terminal window running the \u201c tail \u201d command on the Open Liberty log file, notice that the server is being updated to reflect the updates in the new server.xml file that we copied into the Liberty runtime configuration. Note: You will see messages that specific Liberty features being removed, and others being added, based on the new server.xml file that is loaded. Install the modresorts application to the Open Liberty server, using the WAR file that is included in the Transformation Advisor migration bundle. cp ~/modresorts-bundle/target/modresorts-1.0.war ~/Liberty/wlp/usr/servers/modresorts_server/apps The command above copied the modresorts application WAR file to the Open Liberty \u201c apps \u201d folder, which where the server.xml file is configured to run the application. In the Terminal window running the \u201c tail \u201d command on the Open Liberty log file, notice that the server is being updated to reflect the modresorts application being started. Run the modresorts application from the Chrome browser on the VM. The context root for the application is \u201c/resorts\u201d and is defined in the Open Liberty server.xml file. http://localhost:9080/resorts a. You may click the drop-down menu for \u201c WHERE TO ?\u201d and select a destination Tip! If the application does not respond when clicking on the \u201cWHERE TO?\u201d menu, increase the window size of the Chrome browser. This appears to be a glitch with the application or Chrome browser Stop the Open Liberty server a. Return to the Terminal window where you started the Open Liberty Server b. Run the following command to stop the server named modresorts_server ./server stop modresorts_server Use CTL-C to Stop the \u201c tail \u201d command in the 2 nd Terminal window","title":"8. Use Transformation Advisor deployment accelerators to deploy and run the Mod Resorts application on Open Liberty"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#9-use-transformation-advisor-accelerators-to-run-the-mod-resorts-application-on-open-liberty-in-containers","text":"In this section, you will use the Dockerfile to build a docker image and run the modresorts application in a local Docker container. The Dockerfile is a two-stage Dockerfile: - The first phase is the \u201c build-stage \u201d that creates a docker image for the modresorts application. - The second stage uses the Open Liberty kernel container image and the build artifacts produced from the \u201cbuild-stage\u201d to build the modresorts container image with the modresorts application and configuration files for deploying to a container environment. - **RUN features.sh** downloads the Open Liberty features that are defined in the server.xml file - **RUN configure.sh** installs the Open Liberty features into the Docker image. Build the Docker image that includes the modresorts application on Open Liberty a. From a Terminal window, change to the directory where the Transformation Advisor migration bundle is located. b. Run the Docker build command to build the image The name of the docker image will be modresorts:1.0, as specified by the -t (tag) parameter. The Dockerfile used is in the current directory, as specified by the training dot on the command cd ~/modresorts-bundle docker build --no-cache -t modresorts:1.0 . When complete, you will see that the Docker image was created and tagged as \u201c modresorts:1.0 \u201d c. List the Docker image and its tag. The name of the image is \u201c modresorts \u201d and is tagged as \u201c 1.0 \u201d docker images | grep modresorts Run the Docker image -d runs the docker command in detached mode -p maps the internal pot 9080 to an external port 9081 --name specifies the name for the docker container that gets spun up Modresorts:1.0 is the name of the docker image to use to spin up the new container docker run -d -p 9081:9080 --name modresorts modresorts:1.0 Verify the docker container is running docker ps | grep modresorts The \u201c docker ps \u201d command lists docker containers that are \u201crunning\u201d. Running \u201c docker ps -a \u201d lists all docker containers, including containers that are stopped. View the Open Liberty log in the \u201c modresorts \u201d container to verify the modresorts application was installed and is running docker logs modresorts Run the modresorts application from the Web Browser. The application is exposed on port: 9081 The application context root is: /resorts http://localhost:9081/resorts a. You may click the drop-down menu for \u201c WHERE TO ?\u201d and select a destination Tip! If the application does not respond when clicking on the \u201cWHERE TO?\u201d menu, increase the window size of the Chrome browser. This appears to be a glitch with the application in Chrome browser Stop and remove the docker container. Then check that the container has been removed, by using the \u201c docker ps -a\u201d command docker stop modresorts docker rm modresorts docker ps -a | grep modresorts Remove the modresorts docker image. Then use the \u201c docker images \u201d command to verify the image has been removed docker rmi modresorts:1.0 docker images | grep modresorts","title":"9. Use Transformation Advisor accelerators to run the Mod Resorts application on Open Liberty in containers"},{"location":"lab-guides/md/lab5/Lab05-Evaluate-App-Using-Transformation-Advisor-v2.1/#summary","text":"In this lab, you learned how to evaluate the existing Java application using IBM Cloud Transformation Advisor. You learned how to use Transformation Advisors generated deployment accelerators from the migration bundle to build and run an application in Open Liberty in stand-alone mode on a VM and in containers. As a part of IBM Application Modernization solutions, the Transformation Advisor tool provides a recommendation for the right-fit IBM WebSphere Application Server edition and offers advice, best practices, and potential solutions to assess the ease of moving apps to Liberty or to WAS container, or to newer versions of WebSphere traditional. Transformation Advisor accelerates application migrating to Liberty and containers and helps minimize errors and risks and reduce time to market. Congratulations! You have successfully completed the lab \u201cExploring IBM Transformation Advisor data collection, app assessments, and deployment accelerators\u201d","title":"Summary"}]}